<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>DDIA 数据密集型应用笔记 （III）</title>
      <link href="/blog/2021/07/13/DDIA-%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%AC%94%E8%AE%B0-III/"/>
      <url>/blog/2021/07/13/DDIA-%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%AC%94%E8%AE%B0-III/</url>
      
        <content type="html"><![CDATA[<h1 id="Design-Data-intensive-applications-II-–-派生数据"><a href="#Design-Data-intensive-applications-II-–-派生数据" class="headerlink" title="Design Data-intensive applications (II) – 派生数据"></a>Design Data-intensive applications (II) – 派生数据</h1><a id="more"></a><p>本章主要会介绍面向批处理（batch processing）和面向流的处理的数据系统。</p><h2 id="批处理系统"><a href="#批处理系统" class="headerlink" title="批处理系统"></a>批处理系统</h2><h3 id="UNIX"><a href="#UNIX" class="headerlink" title="UNIX"></a>UNIX</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat /var/<span class="built_in">log</span>/nginx/access/<span class="built_in">log</span> |</span><br><span class="line">    awk <span class="string">'&#123;print $7&#125;'</span>    |</span><br><span class="line">    sort                |</span><br><span class="line">    uniq -c             |</span><br><span class="line">    sort -r -n          |</span><br><span class="line">    head -n 5           |</span><br></pre></td></tr></table></figure><p>awk命令按空格分割成不同的字段，每行打印第7个字段（也可以指定awk -F ‘//‘  ‘{print  $2}’用-F表示以’//‘分隔。sort命令从大到小排，因为uniq只比较相邻行去重，所以需要sort。head表示取前五个。</p><p>使用这样的UNIX命令可以像流水线一样处理数据，每个命令处理好一件事情，组合成强大的作业。</p><p>当某个程序输出称为另一个程序的输入时，就必须统一<strong>接口</strong>。在UNIX中就是文件（文件描述符）。如上的命令将输入文件视为由\n字符分隔的记录列表。</p><p>UNIX工具另外也使用stdin和stdout。管道允许将一个进程的stdout附加到另一个进程的stdin（小的内存缓冲区）。也可以将文件作为输入/输出重定向到文件。而这里局限性是，有多个输入或输出就很棘手。用户不能pipe输出给一个网络连接。</p><p>最大的局限是，UNIX工具只能在一台机器上运行。</p><h3 id="MapReduce与分布式文件系统"><a href="#MapReduce与分布式文件系统" class="headerlink" title="MapReduce与分布式文件系统"></a>MapReduce与分布式文件系统</h3><p>UNIX工具使用stdin和stdout作为输入和输出，而MapReduce作业在分布式文件系统上读写文件。在Hadoop的MapReduce实现中，该文件系统称为HDFS。HDFS基于<a href="https://spycsh.github.io/blog/2021/06/29/DDIA-%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%AC%94%E8%AE%B0-II/">无共享原则</a>。</p><p>HDFS包含一个在每台机器上运行的守护进程，并会开放一个网络服务以允许其他节点访问存储在该机器上的文件（假设数据中心的每台节点都附带一些本地磁盘）。名为NameNode的中央服务器会跟踪哪个文件块存储在哪台机器上。因此，从概念上讲，HDFS创建了一个庞大的文件系统，来充分利用每个守护进程机器上的磁盘资源。</p><p><a href="https://www.hadoopdoc.com/hadoop/hadoop-intro" target="_blank" rel="noopener">HDFS架构和Hadoo守护进程</a>。master节点上会运行一个叫做 namenode 的守护进程，每个 slave 节点上都会有 datanode 守护进程，两个进程都是属于HDFS 的。因此，slave 节点也叫做 datanode 节点。Namenode 主要用于<strong>存储元数据</strong>和管理 datanode 节点。而 datanode 则是<strong>真正存储数据和执行任务的地方</strong>。此外，还有一个SecondaryNameNode（管理层）辅助NameNode管理。</p><p>Apache Hadoop 工作原理：</p><ol><li>输入数据被划分成若干个128MB（默认值）的块，然后把它们移动到不同的节点。</li><li>在多个 datanode 存储完所有数据块之后，用户才能处理这些数据。</li><li>接着，master 把用户提交的程序调度到独立的节点上。</li><li>等所有节点处理完数据之后，输出计算结果并写回 HDFS。</li></ol><h4 id="MapReduce作业执行"><a href="#MapReduce作业执行" class="headerlink" title="MapReduce作业执行"></a>MapReduce作业执行</h4><p>JobTracker：属于管理层，管理集群资源与对任务调度，监控任务的执行<br>TaskTracker：属于应用层，执行JobTracker分配分发的任务，并向JobTracker汇报任务的执行情况</p><p>MapReduce工作步骤：</p><ol><li>读取一组输入文件，分解成记录，web日志例子里每个记录就是一行。</li><li>调用mapper函数从每个输入记录中提取一个键值对。</li><li>按关键字将所有键值对<strong>排序</strong>。对应日志例子里的sort。</li><li>调用reducer遍历排序后的键值对，键重复，则可以组合，对应uniq -c，reducer可以对相邻记录进行计数。</li></ol><blockquote><p>mapper 和 reducer 如何链接<br>通过目录名隐式完成，每个命令的输出被写入临时文件，下一个命令从临时文件中读取，而不是像UNIX命令一样直接从一个进程通过很小的内存缓冲区传递到另一个进程</p></blockquote><blockquote><p>Hadoop的工作流调度，一个作业只有在先前的作业成功完成时才能开始，为了处理其中的依赖关系，有各种Hadoop的工作流调度器，包括Oozie，Azkaban，Luigi，Airflow和Pinball。</p></blockquote><p>一个MongoDB的js的<a href="https://spycsh.github.io/blog/2021/06/02/DDIA%20%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%AC%94%E8%AE%B0/">例子</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">db.observations.mapReduce(</span><br><span class="line">    function map() &#123;</span><br><span class="line">        var year = this.observationTimestamp.getFullYear();</span><br><span class="line">        var month = this.observationTimestamp.getMonth() + 1;</span><br><span class="line">        emit(year + &quot;-&quot; + month, this.numAnimals);</span><br><span class="line">    &#125;,</span><br><span class="line">    function reduce(key, values)&#123;</span><br><span class="line">        return Array.sum(values);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        query: &#123;family: &quot;Sharks&quot;&#125;,</span><br><span class="line">        out: &quot;monthlySharkReport&quot;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>MapReduce的分布式执行（详见原书图10-1）</li></ul><p>MapReduce的并行化基于分区，HDFS输入目录的每个文件或文件块都被视为一个单独的分区。</p><p>MapReduce调度器会尝试在有输入文件的那台机器上运行mapper任务，这被称为计算靠近数据，避免输入文件网络复制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 带有3个mapper和reducer的MapReduce作业</span><br><span class="line"># 为了确保具有相同关键字的所有键值对都在相同的reducer任务中处理，框架使用关键字的哈希值来确定哪个reduce任务接收特定的键值对</span><br><span class="line">---- mapper -----          ---- reducer ----</span><br><span class="line">        m1, r1              m1, r1</span><br><span class="line">m1 =&gt;   m1, r2       =》    m2, r1  =&gt; r1</span><br><span class="line">        m1, r3              m3, r1</span><br><span class="line"></span><br><span class="line">        m2, r1              m1, r2</span><br><span class="line">m2 =&gt;   m2, r2      =》     m2, r2  =&gt; r2</span><br><span class="line">        m2, r3              m3, r2</span><br><span class="line"></span><br><span class="line">        m3, r1              m1, r3</span><br><span class="line">m3 =&gt;   m3, r2      =》     m2, r3  =&gt; r3</span><br><span class="line">        m3, r3              m3, r3</span><br></pre></td></tr></table></figure><p>每当mapper完成读取输入文件并写入经过排序的输出文件，MapReduce调度器就会通知reducer开始从mapper中获取输出文件。根据key哈希值，有相同的key的kv pair会复制到同一个reducer。</p><h4 id="Reduce端的join与分组"><a href="#Reduce端的join与分组" class="headerlink" title="Reduce端的join与分组"></a>Reduce端的join与分组</h4><p>查询涉及少量记录，对全表扫描费时，建索引比较好。</p><p>分析查询，则需要并行扫描数据集。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># log</span><br><span class="line">user 105 clicked button ... to load URL ... </span><br><span class="line">user 296 viewed the profile of user 134 </span><br><span class="line">user 251 logged out from browser session ...</span><br><span class="line"></span><br><span class="line"># db</span><br><span class="line">user_id email data_of_birth</span><br><span class="line">105 ...</span><br></pre></td></tr></table></figure><p>活动事件需要与用户描述的数据库进行join。但是尽量应该在一个机器上运行，因此应当获取db副本，将其放在HDFS的一组文件中，并将用户活动记录放在另一组文件中，然后用MapReduce将所有记录集中到一起，从而有效处理它们。</p><ul><li>排序-合并join</li></ul><p>使用相同的ID遍历活动事件，输出相应的已观看网址和观看者年龄。<br>详见书图10-3</p><ul><li>分组<br>GROUP BY + COUNT(*) / SUM(fieldname) / topK</li></ul><ol><li>收集用户会话（使用会话cookie、用户id作key）的所有活动事件，确定选择网站新版本的用户是否比选择旧版本(A / B测试）的用户更有可能产生购买行为。将不同用户的事件分配到不同分区。</li></ol><h4 id="处理数据倾斜"><a href="#处理数据倾斜" class="headerlink" title="处理数据倾斜"></a>处理数据倾斜</h4><p>有些用户有上百万关注者，这些人被称为热键。</p><p>某个reducer必须处理比其他reducer更多的记录。然而，MapReduce必须等到所有mapper和reducer都完成时才能完成。</p><p>解决方法是先抽样作业(Pig)或明确指定(Crunch)哪些是热键，然后复制到多个reducer并行处理。</p><p>Hive则是明确指定哪些是热键，然后独立出来，使用map端join。</p><h4 id="map端join"><a href="#map端join" class="headerlink" title="map端join"></a>map端join</h4><p>从每个输入记录中提取关键字和值，将键值对分配给reducer分区，并按关键字排序。</p><ul><li><p>广播哈希join</p></li><li><p>分区哈希join</p></li><li><p>map端合并join</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Distributed System </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DDIA 数据密集型应用笔记 (II)</title>
      <link href="/blog/2021/06/29/DDIA-%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%AC%94%E8%AE%B0-II/"/>
      <url>/blog/2021/06/29/DDIA-%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%AC%94%E8%AE%B0-II/</url>
      
        <content type="html"><![CDATA[<h1 id="Design-Data-intensive-applications-II-–-分布式数据系统"><a href="#Design-Data-intensive-applications-II-–-分布式数据系统" class="headerlink" title="Design Data-intensive applications (II) – 分布式数据系统"></a>Design Data-intensive applications (II) – 分布式数据系统</h1><a id="more"></a><p>上一部分针对单机存储系统技术，这一部分我们将讨论多台机器的存储与检索服务。</p><ul><li>扩展性：读写压力大，负载分散到多台机器上</li><li>容错与高可用性：单机故障，多机提供冗余接管失效组件</li><li>延迟：应优先让用户就近的数据中心提供服务</li></ul><blockquote><p>如何处理更强的负载？</p></blockquote><p>垂直扩展（更强大机器）：</p><ul><li><p>共享内存架构：热插拔组件（服务器不关闭机器情况下更换磁盘，内存模块，甚至CPU）；无法异地容错；</p></li><li><p>共享磁盘：数据存储在可共享访问的磁盘阵列上，服务器与磁盘之间往往提供高速网络连接。race condition或锁会限制。</p></li></ul><p>水平扩展：</p><ul><li>无共享shared-nothing架构（本章重点）：每个节点独立使用本地CPU，运行数据库软件的机器或虚拟机称为节点，节点之间的协调通信全部在传统网络且核心逻辑主要依靠软件实现。</li></ul><p><strong>复制和分区</strong><br>复制replication：在多个节点上保存相同数据的副本。</p><p>分区partitioning：将一个大的数据库拆分成多个较小的分区，不同分区分配给不同的节点（sharding）。</p><h2 id="数据复制"><a href="#数据复制" class="headerlink" title="数据复制"></a>数据复制</h2><h3 id="主节点与从节点"><a href="#主节点与从节点" class="headerlink" title="主节点与从节点"></a>主节点与从节点</h3><blockquote><p>如何确保所有副本之间的数据是一致的？</p></blockquote><p>对于每一笔数据写入，所有副本都有随之更新。否者某些副本将出现不一致，最常见的解决方案是基于主节点的复制（<strong>主从复制</strong>）。在这种情况下，只有主副本处理写请求，写入本地存储，然后将数据更改为复制的日志或更改流发送给所有从副本，每个从副本获得更改日之后应用到本地，严格保持顺序。而对于读请求，主从副本都可以处理。</p><blockquote><p>同步复制还是异步复制</p></blockquote><p>同步是指执行一个请求前，讯问从节点的确认，得到确认后再执行，异步指不用等到确认就立即执行。前者好处在于主节点发生故障数据丢失，从节点就可以继续访问最新数据；缺点在于从节点会阻塞，没有throughput。所以有时设为半同步会比较好。</p><blockquote><p>如何处理主从节点呈现不同时间点的数据？</p></blockquote><p>对<strong>主节点</strong>的数据副本产生一个consistent snapshot，将快照拷贝到新的从节点。从节点连接到主节点并请求快照点之后发生的数据更改日志。快照与复制日志的某个确定位置相关联，这个位置信息在PostgreSQL中称为”log sequence number”，MySQL称为”binlog coordinates”。获得日志后从节点处理主节点上的新的数据变化（追赶caught up)。</p><h4 id="处理节点失效"><a href="#处理节点失效" class="headerlink" title="处理节点失效"></a>处理节点失效</h4><ul><li>从节点失效 - 追赶式恢复</li><li>主节点失效 - 节点切换（leader election，心跳确认失效，选主共识，重新配置reconfigure把主节点降级为从节点并认可新的主节点）</li></ul><blockquote><p>使用异步复制，且失效之前，新的主节点并未收到原主节点的所有数据，选举后，原主节点又重新上线并加入到集群，接下来的写操作会发生什么？</p></blockquote><p>新的主节点会收到冲突的写请求，那么就需要让这个把请求丢弃，如果数据库之外有其它系统依赖于数据库的内容，丢弃数据会特别危险。</p><blockquote><p>脑裂（split brain）是什么？</p></blockquote><p>两个节点各认为是主节点，都会接收写请求。</p><blockquote><p>如何设置合适的超时来检测主节点失效?</p></blockquote><p>超时太短，突发的负载峰值会导致节点的响应时间变长甚至超时，严重拥塞。</p><h3 id="复制滞后问题"><a href="#复制滞后问题" class="headerlink" title="复制滞后问题"></a>复制滞后问题</h3><p>上面讲到了利用<strong>冗余</strong>容忍节点故障，复制还可以加强<strong>可扩展性</strong>（多节点处理更多请求），以及保证<strong>低延迟</strong>（将副本部署在地理上距离用户更近的地方）？</p><p>如果用户从副本读数据，但副本还没有和主节点同步。这时就会引起复制滞后replication lag，而在现实生活中又可能对应下列三种问题。</p><h4 id="读自己的写-read-your-own-write"><a href="#读自己的写-read-your-own-write" class="headerlink" title="读自己的写 read your own write"></a>读自己的写 read your own write</h4><p>写请求到主节点，主节点insert一条数据，复制SQL语句到从节点，但这条SQL尚未到达从节点，此时若从从节点查询结果，结果可能空。</p><p>因此我们需要<strong>写后读一致性</strong>，也称为读写一致性。</p><p>解决方法有：</p><ul><li><p>社交网站上用户首页信息通常只能由所有者编辑，其他人无法编辑，所以总是从主节点读取字节的首页配置文件。如果用户访问可能会被修改的内容，从主节点读取；否则，在从节点读取。</p></li><li><p>监控从节点的复制滞后程度。避免从滞后时间过长的从节点读取。</p></li></ul><h4 id="单调读-monotonic-reads"><a href="#单调读-monotonic-reads" class="headerlink" title="单调读 monotonic reads"></a>单调读 monotonic reads</h4><p>写请求到主节点，主节点insert一条数据，复制SQL语句到A,B两个从节点，传到了A节点但没有传到B节点，用户先从A从节点查询结果有数据，而从B节点查询结果无数据。</p><p>因此我们需要单调读，这介于强一致性和最终一致性之间。它保证了用户绝对不会看到这种“回滚”现象。</p><p>解决方法：<br>用户总是从同一副本执行读取，为此，需要基于用户ID的哈希选择副本，副本失效则要重新路由到另外一个副本。</p><h4 id="前缀一致读-consistent-prefix-reads"><a href="#前缀一致读-consistent-prefix-reads" class="headerlink" title="前缀一致读 consistent prefix reads"></a>前缀一致读 consistent prefix reads</h4><p>情景：对于观察者，A提出问题之前，B就就回答了A的问题。</p><p>这是分区partitioned（分片sharded）数据库的一个特殊问题。不同分区独立运行，因此不存在全局写入顺序，这就导致当用户从数据库中读时，可能会看到数据库的某部分旧值和另一部分新值。</p><p>A在一个分区，B在另一个分区，分区各有一个从节点，主节点A，B接发消息维持顺序，从节点逆序，观察者从从节点查看消息记录发现颠倒。</p><p>解决方法：<br>只在主节点进行特定类型的读取？应用层代码复杂；<br>支持事务？可用性代价过高。</p><h3 id="多主节点复制"><a href="#多主节点复制" class="headerlink" title="多主节点复制"></a>多主节点复制</h3><p>主节点网络中断，主从复制就无效了。因此可以以一定的topology配置多个主节点。</p><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><ul><li>多数据中心</li></ul><p>多数据中心（接近用户）。在每个数据中心都配置主节点。性能上，主从复制每个写请求都必须经由广域网传送到主节点所在的数据中心，而多主节点复制中，可以在本地数据中心快速响应，然后采取<strong>异步复制</strong>将变化同步到其他数据中心。对上层应用有效屏蔽了数据中心之间的网络延迟，使得终端用户所体验到的性能更好。此外，还可以容忍数据中心失效和网络问题。如MySQL的Tungsten Replicator，PostgreSQL的BDR和Oracle的GoldenGate。</p><p>问题：冲突解决？</p><ul><li>离线客户端操作</li></ul><p>应用在网络断开后还要继续工作。比如手机，笔记本上的日历，需要随时查看或添加，在离线状态下进行任何更改会在下次设备上线时与服务器同步。例子：CouchDB</p><ul><li>协作编辑</li></ul><p>Google Docs。冲突可以将文档锁定，或单个按键或全程无锁。</p><h4 id="处理写冲突"><a href="#处理写冲突" class="headerlink" title="处理写冲突"></a>处理写冲突</h4><ul><li><p>检测到冲突后，根据ID或时间戳大小先后选择一个写请求作为胜利者，将另外的丢弃（数据丢失）。</p></li><li><p>所有冲突保存下来，下一次读取时，提示用户或自动解决冲突（CouchDB）。</p></li></ul><h4 id="拓补结构"><a href="#拓补结构" class="headerlink" title="拓补结构"></a>拓补结构</h4><p>多个主节点的拓补（环形MySQL，星形，all-to-all）。环形拓补中，中间节点需要转发数据变更，如果某个节点收到包含自身标识符的数据更改，表明请求已经被处理过。问题是单点故障。需要重新配置拓补结构排除故障。</p><p>all-to-all拓补中消息可以沿不同方向传播，没有单点故障。但是，可能会出现某些网络链路比其他更快的情况，产生意外的顺序。（因果序乱了，类似前缀一致读中）。</p><p>为此可以使用version vector向量来描述因果序。</p><h3 id="无主节点复制"><a href="#无主节点复制" class="headerlink" title="无主节点复制"></a>无主节点复制</h3><p>Dynamo, Riak, Cassandra。取消主节点，任何副本都可以接收写请求。</p><p>向多个副本<strong>并行发送</strong>读请求，根据版本号确定哪个值更新。向多个副本并行发送写请求，三个副本有两个成功确认写操作，则成功。</p><p>read-repair:</p><p>当检测查询到三个中两个副本返回一个值，另一个返回一个旧值时，把新值写入旧的副本。</p><p>anti-entropy：<br>后台进程不断查找副本之间的差异。同步到最新。</p><h4 id="读写quorum"><a href="#读写quorum" class="headerlink" title="读写quorum"></a>读写quorum</h4><p>多少个副本完成才可以认为写成功？</p><p>n个副本，w个节点确认，必须查询r个节点，则只需要w+r&gt;n，读取的节点一定包含最新值。一般来说n是奇数，w=r=(n+1)/2向上舍入。读多写少的情况下，w=n，r=1，写需要所有节点确认，查询只需查询1给节点也是ok的。</p><h2 id="数据分区"><a href="#数据分区" class="headerlink" title="数据分区"></a>数据分区</h2><p>分区数据库早在20世纪80年代就有了，最近又被一些NoSQL和基于Hadoop的数据库重视起来。接下来会讨论如何根据数据索引分区，以及分区的再平衡，和如何路由请求到正确的分区并查询。</p><h3 id="数据分区与复制"><a href="#数据分区与复制" class="headerlink" title="数据分区与复制"></a>数据分区与复制</h3><p>分区（可扩展性）：面临海量数据，需要把数据切分成多段，那么每一段就是一个分区，</p><p>复制（冗余容错）：一个分区有一个主副本（写请求经过）和多个从副本，每个副本存在不同的节点上。</p><p>如果分区不均匀，那么某些分区节点会承担更多的数据量或查询负载，称之为倾斜skewed。因此我们有几种分区方法</p><ul><li>基于关键字区间分区</li></ul><p>类似字典，ABC顺序。分区边界由管理员手动确定。Bigtable、HBase、RethinkDB、2.4版本之前的MongoDB。</p><p>对于时间戳，可以很好的区间查询。但是可能某天写入过多（当天分区），负载过高，而其它分区空闲。为此，可以引入传感器名称，然后按时间分区。</p><ul><li>基于关键字哈希值分区（<a href="https://segmentfault.com/a/1190000021199728" target="_blank" rel="noopener">一致性哈希算法</a>)</li></ul><p>哈希函数可以将字符串转换为定长随机分布的数值，减轻热点（相近的两个key也会存储在不同分区上），但是就丧失了区间查询。</p><ul><li>组合索引</li></ul><p>Cassandra的表可以声明为由多个列组成的复合主键。复合主键只有第一部分可用于哈希分区，其它列用作组合索引对Cassandra SSTable中的数据进行排序。因此它不支持在第一列上进行区间查询，但如果第一列指定好了固定值，可以对其他列进行高效的区间查询。</p><p>e.g. (user_id, update_timestamp)。不同user在不同分区，但消息时间戳顺序存在一个分区上。</p><h4 id="负载倾斜与热点"><a href="#负载倾斜与热点" class="headerlink" title="负载倾斜与热点"></a>负载倾斜与热点</h4><p>出现大量对相同关键字的写操作（点赞，关键字名人ID），哈希无效，因为两个相同的哈希值仍然相同。一个操作是key头尾各加一个随机数。</p><h3 id="分区与二级索引"><a href="#分区与二级索引" class="headerlink" title="分区与二级索引"></a>分区与二级索引</h3><p>上面讨论的是kv模型，根据关键字查，但是二级索引会更复杂，是关系数据库的必备特性。HBase不支持，但是Riak支持，也是ES等全文索引的根本。</p><ul><li>基于文档分区的二级索引</li></ul><p>假设二手车ID: 0~1000, 根据id两个分区，按颜色和厂商过滤，就需要并行对两个分区，生成color:black, color:silver等<strong>文档ID的list</strong>，软件合并（对所有分区执行查询，然后合并结果，scatter/gather）。</p><ul><li>基于词条的二级索引</li></ul><p>对所有数据进行全局索引，而不是每个分区维护自己的本地索引。读取更为高效，不需要并行scatter/gather，只需对包含词条的那个分区发出读请求。写入慢，负载，二级索引分区可能不同、在不同节点上，产生写放大。</p><blockquote><p>读放大（Read Amplification）。LSM-Tree 的读操作需要从新到旧（从上到下）一层一层查找，直到找到想要的数据。这个过程可能需要不止一次 I/O。特别是区间查询的情况，影响很明显。<br>RocksDB 和 LevelDB后台compaction减少读放大的同时，也会增加写放大的问题，也即观察到的写入数据多于上层程序写入的数据。</p></blockquote><h3 id="分区再平衡"><a href="#分区再平衡" class="headerlink" title="分区再平衡"></a>分区再平衡</h3><p>随着时间的推移，数据库需要增加节点（冗余容错，更多CPU处理负载，更多磁盘和内存存储），这样一来，请求需要从一个节点转移到另一个节点。这被称之为再平衡。目标是至少要满足：负载、读写请求数据存储更均匀分布，再平衡过程中，数据库可以继续正常提供读写服务，避免不必要的负载迁移，尽量减少网络和磁盘I/O。</p><h4 id="动态再平衡的策略"><a href="#动态再平衡的策略" class="headerlink" title="动态再平衡的策略"></a>动态再平衡的策略</h4><p>为什么不hash(key) 然后取模（mod节点数，以均匀分布所有节点到不同分区）呢？</p><p>迁移数据操作过于频繁。假设hash(key) = 123456，如果节点数N增加，hash(key) mod N 不断变化，数据必须随节点数变化而不断迁移。</p><ul><li>固定数量的分区</li></ul><p>先事先设立20个分区（远大于节点个数），假设有4个节点，每个节点有5个分区，一旦集群中添加一个新节点，该节点在每个现有的节点上匀走几（这里是1）个分区，直到分区再次达到全局平衡。删除则相反操作。</p><p>这里不会改变key到分区的映射，只会调整分区与节点的对应关系。而且可以逐步完成，旧的分区仍然可以接收读写请求。</p><p>Riak、ES、Couchbase都支持这种动态平衡的方法。</p><p>数据集总规模不确定的情况下，分区数量怎样算适宜？很难达到一个取舍点。</p><ul><li>动态分区</li></ul><p>动态分区。分区数量可以自动适配数据总量。分区数据太大就分裂、太小就合并。MongoDB、HBase。每个分区总是分配给一个节点，每个节点可以承担多个分区。对于HBase，分区文件传输需要HDFS。</p><ul><li>按节点比例分区</li></ul><p>Cassandra。分区数与集群节点数成正比。</p><h3 id="请求路由"><a href="#请求路由" class="headerlink" title="请求路由"></a>请求路由</h3><p>发生了分区再平衡，怎么找到关键字？需要连接哪个IP地址和哪个端口号？</p><p>这属于服务发现问题（zookeeper），任何网络访问的系统都有这样的问题，尤其是当服务目标支持高可用时。</p><p>处理策略（3种）。</p><ul><li><strong>允许客户端链接任意的节点</strong>（例如，采用循环式的负载均衡器）。如果某节点恰好拥有所请求的分区，则直接处理该请求；否则，将请求转发到下一个合适的节点，接收答复，并将答复返回给客户端。</li><li>将所有客户端的请求都发送到一个<strong>路由层</strong>，由后者负责将请求转发到对应的分区节点上。 路由层本身不处理任何请求，它仅充一个分区感知的负载均衡器。</li><li>客户端感知分区和节点分配关系。此时，客户端可以直接连接到目标节点， 而不需要任何中介。</li></ul><p>所有参与者都要达成共识（分区与节点的对应关系及其变化）。如ZooKeeper，每个节点向ZooKeeper注册自己，它维护了分区到节点的最终映射关系。其他参与者（路由层或分区感知的客户端）订阅此信息。一旦分区改变或者添加、删除节点，ZooKeeper就会通知路由层。</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务将应用程序多个读写操作捆绑在一起成为一个逻辑操作单元。而使用事务，也许会丧失一些可用性。为此我们必须考虑事务的作用以及如何使用它。</p><h3 id="深入理解事务"><a href="#深入理解事务" class="headerlink" title="深入理解事务"></a>深入理解事务</h3><h4 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h4><p>原子性Atomicity，一致性Consistency，隔离性Isolation，持久性Durability描述了数据库的容错机制。</p><p>A：在出错时中止事务，并将部分完成的写入全部丢弃。不用担心数据库的部分失败，它总是保证要么全部成功，要么全部失败</p><p>C：数据库处于应用程序所期待的“预期状态” （账户贷款余额和借款保持平衡）</p><p>I：并发执行的多个事务相互隔离，不能相互交叉。（不能有race condition）</p><p>D：一旦，事务提交成功，即使硬件故障或数据库崩溃，事务写入的任何数据也不会消失。（硬盘或SSD，预写日志WAL）</p><h4 id="脏读脏写、幻读、不可重复读"><a href="#脏读脏写、幻读、不可重复读" class="headerlink" title="脏读脏写、幻读、不可重复读"></a>脏读脏写、幻读、不可重复读</h4><p>解决方法：四种隔离级别read_uncommit，read_commit，read_repeatable，Serializable</p><p><a href="https://spycsh.github.io/blog/2021/02/22/dirty-read-phantom-read-and-unrepeatable-read/">参考</a></p><p>补充总结：</p><ul><li>read_commit</li></ul><p>防止了脏读（读数据库时，只能看到成功提交的数据）；防止脏写（写数据库时，只会覆盖已经成功提交的数据）。</p><p>脏写用行级锁来防止，当事务想修改某个对象（例如行或文档）时，它<br>必须首先获得该对象的锁；然后一直持有锁直到事务提交（或中止）。</p><p><strong>不能用读锁因为一个写事务就会阻塞很多读的锁申请。因此，大多数据库会维护一个旧值和当前写事务要设置的新值两个版本。事务提交前，所有其他读操作都读旧值，事务提交后才会切换到读取新值</strong>。</p><ul><li>read_repeatable</li></ul><p>防止了重复读问题（A读，B写，B提交，A再读，不一致）</p><p>MVCC多版本并发控制的<strong>一致性快照</strong>的可见性规则： </p><ol><li><p>每笔事务开始，列出当时尚在进行中的事务，忽略这些事务完成的部分写入（尽管之后可能会被提交），即不可见</p></li><li><p>所有终止事务所做的修改全部不可见</p></li><li><p>较晚事务ID所做的任何修改不可见，不管这些事务是否完成了提交</p></li><li><p>此外，其他所有的写入都对应用查询可见</p></li></ol><blockquote><p>Mysql的可重复读级别并没有完全解决幻读，考虑A读，B写，B提交，A再更新，A再提交，可能会出现A对B写的内容进行修改；所以得用MVCC+next-key locks(gap lock间隙锁或record locks索引加锁），或者下面的serializable来完全解决，这个case需要用<code>select * from table where ? for update;</code>select for update来手动锁定查询结果。但如果A只是读请求，Mysql的read_repeatable级别是可以保证幻读不出现的。<br><a href="https://juejin.cn/post/6844903799534911496" target="_blank" rel="noopener">https://juejin.cn/post/6844903799534911496</a></p></blockquote><ul><li>serializable</li></ul><p>防止了写倾斜（医生轮班例子，同一个会议室预订，声明同一个用户名）与幻读（在一个事务中的写入改变了另一个事务查询结果的现象（行增加或删除）， 称为幻读）</p><p>可串行化的三种技术：严格串行顺序执行Redis、两阶段加锁2PL（广泛运用）、乐观并发。</p><p>2PL（two-phase locking):<br>如果事务A已经<strong>读取</strong>了某个对象， 此时事务B想要写入该对象， 那么B必须等到A<strong>提交或中止</strong>之才能继续。 以确保B不会在事务A执行的过程中间去修改对象。如果事务A已经<strong>修改</strong>了对象， 此时事务B想要读取该对象， 则B必须等到A<strong>提交或中止</strong>之后才能继续。 对于2PL, 不会出现读到旧值的情况。</p><p>谓词锁（查询条件加锁），效果不佳，使用索引区间（next-key locking)锁。<strong>数据库可以简单地将共享锁附加到索引条目，表明事务已搜索了数据</strong>。</p><p>2PL是一种悲观并发控制机制（如果有锁冲突，那么直接放弃，相当于多线程的互斥锁），SSI可串行化的快照隔离是一种乐观并发机制（发生锁冲突，事务继续执行，当提交时，检查是否发生了冲突）。</p><h2 id="分布式系统的挑战"><a href="#分布式系统的挑战" class="headerlink" title="分布式系统的挑战"></a>分布式系统的挑战</h2><h3 id="故障与部分失效partial-failure"><a href="#故障与部分失效partial-failure" class="headerlink" title="故障与部分失效partial failure"></a>故障与部分失效partial failure</h3><p>当通过网络发送数据包时， 数据包可能会丢失或者延迟；同样， 回复也可能会丢失或延迟。 所以如果没有收到回复， 并不能确定消息是否发送成功。</p><p>对于HPC这种计算密集型的任务来说（天气预报或分子动力学），会定期对任务状态进行快照，保存在持久存储上，总是整体开停集群的任务。并且，节点间主要通过share memory或RDMA（远程内存直接访问）进行通信。</p><p>而对于基于互联网的服务系统（云计算），则必须考虑可用性，在线，低延迟。特征有<strong>多租户数据中心，通用计算机，IP以太网链接，弹性资源分配，按需计费</strong>。停下集群修复故障是不可取的。设备是通用机器，单节点成本低廉，也有较高故障率。</p><h4 id="检测故障"><a href="#检测故障" class="headerlink" title="检测故障"></a>检测故障</h4><p>如果故障有响应，比如发现服务进程没有侦听目标端口，操作系统会返回RST或FIN数据包辅助关闭或拒绝TCP连接，再比如路由器判断目标节点不可访问就会返回ICMP“目标不可达”数据包。但是想要知道具体请求是否执行成功，还是需要应用级别的回复。如果故障没有响应，一般使用超时判断故障。超时的选择一般是2d+r时间（d是传输时间，r是请求处理时间）。</p><p>但是一个问题是网络拥塞与排队。TCP实行流量控制，节点会主动限制自己的发送速率以避免网络链路或接受节点负载。<strong>这意味数据在进入网络之前，已经在发送方开始了排队</strong>。TCP还实现了超时重传，超时时间由响应时间分布自动调整。这些都会导致网络延迟变化。</p><p>拨打电话时，系统会动态建立一条电路，为整个线路上分配一个固定的带宽有保障的通信链路，电路一直维持到通话结束。这本质是同步的。然而，TCP连接会尝试使用所有可用的网络带宽。TCP可以传输任意大小可变的数据块，这样的代价是只能使用分组交换，对突发流量进行很多优化。如果通过电路链接来传输文件，将预估一个带宽，就不能传输任意大小可变的数据块了。有些网络比如ATM（Asynchronous Transfer Mode，与自动提款机无关）, InfiniBand尝试混合电路交换和分组交换，使用QoS（数据包优先级和调度）和准入控制（限制发送速率），在link layer实现端到端的流量控制以减少网络中的排队。但此类QoS在多租户数据中心，公有云和广域网中并未启用。</p><h3 id="时钟不同步"><a href="#时钟不同步" class="headerlink" title="时钟不同步"></a>时钟不同步</h3><p>使用NTP（Network Time Protocol）同步不同机器的时钟。</p><ul><li>石英钟漂移</li><li>本地时钟被强制重置后，突然倒退或跳跃</li><li>NTP失效，同步失败</li><li>NTP受延迟影响</li><li>闰秒</li></ul><p>冲突解决策略：LWW。Cassandra，Riak使用，最后写入获胜。</p><p>另一个问题：Lease（租约）based leader election</p><p>主节点获得租约，成为leader，这时候进程暂停（垃圾回收）被宣告为失效，recovery后对它暂停毫无所知，导致不知道新leader的存在。</p><p>为解决它，可以使用Fencing令牌，这主要是针对使用锁和租约机制来保护资源的并发访问。必须确保过期的唯一节点不能影响其他正常部分。在授予lease时，同时授予fencing令牌，每授予一次就会递增，当客户端每次向存储系统发送写请求时，都必须包含fencing令牌。比如节点A得到了lease成为leader并得到了fencing号 33，然后进程暂停很长时间，此时节点B已经得到lease成为新leader并得到fencing号 34，当节点A恢复再准备写时，就会被拒绝。</p><p>这在zookeeper中，可用事务表示zxid或节点版本cversion充当令牌，因为它们都是单调递增的。</p><p>fencing可检测无意的误操作，但是万一有节点试图破坏系统，可以伪造令牌，这样就是<a href="https://spycsh.github.io/blog/2021/01/24/Byzantine-Leader-Election/">拜占庭故障</a>。</p><p><strong>一些理论术语</strong>：</p><ul><li>系统模型synchronous, partially synchronous, asynchronous</li><li>节点失效模型crash-stop, crash recovery, byzantine crash</li><li>算法的正确性uniqueness, monotonic sequence, availability</li><li>安全与活性safety(false if有限时间内可以被违背，e.g. uniqueness, monotonic sequence), liveness（true if无限时间内可以eventually达成, availability）</li></ul><h2 id="一致性与共识"><a href="#一致性与共识" class="headerlink" title="一致性与共识"></a>一致性与共识</h2><p>第5章“复制滞后问题”中，多节点复制的先后导致了<strong>同时查询</strong>可能出现不一致的数据，这一点是无法避免的。因此退而求其次，引入了最终一致性。但这是很弱的保证，没有告诉我们什么时候能收敛于一致，当<strong>更新完立即读取</strong>，由于读取可能路由到不同副本，不保证一定能读到刚刚写入的值。</p><h3 id="可线性化Linearizability"><a href="#可线性化Linearizability" class="headerlink" title="可线性化Linearizability"></a>可线性化Linearizability</h3><p>又称强一致性，原子一致性，所有客户都有相同的数据视图。直觉的例子参见书上的例子。用一句话概括，不同客户端的所有操作（读，写，cas）的确切执行时刻（在invocation和response之间的某个时刻）都能在一个global的时间轴上表示出来。一旦某个读操作返回了新值，之后所有的读（包括柜同或不同的客户端）都必须返回新值。</p><blockquote><p>可线性化Linearizable vs. 可串行化Serializable<br>可线性化是读写寄存器（单个对象）的最新值保证。 它并不要求将操作<br>组合到事务中，因此无法避免写倾斜等问题，除非采取其他额外措施；<br>可串行化是事务的隔离属性，其中每个事务可以读写多个对象（行，文<br>档，记录等，它用来确保事务执行的结果与串行执行（即每次执行一个事务）的结果完全相同，<strong>即使串行执行的顺序可能与事务实际执行顺序不同</strong>。数据库可以同时支持这两者，但是可串行化的快照隔离必然不是线性化的，因为快照意味着不包含快照创建之后的写入数据。</p></blockquote><p>什么情况下需要线性化？</p><p>账户余额，库存，座位，都需要所有节点对某个最新值达成一致。</p><h4 id="实现线性化系统"><a href="#实现线性化系统" class="headerlink" title="实现线性化系统"></a>实现线性化系统</h4><ul><li><p>主从复制（部分可线性化）<br>主节点写入，从节点备份。如果某节点错误自认主节点，就会违法线性化。这通常用共识算法保证防止脑裂和过期的副本（zookeeper, etcd)，就可以线性化了。</p></li><li><p>多主复制（不可线性化）<br>在多节点上执行并发写入，发生写冲突后进行处理（根据ID时间戳选择一个写请求作为胜利者，丢弃另外的）</p></li><li><p>无主复制（部分可线性化）<br>Dynamo风格，写入满足w+r&gt;n，可能满足。Cassandra的LWW和不规范的quorum不能。Dynamo可以牺牲性能，使用read-impose（读修复，读后写，并行检测到某副本有过期的副本，就将新值写入此副本）和write-consult（读取quorum节点获取最新值）来满足线性化。</p></li></ul><h4 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h4><p>网络分区情况下，选择一致性（线性化）还是可用性。</p><p>权衡选择系统，钱财安全CP, 用户可用AP。</p><blockquote><p>现代CPU上的内存甚至都是非线性化，除非使用内存屏障或fence指令。为了性能，每个CPU核都有自己独立的cache和寄存器，先访问cache，再异步刷新到主存。</p></blockquote><p>不支持线性化，是为了性能。想要满足线性化，读写请求的响应时间至少要与网络中延迟成正比。master挂掉时，zookeeper选举时间30~120s，且选主时间中集群不可用。如果只是向注册中心查询服务列表，这样的时间是无法接受的。Eureka这种AP系统就更好。</p><h3 id="顺序保证"><a href="#顺序保证" class="headerlink" title="顺序保证"></a>顺序保证</h3><blockquote><p>什么情况下需要顺序与因果关系？</p><ol><li>第5章，consistent prefix read一致前缀读，观察者先看到问题答案然后才是本身。</li><li>全链接拓补（多主节点），图5-9，应当先在一个主节点插入，再在另一个主节点上更新，但是更新操作在后一个主节点比前一个更早执行。</li><li>第5章检测并发写，A, B之间存在依赖关系</li><li>在事务的快照隔离上下文中，需要“一致性”，如果快照中包含了答案，那么他也必须包含所提的问题。（一致性的快照如何正确切分）</li><li>写倾斜与幻读。两方调班，需要有一个因果关系。A申请调班成功需要依赖于B仍在值班。利用可序列化的快照隔离（乐观并发）来跟踪事务之间的因果依赖关系来达到检测写倾斜的目的。</li><li>两个通道调整图片大小的例子，一个上传，一个修改，修改了缩略图导致原图被覆盖。</li></ol></blockquote><p>total order全序，可线性化：总是能指出哪个先哪个后，而causal order因果序，如果存在happen before（依赖或同进程中的先后），就是并发关系。全序一定是因果序，反之未必。</p><p><strong>Lamport 时间戳可以保证全序与因果关系一致</strong>，计数器较大的那个时间戳大，如果计数器正好相同，节点ID越大，时间戳越大。Lamport clock和Vector clock不同，后者可以区分两个操作属于并发还是因果依赖关系，但前者不能，它的优点是紧凑高效。</p><p>虽然面临并发请求（比如注册同一个用户名），可以使用lamport clock决定获胜者（先来者申请成功），然而时间戳排序依然不够，因为不知道别的节点是否也在同时创建相同用户名。这个时候就需要全序关系广播。</p><h4 id="全序关系广播"><a href="#全序关系广播" class="headerlink" title="全序关系广播"></a>全序关系广播</h4><p>total order broadcasting/atomic broadcasting必须满足</p><ul><li>可靠发送：没有消息丢失， 如果消息发送到了某一个节点， 则它一定要发送到所有节点。</li><li>严格有序：消息总是以相同的顺序发送给每个节点。</li></ul><h3 id="分布式事务与共识"><a href="#分布式事务与共识" class="headerlink" title="分布式事务与共识"></a>分布式事务与共识</h3><ol><li>主节点选举（网络故障，脑裂）</li><li>原子事务提交（回滚）</li></ol><h4 id="2PC"><a href="#2PC" class="headerlink" title="2PC"></a>2PC</h4><p>twp phase commit 是一种在多节点之间实现原子事务提交的算法，用来保证所有节点要么全部提交，要么全部中止。2PC在数据库中使用，或以XA事务（Java Transaction API）或SOAP Web服务WS-AtomicTransaction的形式提供给应用程序。</p><p>当应用程序启动一个分布式事务时，它首先向协调者请求事务ID。该ID全局唯一。</p><p>prepare阶段，coordinator向所有participant讯问是否写入数据，如果有一票否决就作罢。</p><p>commit阶段，coordinator收到所有准备请求的答复，<strong>把决定写入到磁盘的事务日志中</strong>，防止之后系统崩溃，这个时刻称为提交点。向所有participant发送提交请求。如果请求失败，coordinator就必须一直重复，直到成功。participant收到也不能反悔。</p><p>问题是，万一coordinator出现故障怎么办？在commit阶段，participant收不到消息，但他也不知道是别的participant否决了还是coordinator故障导致自己收不到消息。</p><p>因此2PC能够顺利完成的唯一方法需要等待协调者恢复。</p><ul><li>问题可以由<a href="https://www.cnblogs.com/stateis0/p/9062128.html" target="_blank" rel="noopener">3PC</a>解决，因为在do commit 第三阶段，participant即使收不到消息，由于它在第二阶段收到了消息，所以他知道别的coordinator在第一阶段都同意提交了，所以只可能是coordinator挂了，所以过一段timeout它会自行提交。然而大部分系统还是使用2PC为主。</li></ul><h4 id="Zab，Paxos，Raft"><a href="#Zab，Paxos，Raft" class="headerlink" title="Zab，Paxos，Raft"></a>Zab，Paxos，Raft</h4><p><a href="https://raft.github.io/raft.pdf" target="_blank" rel="noopener">Raft</a></p><h4 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h4><p>很多项目间接依赖于Zookeeper，例如HBase，Hadoop YARN, kafka，是因为它提供了全序广播，达到了多副本之间的一致性。具有以下特性：</p><ul><li>线性化的原子操作（共识）：多个节点同时尝试相同操作，确保只有一个会成功。分布式锁（租约，可以释放）</li><li>全序操作：fencing令牌，解决进程暂停情况引起的冲突</li><li>故障检测（心跳）</li><li>更改通知（订阅通知机制，客户端可以读取其他客户端所创建的锁和键值）</li></ul><p>Zookeeper还用于服务发现，例如需要某项服务应该连接到哪个IP地址。在典型的云环境中，虚拟机可能会起起停停，这种动态变化的节点无<br>法提前知道服务节点的IP地址，因此，可以这样配置服务，每当节点启动时将其网络端口信息向ZooKeeper等服务注册，然后其他人只需向ZooKeeper的注册表中询问即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Distributed System </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DDIA 数据密集型应用笔记 (I)</title>
      <link href="/blog/2021/06/02/DDIA%20%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/blog/2021/06/02/DDIA%20%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Design-Data-intensive-applications-I-–-数据系统基础"><a href="#Design-Data-intensive-applications-I-–-数据系统基础" class="headerlink" title="Design Data-intensive applications (I) – 数据系统基础"></a>Design Data-intensive applications (I) – 数据系统基础</h1><a id="more"></a><h2 id="可靠，可扩展，可维护的应用系统"><a href="#可靠，可扩展，可维护的应用系统" class="headerlink" title="可靠，可扩展，可维护的应用系统"></a>可靠，可扩展，可维护的应用系统</h2><p>一个常见的应用系统应包括以下模块：数据库、高速索引（memcache，redis）、索引（ES)、流式处理（异步）、批处理（定期处理大量累计数据）。</p><p>API客户端请求进来，应首先检测数据缓存(redis)是否命中，命中就从内存读请求，否则更新数据库-&gt;数据库应数据变化更新缓存。同时更新数据库-&gt;更新索引，应用代码就可以进行全文索引(ES)查询。另外，对于异步任务可以交予消息队列(kafka)慢慢处理。</p><p>对于大多应用系统应考虑三个问题：可靠性(Reliability),可扩展性(Scalability),可维护性(Maintainability)。</p><h3 id="可靠性："><a href="#可靠性：" class="headerlink" title="可靠性："></a>可靠性：</h3><ul><li><p>硬件故障<br>硬件冗余：磁盘RAID, 服务器双电源，热插拔CPU</p></li><li><p>软件错误<br>特定值（闰秒）导致应用程序挂起，级联故障</p></li><li><p>人为失误<br>抽象层，API以及管理界面。测试边界条件（property based testing)，自动化测试。滚动发布新代码，快速恢复机制。监控性能指标和错误率。</p></li></ul><h3 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h3><blockquote><p>twitter案例：<br>问题：当一个人tweet后，当follower查看自己的timeline时，需要联表查询，效率很低：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tweets.*, users.* <span class="keyword">FROM</span> tweets</span><br><span class="line">    <span class="keyword">JOIN</span> <span class="keyword">users</span> <span class="keyword">ON</span> tweets.sender_id = users.id</span><br><span class="line">    <span class="keyword">JOIN</span> <span class="keyword">follows</span> <span class="keyword">ON</span> follows.followee_id =users.id</span><br><span class="line">    <span class="keyword">WHERE</span> follows.follower_id = <span class="keyword">current_user</span></span><br></pre></td></tr></table></figure></p></blockquote><p>可以改进的一点是当一个人tweet时就fan-out到所有follower的timeline。虽然牺牲了这个人发布tweet的时间，但是所有follower查看timeline的速度都提升了。</p><p>当然如果这个人有很多的follower，就会导致发布时间太长，也不行，所以要混着用。</p><p>另外在批处理系统Hadoop中，throughput吞吐量（<strong>每秒可处理的记录条数，或者在某指定数据集上运行作业所需的总时间</strong>）很重要，而在线系统更关注响应时间。响应时间使用平均值并不好，因为可能出现极端值（上下文切换、进程调度、网络丢包、TCP重传、垃圾回收暂停、缺页中断、磁盘I/O），所以可以使用百分数（percentiles)，中位数。amazon使用99.9百分位数作为响应时间的标准，即1000个请求中有一个无需到达最小响应时间。</p><p>如何应对负载增加？垂直扩展vertical scaling（机器升级），水平扩展（负载分布到多个小机器）。有些系统具有弹性，可以自动检测负载增加然后分配更多计算资源。水平扩展会大大提升复杂性。</p><h3 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h3><p>监控、自动化、标准工具集成（jenkins,Teamcity,K8s,JIRA,GitHub Action)</p><p>敏捷开发，TDD， 重构</p><h2 id="数据模型与查询语言"><a href="#数据模型与查询语言" class="headerlink" title="数据模型与查询语言"></a>数据模型与查询语言</h2><p>三种数据模型：关系模型、文档模型、图模型。</p><h3 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h3><p>最知名的数据模型SQL，基于1970年提出的关系模型。数据被组织成关系，在SQL中称为表(table)，其中每个关系都是元组（tuples）的无序集合（SQL中的行）。</p><blockquote><p>第一范式（1NF）强调的是列的原子性，表示列不能够分成其它几列。举例：联系人建表，电话要分成家庭电话和个人电话。第二范式（2NF），表必须有一个主键；二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的一部分，不符合 2NF 的设计容易产生冗余数据。举例【OrderDetail】（OrderID，ProductID，UnitPrice，Discount，Quantity，ProductName）= 【OrderDetail】（OrderID，ProductID，Discount，Quantity）+ Product】（ProductID，UnitPrice，ProductName）。第三范式（3NF），任何非主属性不依赖于其它非主属性。【Order】（OrderID，OrderDate，CustomerID，CustomerName，CustomerAddr，CustomerCity）主键是（OrderID），符合第二范式，但Custom也依赖于CustomID。应拆分出来<br>参考：<br><a href="https://blog.csdn.net/Dream_angel_Z/article/details/45175621" target="_blank" rel="noopener">https://blog.csdn.net/Dream_angel_Z/article/details/45175621</a></p></blockquote><p>关系数据库的核心在于商业数据处理，用例分为事务处理（银行交易，订票，仓库库存）和批处理（客户发票，工资单，报告）。</p><h3 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><p>超大数据集或超高写入吞吐量，关系模型不能很好地支持一些特定的查询操作。开源。</p><p>ORM对象关系映射框架有ActiveRecord和Hibernate，降低了应用层对象与传统关系模型之间转换的难度。面向文档数据库MongoDB, RethinkDB, CouchDB, Espresso。MongoDB数据库通过JSON模型将树形结构显示化。</p><h3 id="MapReduce-查询"><a href="#MapReduce-查询" class="headerlink" title="MapReduce 查询"></a>MapReduce 查询</h3><p>MapReduce是一种编程模型,用于在许多机器上批最处理海量数据。一些 NoSQL 存储系统（例如MongoDB和CouchDB) 支持有限的<br>MapReduce方式在大量文档上执行只读查询。举例：</p><p>在PostgreSQL中，统计每个月看到了多少鲨鱼，可以这样查询:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> date_trunc(<span class="string">'month'</span>, observation_timestamp) <span class="keyword">AS</span> observation_month,</span><br><span class="line">    <span class="keyword">sum</span>(num_animals) <span class="keyword">AS</span> total_animals </span><br><span class="line"><span class="keyword">FROM</span> observations </span><br><span class="line"><span class="keyword">WHERE</span> family=<span class="string">'Sharks'</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> observation_month;</span><br></pre></td></tr></table></figure></p><p>而在MongoDB中MapReduce功能可以这样实现目的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">db.observations.mapReduce(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> year = <span class="keyword">this</span>.observationTimestamp.getFullYear();</span><br><span class="line">        <span class="keyword">var</span> month = <span class="keyword">this</span>.observationTimestamp.getMonth() + <span class="number">1</span>;</span><br><span class="line">        emit(year + <span class="string">"-"</span> + month, <span class="keyword">this</span>.numAnimals);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">key, values</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Array</span>.sum(values);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        query: &#123;<span class="attr">family</span>: <span class="string">"Sharks"</span>&#125;,</span><br><span class="line">        out: <span class="string">"monthlySharkReport"</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>一个文档：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    observationTimestamp: Data.parse(&quot;Mon, 25 Dec 2020 12:11:11 GMT&quot;),</span><br><span class="line">    family:     &quot;Sharks&quot;,</span><br><span class="line">    species:    &quot;xxx&quot;,</span><br><span class="line">    numAnimals: 3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>对于每个匹配查询的文档，都会调用一次js的map函数，设为文档对象。</li><li>map函数emit一个kv对，key如”2021-06”，value代表观察的动物数量</li><li>对于相同的key，利用reduce按key分组，reduce将特定月份所有观察到的动物数量相加</li><li>写入monthlySharkReport集合中</li></ul><blockquote><p>map和reduce 函数对于可执行的操作有所限制。 它们必须是纯函数， 这意味着只能使用传递进去的数据作为输入， 而不能执行额外的数据库查询， 也不能有任何副作用。这样使得数据库能在任何位置，以任何顺序来运行函数，并在失败时重新运行这些函数。</p></blockquote><p>MongoDB 2.2 增加了聚合管道查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.observations.aggregate([</span><br><span class="line">    &#123; $match: &#123;family: &quot;Sharks&quot;&#125;&#125;,</span><br><span class="line">    &#123; $group: &#123;</span><br><span class="line">        _id: &#123;</span><br><span class="line">            year: &#123; $year: &quot;$observationTimestamp&quot; &#125;,</span><br><span class="line">            month: &#123; $month: &quot;$observationTimestamp&quot; &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        totalAnimals: &#123; $sum: &quot;$numAnimals&quot; &#125;</span><br><span class="line">    &#125;&#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h3 id="图状数据模型"><a href="#图状数据模型" class="headerlink" title="图状数据模型"></a>图状数据模型</h3><p>属性图</p><p>每个顶点包括</p><ul><li>唯一的标识符</li><li>出边的集合</li><li>入边的集合</li><li>属性的集合（键值对）</li></ul><p>每个边包括</p><ul><li>唯一的标识符</li><li>边开始的顶点</li><li>边结束的顶点</li><li>描述两个顶点间关系的label</li><li>属性的集合（键值对）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> vertices (</span><br><span class="line">    vertex_id   <span class="built_in">integer</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    properties  <span class="keyword">json</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> edges (</span><br><span class="line">    edge_id     <span class="built_in">integer</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    tail_vertex <span class="built_in">integer</span> <span class="keyword">REFERENCES</span> vertices (vertex_id),</span><br><span class="line">    head_vertex <span class="built_in">integer</span> <span class="keyword">REFERENCES</span> vertices (vertex_id),</span><br><span class="line">    label       <span class="built_in">text</span>,</span><br><span class="line">    properties  <span class="keyword">json</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> edges_tails <span class="keyword">ON</span> edges (tail_vertex);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> edges_heads <span class="keyword">ON</span> edges (head_vertex);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;字段名A&gt; REFERENCES &lt;表名T&gt; &lt;字段名B&gt; -- 表示字段A存在，T表中必须存在相同的值字段B</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> &lt;索引名&gt; <span class="keyword">ON</span> edges (tail_vertex); <span class="comment">-- 建立索引</span></span><br></pre></td></tr></table></figure><h2 id="数据存储与检索"><a href="#数据存储与检索" class="headerlink" title="数据存储与检索"></a>数据存储与检索</h2><p>总体来说存储引擎分为两大类，OLTP（针对事务处理）的架构和OLAP（针对分析型）。OLTP系统面向最终用户，可能收到大量请求。为了处理负载，应用程序在每个查询中只涉及少量记录。应用程序基于某种键来请求记录，而存储引擎使用索引来查找所请求键的数据，<strong>磁盘寻道</strong>时间是瓶颈。OLAP又业务分析师使用，处理的查询请求数目远低于OLTP系统，但每条查询需要在短时间扫描数百万记录。<strong>磁盘带宽</strong>（而不是寻道时间）是瓶颈，面向列的存储对于这种工作负载比较流行。</p><ul><li><p>磁盘寻道时间：是指将读写磁头移动至正确的磁道上所需要的时间。寻道时间越短，I/O操作越快，目前磁盘的平均寻道时间一般在3-15ms。<a href="https://tech.meituan.com/2017/05/19/about-desk-io.html" target="_blank" rel="noopener">来源</a></p></li><li><p>磁盘带宽：正相关影响吞吐量（单位时间可以成功传输的数据数量）。</p></li></ul><p>OLTP方面，有两个主要流派的存储引擎家族：日志结构的存储引擎（BitCask, SSTables, LSM-tree, LevelDB, Cassandra, HBase, Lucene）和面向页的存储引擎(B Tree，用于MongoDB, B+树用于MySQL)。</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>一个简易的database，实现了get和set：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="function"><span class="title">db_set</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$1</span>, <span class="variable">$2</span>"</span> &gt;&gt; database</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">db_get</span></span>()&#123;</span><br><span class="line">    grep <span class="string">"^<span class="variable">$1</span>,"</span> database | sed -e <span class="string">"s/^<span class="variable">$1</span>,//"</span> | tail -n 1 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：日志文件存储Key-Value存储对需要从头到尾扫描整个数据库文件来查找键的出现位置。</p><p>因此，加速读查询，索引是必要的。但是并不是索引越多越好，因为每个索引都会减慢写速度。</p><h4 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h4><blockquote><p>哈希索引基于哈希表。哈希表是一种查找算法，希望能尽量做到不经过任何比较，通过一次存取就能得到所查找的数据元素。因而必须要有一个确定的映射：数据的关键字key&lt;=&gt;数据元素位置。这种映射关系称为散列函数h(key)。最普通的散列函数：除留余数法h(key) = key MOD p, p&lt;=m。哈希冲突（不同key经由哈希函数生成的值相同）通常用<a href="https://cloud.tencent.com/developer/article/1454891" target="_blank" rel="noopener">拉链法</a>解决。</p></blockquote><p>为何不直接用哈希表来直接索引数据？哈希表存储了映射：键&lt;=&gt;数据文件的字节偏移量。查找某个key时，使用hash map找到文件中的偏移量，即存储位置，再读取其value。这就是Bitcask的做法。</p><p>Bitcask适合<strong>键的值频繁更新</strong>的场景。例如key是某个视频的url，value是播放的次数。有很多写操作，但没有很多key，也就是需要<strong>所有key都能保存在内存</strong>中。注意，这里key-value是追加式（日志的机制），那么怎样才能避免用尽磁盘空间呢？就是把具有相同key的记录<strong>压缩</strong>，只保留每个键最近的更新。这种实现方式是将日志分解成一定大小的段，当文件达到一定大小就关闭它并后续写入到新的段文件中。多个段也可以合并压缩，合并过程中，写请求还是在旧段上，但是合并后，写请求切换到新的合并后的段。每个段都有自己的内存哈希表，为了找到键的值，从最新的段开始依次检查。</p><p>追加式的日志看起来浪费空间，为什么不原地更新？</p><ul><li>追加和分段合并是“顺序写”，比随机写入快很多。</li><li>不必担心重写时发生崩溃。</li><li>避免碎片化问题</li></ul><p>坏处：<strong>哈希表必须全部放入内存</strong>，有大量键就gg，（注意value很占空间没有问题，因为哈希表只是key&lt;=&gt;存储位置）。很难在磁盘上维护哈希表。<strong>区间查询效率不高</strong>，只能逐个查找每个键。</p><h4 id="SSTables和LSM-Tree"><a href="#SSTables和LSM-Tree" class="headerlink" title="SSTables和LSM-Tree"></a>SSTables和LSM-Tree</h4><p>SSTable（Sorted String Table)在每个存储段都是一组key-value序列的日志结构的基础上，要求kv对的顺序按键<strong>排序</strong>。利用B树可以在磁盘上维护排序结构，而利用红黑树或AVL树可以在内存中排序。</p><p>SSTable优点：</p><ul><li>合并段可以并发读取多个输入段文件，比较每个文件第一个键，把最小的键拷贝到输出文件，重复这个过程。如果重复键出现在多个输入段，保留最新段的值，丢弃旧段的值。</li><li>查找特定键时，不再需要在内存中保存所有键的索引。比如查找handwork，知道handbag和handsome就知道要找的offset在中间。</li></ul><p>读写规则：</p><ol><li>写入时，添加到内存中的平衡树数据结构中，这个内存中的树被称为<strong>内存表（memtable）</strong></li><li>内存表大于某个threshold（通常几MB)时，将其作为SSTable<strong>写入磁盘</strong>。由于树已经维护了按键排序的kv，写磁盘比较高效。</li><li>处理读请求，先内存表，再最新磁盘段，再次新磁盘段。</li><li>后台周期性合并压缩</li></ol><p>问题：数据库崩溃，内存表丢失。解决：磁盘上保留日志，每个写入追加到日志，可以乱序，崩溃后恢复内存表。当内存表写入SSTable写入磁盘，相应日志可以丢弃。</p><h4 id="从SSTable到LSM-Tree"><a href="#从SSTable到LSM-Tree" class="headerlink" title="从SSTable到LSM-Tree"></a>从SSTable到LSM-Tree</h4><p>以上算法是LevelDB和RocksDB使用的。类似还被用于Cassandra和HBase，这两个引擎都收到Google Bigtable论文的启发（SSTable和内存表memtable）。</p><p>Log-Structured Merge-Tree。基千合并和压缩排序文件原理的存储引擎通常都被称为LSM存储引擎。</p><p>Lucene是Elasticsearch和Solr等全文搜索系统使用的索引引擎。键是单词，值是保护该单词的文档ID的列表（倒排表）。在Lucene中这个映射保存在类SSTable的排序文件中，这些文件可以根据需要在后台合并。</p><p>优化：查找不存在的键，先SSTable，再最新磁盘段，再次新磁盘段……使用<a href="https://segmentfault.com/a/1190000021136424" target="_blank" rel="noopener">布隆过滤器</a>（不存在某个键，很快告诉你结果）。大小分级（HBase）和分层压缩（levelDB），Cassandra支持这两种压缩。前者让较小较新的SSTables连续合并到旧和较大的SSTables。后者让键的范围分裂成多个更小的SSTables，旧数据被移到单独的“层级”，这样压缩可以逐步进行并节省磁盘空间。</p><p>LSM-tree的基本思想是保存在后台合并的一系列SSTable。数据按排序存储，可区间查询，不用存全部索引，磁盘顺序写入，高吞吐量。</p><h4 id="B-Trees"><a href="#B-Trees" class="headerlink" title="B-Trees"></a>B-Trees</h4><p>B-tree将数据库分解成固定大小的块或页,传统上大小为4 KB。<strong>页是内部读／写的最小单元。 这种设计更接近底层硬件， 因为磁盘也是以固定大小的块排列</strong>。某一页被指定为B-tree的根；每当查找索引中的一个键时，总是从这里开始。。 该页面包含若干个键和对子页的引用。每个孩子都负责一个连续范围内的键， 相邻引用之间的键可以指示这些范围之间的边界。</p><p>一个页面引用另一个页面，引用指向磁盘地址而非内存。</p><p>B-tree中一个页所包含的子页引用数觉称为分支因子（branching factor)。</p><p>注意插入后可能的分裂过程，子页满了，分裂成两个half-full的页，父页也需要更新以包含分裂之后的新的键范围。该算法确保树<strong>保持平衡</strong>，<strong>具有n个键的B-tree总是具有O(logn)的深度</strong>。不需要非常深的页面层次就可以找到所需的页。分支因子为500的4KB页的四级树可以存储高达256 TB。计算：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">500^4 * 4 * 1024 / (1e12) = 256</span><br></pre></td></tr></table></figure></p><h4 id="B树可靠性"><a href="#B树可靠性" class="headerlink" title="B树可靠性"></a>B树可靠性</h4><p>B-Tree的写是覆盖磁盘上的旧页，这与日志结构索引（LSM-Tree）不同，因为后者只追加不修改。B树的覆盖不会改变页的磁盘存储位置。被覆盖时引用的引用不变。</p><p>分裂时，需要更新对两个新子页的引用，如果部分页写入后发生崩溃，最终会导致索引破坏，为了恢复，常见B-Tree的实现需要支持磁盘上额外的数据结构：预写日志（write-ahead log, WAL)。这是仅支持追加的，每个B-tree的修改必须先更新WAL然后再修改树本身的页。</p><p>B树并发控制：latches锁存器（轻量级的锁）。LSM更简单，因为它们在后台执行所有合并，而不会干扰前端的查询，并且会不时地用新段原子地替换旧段。</p><h4 id="对比B树和LSM树"><a href="#对比B树和LSM树" class="headerlink" title="对比B树和LSM树"></a>对比B树和LSM树</h4><p>LSM树：</p><ul><li>写入更快，因为有较低的write-amplification写放大（在数<br>据库内，由于一次数据库写入请求导致的多次磁盘写），部分缘由顺序方式写入紧凑的SSTable文件，而不必重写树中的多个页。（顺序写&gt;随机写）</li><li>读取慢，因为必须不同压缩阶段检测多个不同的数据结构和SSTable</li></ul><p>B树：</p><ul><li>读取更快</li><li>每个键都恰好<strong>唯一</strong>对应索引的某个位置，LSM可能在不同段中有相同键的多个副本</li></ul><h4 id="其它索引结构"><a href="#其它索引结构" class="headerlink" title="其它索引结构"></a>其它索引结构</h4><p>二级索引使用CREATE INDEX命令。以便可以在每个表中找到属于同一个索引的所有行。</p><p>聚集索引：直接存储索引行，无额外跳转，MySQL的InnoDB的表的主键是聚集索引。非聚集索引：value可以是对其它地方存储的行的引用（具体位置称为堆文件），在有多个二级索引时，可以<strong>避免复制数据</strong>，实际数据仍保存在一个位置。</p><p>前者需要额外空间，加快了读取速度，后者反之。</p><h3 id="事务处理与分析处理"><a href="#事务处理与分析处理" class="headerlink" title="事务处理与分析处理"></a>事务处理与分析处理</h3><p>OLTP (online transaction processing) 在线事务处理。</p><p>OLAP (online analytic processing) 在线分析处理。</p><p>公司放弃使用OLTP系统用于分析目的，而是在单独的数据库上运行分析，这个单独的数据库被称为<strong>数据仓库（Data Warehousing）</strong>。</p><p>可以理解为，对于终端用户操作交互的是OLTP系统的数据库（电商网站-&gt;销售数据库，车辆路径规划-&gt;地理数据库）；而OLAP系统将这些数据库中的信息<strong>提取</strong>出来，进行数据<strong>转换</strong>和<strong>加载</strong>（Extract-Transform-Load，ETL）到数据仓库中，由商业分析员进行查询。</p><h3 id="列式存储"><a href="#列式存储" class="headerlink" title="列式存储"></a>列式存储</h3><p>分析人们购买新鲜水果或糖果的倾向是否取决于一周中的某天<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    dim_date.weekday, dim_product.category, </span><br><span class="line">    <span class="keyword">SUM</span>(fact_sales.quantity) <span class="keyword">AS</span> quantity_sold</span><br><span class="line"><span class="keyword">FROM</span> fact_sales</span><br><span class="line">    <span class="keyword">JOIN</span> dim_date <span class="keyword">ON</span> fact_sales.date_key = dim_date.date_key</span><br><span class="line">    <span class="keyword">JOIN</span> dim_product <span class="keyword">ON</span> fact_sales.product_sk = dim_product.product_sk</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    dim_date.year = <span class="number">2013</span> <span class="keyword">AND</span> </span><br><span class="line">    dim_product.category <span class="keyword">IN</span> (<span class="string">'Fresh fruit'</span>, <span class="string">'Candy'</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    dim_date.weekdat, dim_product.category</span><br></pre></td></tr></table></figure></p><p>想要高效执行这个查询，可以在fact_sales.date_key和fact_sales.product_sk上使用索引，告诉哪里找特定产品的所有销售。但这依然会从磁盘加载所有行（一行所有的一百多个属性）到内存，解析，再过滤不符合所需条件的行。<br><strong>在大多数OLTP数据库中，存储以面向行的方式布局，来自表的一行所有值彼此相邻存储。文档数据库的文档也被存储为一个连续的字节序列</strong>。</p><p>面向列存储，就不需要将一行中的所有值存储在一起，而是将每列的索引值存储在一起。只加载相关列的所有行，再过滤不符合所需条件的行，就快很多。</p><blockquote><p>面向列的存储布局依赖一组<strong>列文件</strong>，每个文件以相同顺序保存着数据行。 因此，如果需要重新组装整行，可以从每个单独的列文件中获取第23个条目，并将它们放在一起构成表的第23行。</p></blockquote><ul><li>列压缩</li></ul><p>常见技术：bitmap encoding位图压缩，位图可以进行run-length encoding游程编码。具体见书上的例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WHERE product_sk IN (30, 68, 69);</span><br><span class="line">加载3个bitmaps，然后按位或。</span><br><span class="line"></span><br><span class="line">WHERE product_sk = 31 AND store_sk = 3:</span><br><span class="line">加载两个bitmaps然后按位与。（思考为什么这个也行）</span><br></pre></td></tr></table></figure><ul><li>列存储的排序</li></ul><p>排序可以区间查询，也可以进一步压缩列，压缩游程（run-length encoding）。</p><ul><li>列存储的写操作</li></ul><p>插入一行后，如果想要像B树一样原地更新不太可能，因为必须重写所有列文件，一致地更新所有列。因此要使用LSM-tree，首先进入内存存储区，再添加到已排序的结构中，再写入磁盘。<strong>这个过程与面向行还是面向列无关</strong>。当累积了足够多的写入时，将与磁盘上的列文件合并，并批量写入新文件。这是Vertica采取的方式。</p><h2 id="数据编码与演化"><a href="#数据编码与演化" class="headerlink" title="数据编码与演化"></a>数据编码与演化</h2><p>代码更迭对于服务端应用程序，需要执行滚动升级rolling update（分阶段发布staged rollout)，即对少数几个节点部署新版本，检查是否正常，然后逐步在所有节点上升级新的代码。无需暂停。对于客户端应用程序，只能寄望于用户，然而他们在一段时间内可能不会马上安装更新。这意味着新旧版本的代码和数据格式可能会在系统共存。因此需要双向的兼容性。</p><ul><li>向后兼容Backward compatibility：较新代码可以读取由旧代码编写的数据。</li><li>向前兼容：较旧代码可以读取由新代码编写的数据。</li></ul><h3 id="数据编码格式"><a href="#数据编码格式" class="headerlink" title="数据编码格式"></a>数据编码格式</h3><p>内存中：数据保存在对象，结构体，列表，哈希表和树中；这些数据结构对CPU高效访问与操作进行了优化。（指针）</p><p>数据写入文件或用网络发送时，必须编码为某种自包含的字节序列（JSON）。相反的过程为解码。</p><p>Java java.io.Serializable, python pickle类似的可以完成编码解码，但是问题是编码往往与特定的编程语言绑定在一起，并且解码过程中需要实例化任意类，会导致安全问题。攻击者可能会远程执行任意代码。</p><ul><li>JSON: JS的一个子集，在Web中内置支持</li><li>XML</li><li>CSV： 语言无关的格式，功能较弱</li></ul><h4 id="Apache-Thrift和Protocol-Buffers"><a href="#Apache-Thrift和Protocol-Buffers" class="headerlink" title="Apache Thrift和Protocol Buffers"></a>Apache Thrift和Protocol Buffers</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"userName"</span>: <span class="string">"Martin"</span>,</span><br><span class="line">    <span class="attr">"favoriteNumber"</span>: <span class="number">1337</span>,</span><br><span class="line">    <span class="attr">"interests"</span>: [<span class="string">"daydreaming"</span>, <span class="string">"hacking"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Thrify用IDL接口定义语言来描述模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct Person&#123;</span><br><span class="line">    1: required string  userName,</span><br><span class="line">    2: optional i64     favoriteNumber,</span><br><span class="line">    3: optional list&lt;string&gt;    interests</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Protocol Buffers等价模式(.proto文件)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">message Person&#123;</span><br><span class="line">    required string user_name       = 1;</span><br><span class="line">    optional int64 favorite_number  = 2;</span><br><span class="line">    repeated string interests       = 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面两者都有对应的代码生成工具，生成支持多种编程语言的类<a href="https://colobu.com/2017/03/16/Protobuf3-language-guide/" target="_blank" rel="noopener">参考链接</a>。</p><p>如何用此二者实现向前兼容和向后兼容？</p><ul><li>添加新的字段到模式，给每个字段一个新的标记号码，当旧代码试着读取新代码写入的数据，包括一个不能识别的标记号码（新字段），就忽略。这样可以实现向前兼容</li><li>新代码总是可以读取旧的数据，如果添加新字段，无法使其成为必需字段，因为旧代码不会写入添加新字段，因此新字段需可选或有默认值</li></ul><p>改变数据类型？<br>int64 -&gt; int32 截断<br>int32 -&gt; int64 补0</p><p>Avro适合Hadoop，有两种模式语言（Avro IDL）和基于JSON的语言。</p><p>以上三种的模式语言比XML和JSON简单，支持更详细的验证规则。</p><h3 id="数据流模式"><a href="#数据流模式" class="headerlink" title="数据流模式"></a>数据流模式</h3><p>发送一些数据到非共享内存的另一个进程时，都需要编码为字节序列，方式有：</p><ul><li>通过数据库</li><li>通过服务调用</li><li>通过异步消息传递</li></ul><h4 id="基于服务的数据流：REST和RPC"><a href="#基于服务的数据流：REST和RPC" class="headerlink" title="基于服务的数据流：REST和RPC"></a>基于服务的数据流：REST和RPC</h4><p>Web：客户端（Web浏览器）向Web服务器发出请求，发出GET请求来下载HTML, CSS, JS, 图像等，发出POST请求提交数据到服务器。API包含一组标准的协议和数据格式（HTTP,URL,SSL/TLS,HTML)。</p><p>在<strong>Web浏览器内运行的Javascript应用程序</strong>也可以向服务器发出网络请求，并且可以使用XMLHttpRequest成为HTTP客户端（Ajax）。这种情况下的服务器响应通常不是HTML而是便于客户端应用程序进一步处理的编码数据JSON。</p><p>服务器本身可以是另一项服务的客户端（Web应用服务器作为数据库的客户端）。这种方法用于将大型数据库按照功能区域分解为较小的服务，这样当一个服务需要另一个服务的某些功能或数据时，就会向另一个服务发出请求。这种构建应用程序的方式被称为<strong>微服务体系架构</strong>。</p><p>面向服务/微服务的关键在于，通过使服务可以独立部署和演化，让应用程序更易于更改和维护。每个服务由一个团队拥有。换句话说，应当<strong>期望新旧版本的服务器和客户端同时运行，因此服务器和客户端的数据编码必须在不同版本的服务API之间兼容</strong>。</p><h4 id="网络服务"><a href="#网络服务" class="headerlink" title="网络服务"></a>网络服务</h4><p>REST是一个基于HTTP的设计理念，强调简单的数据格式，使用URL来标识资源，使用HTTP功能进行缓存控制、身份验证和内容类型协商。根据REST原则设计的API称为RESTful。Swagger可以用来描述RESTful API并生成文档。</p><p>SOAP是一种基于XML的协议，用于发出网络API请求。独立于HTTP。SOAP Web服务的API称为WSDL（web services description language，一种基于XML的语言）来描述。</p><p>RPC虽然强调让远程过程调用和调用本地方法一样，但是并没有那么简单。需要考虑远程与本地调用的差异：网络延迟，大数据的指针，语言转换。</p><h4 id="异步消息传递"><a href="#异步消息传递" class="headerlink" title="异步消息传递"></a>异步消息传递</h4><p>使用消息代理（RabbitMQ,Kafka）或Actor（Akka，Orleans，Erlang OTP），节点之间通过互相发送消息进行通信，消息由发送者编码并由接收者解码。</p><p>与直接RPC相比，使用消息代理有以下几个优点：</p><ul><li>接收方不可用或过载，它可以充当缓冲区，提高系统可靠性。</li><li>可以自动将消息重新发送到崩溃的进程，防止丢失。</li><li>避免了发送方需要知道接收方的IP地址和端口号（虚拟机云部署特别有用）。</li><li>支持发送一条消息给多个接收方。</li><li>逻辑上解耦</li></ul><p>与RPC差异在于消息传递通常是<strong>单向</strong>的，发送方通常不期望收到消息的回复。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Distributed System </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RunSpec——一个跑步app设计</title>
      <link href="/blog/2021/05/01/RunSpec%E2%80%94%E2%80%94%E4%B8%80%E4%B8%AA%E8%B7%91%E6%AD%A5app%E8%AE%BE%E8%AE%A1/"/>
      <url>/blog/2021/05/01/RunSpec%E2%80%94%E2%80%94%E4%B8%80%E4%B8%AA%E8%B7%91%E6%AD%A5app%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="RunSpec——一个基于Kotlin前端，Kafka-Spark-MongoDB后台的跑步app设计"><a href="#RunSpec——一个基于Kotlin前端，Kafka-Spark-MongoDB后台的跑步app设计" class="headerlink" title="RunSpec——一个基于Kotlin前端，Kafka+Spark+MongoDB后台的跑步app设计"></a>RunSpec——一个基于Kotlin前端，Kafka+Spark+MongoDB后台的跑步app设计</h1><a id="more"></a><p><a href="https://github.com/Spycsh/RunSpec" target="_blank" rel="noopener">点击项目地址</a></p><p>本文主要记录了一个跑步app的设计过程，该<a href="https://github.com/Spycsh/RunSpec" target="_blank" rel="noopener">项目</a>是一个课余项目，主要是我为了加深对分布式应用架构的理解而写的。项目主体用Kotlin写前端安卓，前端安卓会读取用户安卓手机传感器中的数据并且传递到后台，后台的Kafka作跑步者数据的消息队列用以解耦与缓冲，再以Spark用以数据分析和存储到MongoDB中。由于笔者水平和时间有限，部分功能还在学习实践探索中。以下将对各个模块进行介绍。</p><h2 id="adviser-根据OpenWeather-API的跑步建议的模块"><a href="#adviser-根据OpenWeather-API的跑步建议的模块" class="headerlink" title="adviser - 根据OpenWeather API的跑步建议的模块"></a>adviser - 根据OpenWeather API的跑步建议的模块</h2><p>该模块是是一个极简的springboot项目，主要功能是根据当前经纬度调用OpenWeather API找到当前天气并且提供一个API。根据该API得到的天气可以为跑者在开跑前提供一些建议。</p><h2 id="android-安卓客户端"><a href="#android-安卓客户端" class="headerlink" title="android - 安卓客户端"></a>android - 安卓客户端</h2><p>Kotlin客户端，主要有三个界面。Home页面显示了用户的经纬度，天气情况，Top 5的跑步点（预设的POI，即point of interest，每当有用户经过POI，就会增加热度，对这个热度进行排序，选取前五个）。Dashboard页面展示了步数、跑步距离、跑步用时、经过的地方。Setting页面用来debug。</p><h2 id="producer-接收app数据并且转交给Kafka队列的模块"><a href="#producer-接收app数据并且转交给Kafka队列的模块" class="headerlink" title="producer - 接收app数据并且转交给Kafka队列的模块"></a>producer - 接收app数据并且转交给Kafka队列的模块</h2><p>由于目标是庞大的用户群体产生的实时跑步数据，因此使用Kafka来作解耦与缓冲的中间件。前端采集到数据后，发布这些数据给producer模块的Kafka broker再由processor模块消费。同时producer模块利用reslet建立了一些REST API来返回该用户历史跑过的POI，Top5的POI，和用户当前跑过的POI。</p><h2 id="processor-用Spark对实时数据进行分析并存储的模块"><a href="#processor-用Spark对实时数据进行分析并存储的模块" class="headerlink" title="processor - 用Spark对实时数据进行分析并存储的模块"></a>processor - 用Spark对实时数据进行分析并存储的模块</h2><p>订阅了Kafka broker的processor模块将对用户实时的跑步数据进行一个分析和存储。这里使用Spark来进行分布式处理较为妥当。首先Spark对mongoDB有原生操作的的<a href="https://docs.mongodb.com/spark-connector/v1.1/java-api/" target="_blank" rel="noopener">connector</a>，处理起来较为便捷。此处由于缺乏对相关例子的研究，并没有用到这个connector。而是简单地用insertOne逐条存储到MongoDB的runnerData表中。当然，对于预设的POI进行了<a href="https://spark.apache.org/docs/1.6.1/api/java/org/apache/spark/broadcast/Broadcast.html" target="_blank" rel="noopener">广播</a>，用以在不同的executor上处理数据流时可以由多个task共享一个POI，进行更快速的计算。同时，计算POI和用户经纬度的距离，若小于阈值，再判断是否已有同一用户id，同一tripId经过该点的记录，否则该POI热度加一。将这个count存入数据库表runnerPOIData中。</p><h2 id="statisticsboard-POI跑步数据显示面板"><a href="#statisticsboard-POI跑步数据显示面板" class="headerlink" title="statisticsboard - POI跑步数据显示面板"></a>statisticsboard - POI跑步数据显示面板</h2><p>主要是一个springboot项目。它可以在<code>localhost:8081</code>可视化POI的热度，也可以检测经过POI的用户的记录表。数据每5秒通过stomp websocket推送到面版，再由leaflet.js在页面左边进行渲染可视化。页面右侧是一个表格，记录了trip Id，跑者Id，POI Id，距离与时间。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>ubiquitous computing and IoT 普适计算与IoT</title>
      <link href="/blog/2021/04/13/ubiquitous-computing-%E6%99%AE%E9%80%82%E8%AE%A1%E7%AE%97%E7%BB%BC%E8%BF%B0/"/>
      <url>/blog/2021/04/13/ubiquitous-computing-%E6%99%AE%E9%80%82%E8%AE%A1%E7%AE%97%E7%BB%BC%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="ubiquitous-computing-amp-IoT"><a href="#ubiquitous-computing-amp-IoT" class="headerlink" title="ubiquitous computing &amp; IoT"></a>ubiquitous computing &amp; IoT</h1><a id="more"></a><p>With the booming development of 5G technology and the Internet, peopleare  witnessing  the  era  of  the  intelligent  world  that  everything  is  connected.Internet  of  things  (IoT)  and  Ubiquitous  computing  (UbiComp)  are  two  hottopics under such circumstances.  The article [1] written by R.M.C. Andrade etal. is a good material to help readers learn about the relevant concepts of IoTand ubiquitous computing and provide examples of real-world applications andmetrics to measure the characteristics of IoT and UbiComp.  This article reviewwill simply summarize the arguments of the article and offer my opinions on thepros and cons of this article. </p><p>In the introduction of the article [1] written by R.M.C. Andrade et al, Ubiq-uitous Computing (UbiComp) is a concept occuring before the emergence of IoTand basically UbiComp is to let people use services and technologies withoutperceiving  them.   As  they  point  out,  UbiComp  emphasizes  on  Human-Thinginteractions.  IoT shares many commonalities with UbiComp such as Human-Thing interactions but on the other hand, IoT is at a more complex level be-cause it also takes Thing-Thing interactions into considerations.  However, theyhold the argument that Human-Thing interactions are significantly impacted byThing-Thing interactions.  Meanwhile, they raise the argument that the mea-sures that focus on the characteristics of UbiComp, can also be applied to IoT. </p><p>To address these arguments, the authors, in the chapter of background, pro-vides further explanations on 5 general characteristics, namely context-awareness,mobility,  transparency,  attention and calmness of ubiquitous applications outof 27 essential quality characteristics identified in previous work of the authors[2].  To support the rationality for measuring of the characteristics, the authorsrefer to their previous studies, in which they provide detailed calculating func-tions  for  each  characteristic.   Simultaneously,  the  authors point out  that  IoTis composed of six elementary building blocks, namely identification,  sensing,communication,  computation,  services and semantics.  These six elements aretightly related to Thing-Thing interaction, which also allows broader communi-cation over Internet, and is not like Machine-To-Machine (M2M) which simplysupports connection on local wired or wireless networks.  By analyzing these sixelements the authors insist that two UbiComp features, context awareness andadaptability can be mapped to IoT domain as measures of the characteristicsof IoT, which respectively capture the context information to serve users andmake changes based on the information.  Another important feature presented is the spontaneous interaction, which is related to adapted behaviors of the IoTdevices in or out of the environment.</p><p>This article then provides some experiments and evaluates on their results. To summarize, three UbiComp applications have been made which have threemain functionalities to block video based on battery level (GREat Tour), to mutedevices when the user is in an office and it is the time for the meeting specified onthe user’s agenda (GREatMute), to print documents at the nearest printer forusers (GREatPrint).  Meanwhile, two IoT applications are made to respectivelyenable users to control the air conditioners and lamp manually or automaticallyby motions (Automa GREat) and report the presence of people in a particularroom (GREat Room). A comparison is made on the three UbiComp applicationsand the two IoT applications regarding to six more detailed measures mentionedbefore (adaptability, context-awareness etc.).  The article insists that measurescome from UbiComp can be applied to IoT applications.</p><p>I would argue that the applications given are indeed typical ones in relevantareas. It is also reasonable to measure on the characteristics based on the metricsbeforehand.  However, the evaluation result cannot necessarily indicate that themeasures that come from UbiComp can be fully applied to IoT applications.  Itis not persuasive that GREatRoom is an IoT application rather than a UbiCompapplication, since it also provide services without people manually or externallyperceive or manipulate it (UbiComp).  In that case, if we classify GREarRoomas  a  UbiComp  application,  the  result  of  AutomaGREat  cannot  support  theargument because two measures of AutomaGREat are zero percentage and itwould be hard to convince people that the two measures really matters to othertypical IoT applications.  One solution I would suggest to resolve the problem isto provide another indeed typical IoT application that has a non-zero adaptationdegree and correctness.</p><p>In the final discussion, the article lists questions and answers to them, includ-ing firstly the commonalities of UbiComp and IoT applications, secondly the in-teraction problems such as synchrony of IoT data, lack of conflicts handling, de-lay of communication, thirdly the characteristics and measures of Thing-Thinginteraction  such  as  synchronicity,  responsiveness,  reliability,  battery,  context-Awareness,  interoperability  and  difficulty  of  installation,  fourthly  the  majorchallenges to the interaction in IoT such as interoperability, consistency of theinteractions, verification of interest conflicts, and evaluation.</p><p>To sum up, the article serves as a good material to let readers learn aboutthe concepts of UbiComp and IoT, the commonalities and differences betweenthem, the typical applications and how the charateristics can be measured as acriterion for practitioners.  The article also point out the challenges for buildingUbiComp and IoT applications, and motivate researchers to think of adaptingthier UbiComp applications to IoT uses in future study.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1]  R. M. Andrade, R. M. Carvalho, I. L. de Ara ́ujo, K. M. Oliveira, and M. E.Maia, “What changes from ubiquitous computing to internet of things in in-teraction evaluation?”  inInternational Conference on Distributed, Ambient,and Pervasive Interactions.    Springer, 2017, pp. 3–21.</p><p>[2]  R.   M.   Carvalho,   R.   M.   de   Castro   Andrade,   K.   M.   de   Oliveira,I. de Sousa Santos, and C. I. M. Bezerra, “Quality characteristics and mea-sures  for  human–computer  interaction  evaluation  in  ubiquitous  systems,”Software Quality Journal, vol. 25, no. 3, pp. 743–795, 2017.</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>分布式系统原理</title>
      <link href="/blog/2021/04/02/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"/>
      <url>/blog/2021/04/02/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="分布式系统原理"><a href="#分布式系统原理" class="headerlink" title="分布式系统原理"></a>分布式系统原理</h1><a id="more"></a><p>本文基于ID2203 Distributed Systems, Advanced Course课程，对整个分布式领域的问题进行一个总结。课程参考了<a href="https://www.springer.com/gp/book/9783540288466" target="_blank" rel="noopener">Introduction to Reliable Distributed Programming</a>, <a href="https://www.amazon.com/Intro-Distributed-Algorithms-2ed-Gerard/dp/0521794838" target="_blank" rel="noopener">Introduction to Distributed Algorithms</a> 等书籍。前者更偏向代码实现，书中的伪代码清晰易懂，有兴趣的读者可以买一本看看。</p><p>待更。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>电影推荐系统设计</title>
      <link href="/blog/2021/04/02/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
      <url>/blog/2021/04/02/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="电影推荐系统设计"><a href="#电影推荐系统设计" class="headerlink" title="电影推荐系统设计"></a>电影推荐系统设计</h1><a id="more"></a><p>本文出发点是总结市面上比较流行的电影推荐系统后端设计的整个流程，包括阐释Kafka/Redis/Spark/ES等工具的作用、在哪里用、怎么去用这些问题，并且加入自己的一些思考。</p><p><a href="https://github.com/Spycsh/MovieRecommenderSystem" target="_blank" rel="noopener">项目地址</a></p><h2 id="项目管理Maven"><a href="#项目管理Maven" class="headerlink" title="项目管理Maven"></a>项目管理Maven</h2><p>Apache Maven是一个软件项目管理和理解工具，它基于项目对象模型（POM）的概念，可以用以管理项目的构建，报告与文档。</p><p>本项目是一个Maven项目，采用父子项目的结构形式。Maven项目中子项目就是一个Maven module，可以通过右键-&gt;New-&gt;Module-&gt;Maven然后设置即可创建。pom文件中可以设置父子项目的信息。在主目录MovieRecommenderSystem下，我们创建一个Maven module名为recommender，再在recommender下建立五个Maven module名为DataLoader（数据加载），StatisticsRecommender(统计推荐），OfflineRecommender（离线推荐），ContentRecommender(基于内容的推荐)，StreamingRecommender（流式推荐）。</p><p>同时，在pom文件中，也可以引入相关的jar包依赖。比如spark-core, spark-sql, spark streaming，mongodb的驱动等等。</p><h2 id="数据加载DataLoader"><a href="#数据加载DataLoader" class="headerlink" title="数据加载DataLoader"></a>数据加载DataLoader</h2><p>DataLoader主要处理把csv文件的数据集加载到数据库MongoDB中。由于我们现有的数据集是三个csv文件，分布存储了电影信息，评分信息和标签信息。为此我们创建了三个case class，Movie、Rating、Tag，其中参数与csv的headers一一对应。Movie有电影id（mid），名字，描述，时长，发行日期，拍摄日期，语言，派别，演员，导演十个参数；Rating有用户id（uid），电影id，电影评分score，评论时间戳timestamp四个参数；Tag有用户id，电影id，tag名，时间戳四个参数。</p><p>由于数据集很大，使用Spark来读取到MongoDB中是一个好的选择，否则数据全都存在内存中就崩了。Spark可以尽可能地使用本地的线程分布式地读取数据并存储在MongoDB中。在SparkContext指定数据的路径，并且对csv文件进行一些split和toDF操作得到一个DataFrame，再对DataFrame进行write-&gt;option-&gt;mode-&gt;format-&gt;save就可以存储MongoDB即可。其中option带有mongo的uri和表名，mode表示存储的形式（可以是overwrite）。此外，还需要对每张表的mid，uid建立索引，指定descending或ascending。建立索引能大大加快查找数据的速度<a href="https://blog.tankery.me/development/why-we-need-indexes-for-database" target="_blank" rel="noopener">[reference]</a>. </p><p>在这个模块中，我们使用了MongoDB作为数据库，Spark作为数据读写工具存储到MongoDB。当然，我们也可以把数据存储到ElasticSearch中，以供用户搜索。一般说来，对于读多写少的存储ES是可以替代MongoDB的<br><a href="https://www.zhihu.com/question/25535889" target="_blank" rel="noopener">[reference]</a>。我们可以将这些固定的表写入ES，向用户提供更快的全文检索等搜索服务。</p><h2 id="统计推荐StatisticsRecommender"><a href="#统计推荐StatisticsRecommender" class="headerlink" title="统计推荐StatisticsRecommender"></a>统计推荐StatisticsRecommender</h2><p>StatisticsRecommender统计推荐和OfflineRecommender离线推荐都是使用Azkaban进行<strong>定时</strong>的触发执行的模块。本段主要介绍统计推荐模块。</p><p>统计推荐模块对上文DataLoader存储在mongo中的数据进行一个分析，从而得到一下四个推荐结果：</p><ol><li>最热电影  </li></ol><p>一个电影的热度通常用点击量或者评论量来衡量。这里用spark sql统计排序Rating表中具有同一个电影id（mid）的数据的行数，返回一个dataframe，把它写入mongo的RateMoreMovies表。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">mid</span>, <span class="keyword">count</span>(<span class="keyword">mid</span>) <span class="keyword">as</span> <span class="keyword">count</span> <span class="keyword">from</span> ratings <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">mid</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">count</span> <span class="keyword">desc</span></span><br></pre></td></tr></table></figure></p><ol start="2"><li>最近的最热电影  </li></ol><p>与上面类似，但是排序还要优先考虑评论时间（timestamp）<br>首先注册一个spark udf名为changeDate，对原来表中的timestamp转换成yyyyMM的形式, 得到ratingOfMonth表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">mid</span>, score, changeDate(<span class="built_in">timestamp</span>) <span class="keyword">as</span> yearmonth <span class="keyword">from</span> ratings</span><br></pre></td></tr></table></figure></p><p>再对ratingOfMonth表每个yearmonth，统计每个电影出现个数，对yearmonth、个数排序。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">mid</span>, <span class="keyword">count</span>(<span class="keyword">mid</span>) <span class="keyword">as</span> <span class="keyword">count</span>, yearmonth <span class="keyword">from</span> ratingOfMonth <span class="keyword">group</span> <span class="keyword">by</span> yearmonth, <span class="keyword">mid</span> <span class="keyword">order</span> <span class="keyword">by</span> yearmonth <span class="keyword">desc</span>, <span class="keyword">count</span> <span class="keyword">desc</span></span><br></pre></td></tr></table></figure></p><p>返回结果写入mongo的RateMoreRecentlyMovies表。</p><ol start="3"><li>Top电影</li></ol><p>Top电影考虑的不是评论数而是评分的高低，也就是由平均评分进行一个排序<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">mid</span>, <span class="keyword">avg</span>(score) <span class="keyword">as</span> <span class="keyword">avg</span> <span class="keyword">from</span> ratings <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">mid</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">avg</span> <span class="keyword">desc</span></span><br></pre></td></tr></table></figure></p><p>当然有时我们也可以确保评分个数大于某个数量，因为如果电影只有一条五星评分不足以断定它是Top电影。只需要加上having count(mid)&gt;阈值即可</p><ol start="4"><li>每个类别的Top电影</li></ol><p>之前已经计算了Top电影得到了一个名为averageMoviesDF的dataframe，将其与movieDF通过mid进行inner join操作得到一个movieWithScore（含有movie整体信息，包括我们需要的genre信息，以及avg score）。</p><p>考虑到有些电影的派别字段有多个类别genres（用竖线分割），我们就应该先对一个里面有所有的genre的list，和movieWithScore做一个笛卡尔积，然后做一个filter，对每个genre和movieRow（movieWithScore的一行），过滤掉movieRow的genres字段中不含有genre的记录。然后再将整个数据集的数据量减小，只留下必要的记录，生成RDD[genre, Iter[mid, avg score]]，再对genre做groupBy，sortWith平均分，即可得到最后的每个类别的Top电影的集合，将它保存在mongo里。</p><h2 id="离线推荐OfflineRecommender"><a href="#离线推荐OfflineRecommender" class="headerlink" title="离线推荐OfflineRecommender"></a>离线推荐OfflineRecommender</h2><p>StatisticsRecommender统计推荐和OfflineRecommender离线推荐都是使用Azkaban进行<strong>定时</strong>的触发执行的模块。本段主要介绍离线推荐模块。</p><p>统计推荐使用sql对于显性数据进行分析，而本模块使用了spark ML来做一个基于隐语义模型的协同过滤（CF）的推荐。实际上CF这一块主要分为itemCF和userCF，前者就是两个相似的电影，如果user看了一个那么另一个就可以被推荐；而后者就是两个相似的user，如果一个user看了一个movie那么这个movie也可以被推荐给另一个user。这里由于我们没有考虑user标签，所以采用的是itemCF的方式来进行离线推荐。</p><p>那么怎么断定两个电影相似？首先要找到features。给定训练集（user,product,rating)的元组和超参数rank、iterations、lambda，spark ML的ALS算法可以让我们训练出一个model。这个model可以得到一些item的features（productFeatures），我们也可以用这个model直接predict出每个user对每个product的rating。这个有什么用呢？因为原本user不可能对所有movie都评分，user对movie的评分矩阵必然是稀疏的<a href="https://www.zhihu.com/question/31509438" target="_blank" rel="noopener">[reference]</a>，但是为了得到每个user对每个movie的评分，ALS算法通过一定规律找到了features，填补了原来没有评分的地方。这样我们很轻易就可以进行一个排序然后得到一个用户的电影推荐列表了。最后存入了mongo的userRecs表。</p><p>另外，相似电影也可以通过features信息得到。两个电影都有等长的features列，进行一个余弦相似度的计算（阈值&gt;0.6）就可以得到相似电影矩阵。由于短时间相似电影矩阵都不会发生变化，可以存入mongo的MovieRecs表为实时推荐服务。</p><h2 id="实施推荐StreamingRecommender"><a href="#实施推荐StreamingRecommender" class="headerlink" title="实施推荐StreamingRecommender"></a>实施推荐StreamingRecommender</h2><p>StreamingRecommender提供了流式推荐服务，是针对用户<strong>评分行为</strong>的实时推荐模块。简单说来，就是当用户 u 对电影 p 进行了评分，将触发一次对 u 的推荐结果的更新。为此，我们先创建一个kafka流，用以实时接收评分message（UID|MID|SCORE|TIMESTAMP）。并且同时定义stream的LocationStrategies（分区分配方式）和ConsumerStrategies（消费者接收什么topics）<a href="https://spark.apache.org/docs/2.1.0/streaming-kafka-0-10-integration.html" target="_blank" rel="noopener">[reference]</a>，每当用户评分后，Flume-ng会采集到日志并且推送到kafkaStream，算法会对每个RDD的uid和mid</p><ol><li><p>根据uid找到redis中存储的最近K次电影评分，得到一个Array[(Int, Double)]，即(mid, score)的array</p></li><li><p>根据mid找到mongoDB中存储的N个最相似的电影（mongoDB中已有通过OfflineRecommender模块ALS算法计算出的相似电影表），并且过滤掉已经看过的电影），得到一个Array[Int]，即候选电影的array</p></li><li><p>融合步骤1的用户最近看过的K次电影和步骤2中找到的每个候选电影，计算出得分并排序成一个推荐列表。得分需要参考相似度，因为我们希望推荐和用户最近看过相关的电影；但得分也同时需要参考评分，因为可能虽然候选电影相似，但是评分爆低的电影我们也不希望推荐给用户；</p></li><li><p>保存Array[(Int,Double)]，也即mid和上面计算的得分score的元组数组到MongoDB。</p></li></ol><p>其中有用到redis(jedis), mongoDB, spark, kafka。步骤1使用redis存储<strong>最近K次电影评分</strong>，好处是因为redis的高速缓存，由于redis是一个内存数据存储，它不能存储非常大的数据，通常数据库内存满了就会通过LRU等淘汰策略，这对读写“最近K次的电影评分”来说，是相当符合的，步骤2使用mongoDB存储<strong>相似电影矩阵</strong>是因为，mongoDB是基于磁盘的数据存储，无需担心空间的限制，因此存在mongoDB中会更好。使用kafka是因为kafka是一个基于分布式日志的高吞吐、低延迟的发布/订阅消息队列，考虑到同时有一万个用户的电影评分数据（UID|MID|SCORE|TIMESTAMP)需要处理，而这些处理很花费时间，利用kafka做一个中介来暂时存储这些数据，而不是先存入mongoDB然后再读出来计算，会大大增加处理速度，减少数据库压力。</p><p>总的说来，当用户评分后，评分数据会通过kafka然后通过我们的实时推荐算法进行处理。当中需要用到redis存储的最近K次评分与mongo存储的相似电影表来计算score并排序得到推荐列表。然后把这个推荐列表存储到mongo里面，之后我们渲染到前端就可以看到推荐结果了。</p><h2 id="内容推荐ContentRecommender"><a href="#内容推荐ContentRecommender" class="headerlink" title="内容推荐ContentRecommender"></a>内容推荐ContentRecommender</h2><p>ContentRecommender是基于内容的推荐。考虑我们通过DataLoader模块存储了Movie表。我们可以假设关键属性是类型genres，描述，演员，导演。尤其是genres，我们可以用来进行冷启动的（首次注册时，询问用户他们喜欢的类型用以建立他们的用户个人资料）。我们可以简单地对类型应用one-hot编码，但通常不同的类型应具有不同的权重。例如，大多数战争电影都是动作电影，因此带有战争标签的电影应该更有价值。在这种情况下，我们可以使用tf-idf算法而不是ALS来解决问题。</p><p>在该系统中，tf-idf用于genres，并在MongoDB中生成一个名为ContentMovieRecs的表，并且该部分还可以与Streaming推荐器模块中实现的Kafka Streaming结合使用。</p><p>tf-idf是正相关与term frequency，负相关于inverse document frequency，它原来的意思是说，当一个词语出现在一个文档中越多（term frequency），它越有价值；但同时如果一个词语出现在多个文档中都很多（inverse document frequency），比如the，a，an这种，它越没有价值，即使tf很高也没有用。类比于我们的genres这个属性，可能一个用户看了许多动作片，但如果很多影片genre中都有动作片这个标签，动作片这个标签就没有那么有价值。利用spark ML中的HashingTF，IDF，Tokenizer可以找到电影tag（genre）的features，然后再计算余弦相似度就可以得到相似电影矩阵，提供给StreamingRecommender进行实时推荐了。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Distributed Systems revision</title>
      <link href="/blog/2021/03/18/Distributed-Systems-revision/"/>
      <url>/blog/2021/03/18/Distributed-Systems-revision/</url>
      
        <content type="html"><![CDATA[<h1 id="Distributed-Systems-revision"><a href="#Distributed-Systems-revision" class="headerlink" title="Distributed Systems revision"></a>Distributed Systems revision</h1><a id="more"></a><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Why study distributed systems? (2)</p><ul><li>Partial Failures<ul><li>Network (dropped msgs, partitions)</li><li>Node failures</li></ul></li><li>Concurrency<ul><li>Nodes execute in parallel</li><li>Msgs travel asynchronously</li></ul></li></ul><p>Two Generals’ Problem</p><p>Concensus?</p><ul><li>All correct nodes eventually decide</li><li>Every node decides the same</li><li>Only decide on proposed values</li></ul><p>Database</p><ul><li>Concurrent changes to same data</li><li>Nodes should agree on changes</li></ul><p>Use a kind of concensus: atomic commit {commit, abort}</p><p>Given Atomic Broadcast, can use it to solve concensus</p><p>=&gt; consensus cannot be solved in asynchronous system if a single node may crash</p><ul><li>No bound on time to deliver a msg</li><li>No bound on time to compute</li><li>Clocks are not synchronized</li></ul><p>=&gt; consensus solvable in synchronous system with up to N-1 crashes</p><ul><li>Known bound on time to deliver a msg</li><li>know bound on time to compute</li><li>known lower and upper bounds in physical block drift rate</li></ul><p>Partially synchronous system</p><ul><li>with up to N/2 crashes</li></ul><p>Consensus and Atomic Broadcast solvable with failure detectors</p><p>Byzantine algorithms tolerate up to 1/3 Byzantine processes</p><h2 id="Basic-Abstraction"><a href="#Basic-Abstraction" class="headerlink" title="Basic Abstraction"></a>Basic Abstraction</h2><p>Distributed algorithms are implemented as middleware between network(OS) and the application.</p><p>1) Network protocols aren’t enough</p><ul><li>TCP only offered for one-to-one communication<br>How to group communication</li></ul><p>Abstractions in this course<br>Reliable Broadcast – Causal order broadcast – Total order broadcast</p><p>2) N-N communication isn’t enough</p><ul><li>Need reliable high-level services</li></ul><p>Shared memory<br>Consensus<br>Atomic commit<br>RSM</p><p>Reliable Distributed abstractions<br>ex: reliable broadcast (ensure the msg sent to a all or one); atomic commit (reach the same decision on whether to commit or abort a transaction)</p><ul><li>Event-based Component Model<br>Events(3) Msgs, Timers, Conditions</li></ul><p>Two types of events<br>Requests (Inputs) Indications (Outputs)</p><p>Stack of Components in a single process</p><p>Example:<br>Implements: JobHandler, intance jh<br>upon event &lt;jh, Submit|job&gt; do<br>    process(job)<br>    trigger&lt;jh, Confirm|job&gt;</p><p>How to specify a distributed service? (4)</p><ul><li>Interface (aka Contract, API)<ul><li>Requests</li><li>Responses</li></ul></li><li>Correctness Properties<ul><li>Safety</li><li>Liveness</li></ul></li></ul><p>safety 有限时间内可以被违背<br>= safty is false for an execution E if there exists a prefix such that all extensions are false<br>liveness 无限时间内才可以被达成<br>= liveness is true for an execution E if for all prefixes there exists an extension that is true</p><ul><li>Model<ul><li>Assumptions on failure</li><li>Assumptions on timing (amount of synchrony)</li></ul></li></ul><p>failure types (4) crash-stop, omissions, crash-recovery, byzantine:<br>Omission failure covers both (1) Send omission (Not send what has to be sent), (2) Receive omission<br>In Crash recovery failures, a process is faulty in an execution if it crashes and never recovers or recovers infinitely often. (amnesia: the recovered nodes might not be able to restore all of state)<br>In Byzantine failures, a process may behave arbitrarily: sending or updating its state as not specified by its algorithm, and behave maliciously (collude)</p><p>Byzantine &gt; Crash-recovery &gt; Omission &gt; Crash</p><p>Channel failure modes (5)</p><ol><li>Fair-Loss Links</li></ol><ul><li>Channels delivers any message sent with non-zero probability (no network partitions)<br>  FL1. Fair-Loss: if m is sent inf often by pi to pj, and neither      crash, then m is delivered infinitely often by pj<br>  FL2. Finite duplication<br>  FL3. No creation: No msg is delivered unless it was sent</li></ul><ol start="2"><li>Stubborn Links</li></ol><ul><li>Channels delivers any message sent infinitely many times<br>  SL1. Stubborn delivery: correct pi msg -&gt; pj, pj delivers infinitely<br>  SL2. No creation</li></ul><ol start="3"><li>Perfect Links</li></ol><ul><li>Channels that delivers any message sent exactly once<br>  PL1. Reliable Delivery: correct pi msg -&gt; pj, pj eventually deliver<br>  PL2. No duplication: deliver once<br>  PL3. No creation</li></ul><p>use stubborn links to implement<br>keep log of received msgs in Delivered</p><p>FIFO Perfect links<br>FIFO. Ordered Delivery</p><ol start="4"><li>Logged Perfect Links</li></ol><ul><li>Channels delivers any message into a receiver’s persistent store (msg log)</li></ul><ol start="5"><li>Authenticated Perfect Links</li></ol><ul><li>Channels delivers any message m sent from process p to process q, that guarantees the m is actually sent from p to q</li></ul><p>Timing: Clocks =&gt; Lower and upper bounds on clock rate-drift and clock skew with regarding to real time<br>Causal order<br>a -&gt; b<br>(1) a occurs before b on the same process<br>(2) if a is a send(m) and b deliver(m), then a -&gt; b<br>Causal order is transitive<br>Two events are concurrent if not a -&gt; b and not b -&gt; a</p><p>Partial &amp; Total Orders<br>Partial -&gt; doesn’t order concurrent events<br>Total -&gt; any two distinct clock values are ordered (adding pid)</p><ul><li>Implementation<ul><li>Composed of other services</li><li>Adheres to interface and satisfies correctness</li><li>Has internal events</li></ul></li></ul><h2 id="Failure-Detectors"><a href="#Failure-Detectors" class="headerlink" title="Failure Detectors"></a>Failure Detectors</h2><p>Distributed algorithms are implemented as middleware between network(OS) and the application.</p><p>1) Network protocols aren’t enough</p><ul><li>TCP only offered for one-to-one communication<br>How to group communication</li></ul><p>Abstractions in this course<br>Reliable Broadcast – Causal order broadcast – Total order broadcast</p><p>2) N-N communication isn’t enough</p><ul><li>Need reliable high-level services</li></ul><p>Shared memory<br>Consensus<br>Atomic commit<br>RSM</p><p>Reliable Distributed abstractions<br>ex: reliable broadcast (ensure the msg sent to a all or one); atomic commit (reach the same decision on whether to commit or abort a transaction)</p><ul><li>Event-based Component Model<br>Events(3) Msgs, Timers, Conditions</li></ul><p>Two types of events<br>Requests (Inputs) Indications (Outputs)</p><p>Stack of Components in a single process</p><p>Example:<br>Implements: JobHandler, intance jh<br>upon event &lt;jh, Submit|job&gt; do<br>    process(job)<br>    trigger&lt;jh, Confirm|job&gt;</p><p>How to specify a distributed service? (4)</p><ul><li>Interface (aka Contract, API)<ul><li>Requests</li><li>Responses</li></ul></li><li>Correctness Properties<ul><li>Safety</li><li>Liveness</li></ul></li></ul><p>safety 有限时间内可以被违背<br>= safty is false for an execution E if there exists a prefix such that all extensions are false<br>liveness 无限时间内才可以被达成<br>= liveness is true for an execution E if for all prefixes there exists an extension that is true</p><ul><li>Model<ul><li>Assumptions on failure</li><li>Assumptions on timing (amount of synchrony)</li></ul></li></ul><p>failure types (4) crash-stop, omissions, crash-recovery, byzantine:<br>Omission failure covers both (1) Send omission (Not send what has to be sent), (2) Receive omission<br>In Crash recovery failures, a process is faulty in an execution if it crashes and never recovers or recovers infinitely often. (amnesia: the recovered nodes might not be able to restore all of state)<br>In Byzantine failures, a process may behave arbitrarily: sending or updating its state as not specified by its algorithm, and behave maliciously (collude)</p><p>Byzantine &gt; Crash-recovery &gt; Omission &gt; Crash</p><p>Channel failure modes (5)</p><ol><li>Fair-Loss Links</li></ol><ul><li>Channels delivers any message sent with non-zero probability (no network partitions)<br>  FL1. Fair-Loss: if m is sent inf often by pi to pj, and neither      crash, then m is delivered infinitely often by pj<br>  FL2. Finite duplication<br>  FL3. No creation: No msg is delivered unless it was sent</li></ul><ol start="2"><li>Stubborn Links</li></ol><ul><li>Channels delivers any message sent infinitely many times<br>  SL1. Stubborn delivery: correct pi msg -&gt; pj, pj delivers infinitely<br>  SL2. No creation</li></ul><ol start="3"><li>Perfect Links</li></ol><ul><li>Channels that delivers any message sent exactly once<br>  PL1. Reliable Delivery: correct pi msg -&gt; pj, pj eventually deliver<br>  PL2. No duplication: deliver once<br>  PL3. No creation</li></ul><p>use stubborn links to implement<br>keep log of received msgs in Delivered</p><p>FIFO Perfect links<br>FIFO. Ordered Delivery</p><ol start="4"><li>Logged Perfect Links</li></ol><ul><li>Channels delivers any message into a receiver’s persistent store (msg log)</li></ul><ol start="5"><li>Authenticated Perfect Links</li></ol><ul><li>Channels delivers any message m sent from process p to process q, that guarantees the m is actually sent from p to q</li></ul><p>Timing: Clocks =&gt; Lower and upper bounds on clock rate-drift and clock skew with regarding to real time<br>Causal order<br>a -&gt; b<br>(1) a occurs before b on the same process<br>(2) if a is a send(m) and b deliver(m), then a -&gt; b<br>Causal order is transitive<br>Two events are concurrent if not a -&gt; b and not b -&gt; a</p><p>Partial &amp; Total Orders<br>Partial -&gt; doesn’t order concurrent events<br>Total -&gt; any two distinct clock values are ordered (adding pid)</p><ul><li>Implementation<ul><li>Composed of other services</li><li>Adheres to interface and satisfies correctness</li><li>Has internal events</li></ul></li></ul><h2 id="Reliable-Broadcast"><a href="#Reliable-Broadcast" class="headerlink" title="Reliable Broadcast"></a>Reliable Broadcast</h2><p>Fail-stop &lt;=&gt; synchronous (P + PL_Link)<br>Fail-silent &lt;=&gt; aynchronous (PL)<br>Fail-noisy &lt;=&gt; partially synchronous (*P + PL)<br>Fail-recovery &lt;=&gt; (stubborn links or a persistent logs)</p><p>Quorums</p><ul><li>A set with at least floor(N/2) + 1 processes<br>resilience f max number of faulty processes &lt; N/2</li></ul><p>no deliver guarantees whether sender fails or not</p><p>5 reliable broadcast abstractions<br>Best-Effort: Guarantees reliability only if sender is correct<br>Reliable broadcast: Guarantees reliability independent of whether sender is correct<br>Uniform reliable broadcast: Also considers behavior of failed nodes<br>FIFO reliable broadcast: Reliable broadcast with FIFO delivery order<br>Causal reliable broadcast: Reliable broadcast with causal delivery order</p><p>Best-effort broadcast:<br>If p_i is <correct> and broadcast then eventually all <correct> processes deliver; (Best effort validity) + No duplication + No creation</correct></correct></p><p>Reliable broadcast: (Best-effort + Agreement)考虑了发送者fail但有correct的node deliver的情况，这种情况下也必须其它correct的node都deliver<br>&lt;==&gt;If p_i is correct then eventually all correct processes deliver m. If p_i is faulty then either all correct processes eventually deliver m, or no correct process delivers m;</p><p>Algo: Fail-Stop, Lazy Reliable Broadcast<br>Use P</p><p>Agreement: If a correct node delivers m, then every correct process delivers m</p><p>Uniform Reliable broadcast:<br>Reliable broadcast + Uniform Agreement (发送者fail，只要有node deliver，不管crash or correct，别的correctnode都deliver）<br>If a process delivers message m, then every correct process delivers m (Uniform agreement, take “keeping uniform with faulty process which delivers m” into consideration)</p><ul><li>one time unit is the longest message delay in E</li></ul><p>Complexity of lazy reliable broadcast<br>N processes<br>Best case: O(N) msgs<br>Worst case: O(N^2) msgs<br>Time complexity<br>Best case: 1 time unit<br>Worst case: 2 time units</p><p>Eager Reliable Broadcast</p><p>In lazy rb, we only use completness of P, not related to correctness<br>Q: replace P with *P?</p><p>A: replace P with diamond P will lead to:<br>“Pk gets info that Pi has crashed” <-> false (Pi do not crash at all, although Pk will eventually get that Pi is alive, it currently thinks Pk is crashed.</-></p><p>So:<br>Pk rebroadcast all msgs of Pi (it is unnecessary)</p><p>only affect performance, not affect correctness</p><p>For Uniform Eager Reliable Broadcast<br>We add a ack list; when all acks received, urb deliver.</p><p>Uniform agreement need P.</p><p>Majority-ACK Uniform RB &lt;==&gt;fail-silent<br>Resilience less than N/2</p><p>for fail-stop algorithm<br>has resilience = N - 1<br>all acks</p><p>weaker constraints on ACK less resilience tradeoff</p><h2 id="Causal-Broadcast"><a href="#Causal-Broadcast" class="headerlink" title="Causal Broadcast"></a>Causal Broadcast</h2><p>For Chat application<br>We should maintain a causal (happen-before) order on the context<br>Uniform broadcast does not remedy this.<br>! Causal reliable broadcast solves this</p><p>Causality of message<br>C1 (FIFO order) Some process pi broadcasts m1 before broadcasting m2<br>C2 (Network order) Some process pi delivers m1 and later broadcasts m2<br>C2 (transitivity) There is a message m’ such that m1 -&gt; m’ and m’ -&gt; m2</p><p>Causal Broadcast<br>CB: If node pi delivers m1, then pi must have delivered every message causally preceding -&gt; m1 before m1</p><p>CB’: If pj delivers m1 and m2 (保证要deliver), and m1 -&gt; m2, then pj must deliver m1 before m2</p><p>满足CB’ 不满足CB的情况：图</p><ol><li>实现在rb基础上，使用P做GC<br>Fail-Silent No waiting causal broadcast</li></ol><ul><li>Each message m carries ordered list of causally preceding messages in past_m</li></ul><p>message size grows, uaw Perfect detector P to garbage collect old messages</p><ol start="2"><li>实现在FIFO-rb上<br>Fail-Silent Causal Broadcast</li></ol><ul><li>Each msg carries a history, history is set of all causally preceding messages, and a vector timestamp</li></ul><p>Only deliver m once VCm ≤ VCi<br>Do Not deliver if VCm &gt; VCi or VCm ≠ VCi </p><ul><li><p>Single-Source FIFO order<br>Intuitively: Msgs from same node delivered in order sent<br>For all msgs m1 and m2 and all pi and pj,<br>  if p i broadcasts m1 before m2, and if pj delivers m2, then pj<br>  delivers m1 before m2<br>This formulation doesn’t require delivery of both msgs</p></li><li><p>Total Order<br>Intuitively: Everyone delivers everything in exact same order<br>For all messages m1 and m2 and all pi and pj,<br>if both pi and pj deliver both messages, then they deliver them in<br>the same order<br>This formulation doesn’t require delivery of both msgs<br>Everyone delivers same order, maybe not send order!</p></li></ul><p>如果不是single-source fifo必不是total order</p><p>Hierarchy 图</p><h2 id="Distributed-Shared-Memory"><a href="#Distributed-Shared-Memory" class="headerlink" title="Distributed Shared Memory"></a>Distributed Shared Memory</h2><p><a href="https://en.wikipedia.org/wiki/Shared_register" target="_blank" rel="noopener">wiki</a>The memory location which is concurrently accessed (read/write/CAS) is sometimes called a register.</p><p>DSM interface (4)<br>read invokation, read response, write invocation, write response</p><p>Regular Register (1, N)</p><ul><li>Termination</li></ul><ul><li>Each read and write of a correct node completes</li></ul><ul><li>Validity<br>Read returns last value written if</li></ul><ul><li>Not concurrent with another write and</li><li>Not concurrent with a failed write<br>Otherwise may return <strong>last</strong> or <strong>concurrent</strong> “value”</li></ul><hr><ol><li><p>Read-One Write-All (1, N) algorithm<br>read locally没有RTT，之后的算法都是read globally<br>P22 Postpone write responses to ensure<br>the writer does not return until it knows that the reader delivers the value that is broadcasted<br>写有1个RTT<br>2 communication steps (broadcast and Ack from all)<br>O(N) messages<br>resilience: N-1<br>然而却要Perfect Failure Detector，下面的就不用FD</p></li><li><p>Majority voting (1,N) algorithm<br>Each process stores the value of all registers<br>=&gt; write(r, v)<br>UPDATE PHASE<br>ts++(ts is a sequence number initialized to zero at the writer and incremented at each write)<br>timestamp-value pair, tvp = (ts, v)<br>send 一个update request<br>pj updates r = max(r, (ts, v)) and responds with ACK<br>QUERY PHASE<br>pi sends query, receives response (ts,v), picks max(ts, v)</p></li></ol><p>!Avoid old writes overiting new write<br>write will be ignored if it has lower timestamp</p><p>2 communication steps (one round trip)<br>O(N) messages<br>resilience: f &lt; floor(N/2)</p><p>Atomic/Linearizability vs. Sequential Consistency<br>sequential order vs. global time order<br>看例子</p><p>Majority voting算法是regular register但是如何保证Atomic的？</p><ol start="3"><li><p>(SWMR)Read-Impose Write Majority (1, N)<br>P66 When reading, also do an update (if ts same, then just return) before responding<br>读后写，写上一个写的值</p></li><li><p>(MWMR linerizable)Atomic Register Read-impose write-consult-majority (N, N)具有linearizability</p></li></ol><ul><li>Before writing, read from majority to get last ts</li><li>Do a query phase to get the latest timestamp before the update phase</li><li>为了synchronize ts</li><li>Two concurrent writes with same ts? compare process identifier<br>write operation<br>query + update phase<br>write needs 2 trips<br>One for the timestamp<br>One for broadcast-ACK<br>写前读，读上一个ts + 读后写，写上一个写的值<br>read needs 2 round-trips<br>one for read<br>one for impose if necessary</li></ul><ol start="5"><li>(MWMR sequential consistent)==&gt;LT<br>Logical Time algorithm (LT)<br>(N,N) Seq Consistent<br>Writes in 1 RTT and reads in 2 RTTs<br>Tolerates f&lt;n/2 faulty processes<br>Linearizability in logical time allows compositionality</li></ol><p>tvp = ((lt, i), v)<br>((10,1),5) timestamp 10, pid 1,value 5</p><p>Livness(3)<br>Wait-free (no deadlocks, no live-locks, no starvation)<br>Lock-free/non-blocking (no deadlocks, no live locks, maybe starvation)<br>Obstruction free/solo-termination (no deadlocks, maybe live-locks, maybe starvation)</p><p>总结<br>Distributed Algorithms</p><p>===&gt;the weak model (regular register)</p><ul><li>SWMR (Single write multiple read) regular registers</li></ul><p>Bogus algo (did not work)<br>Centralized(no failures)<br>Read-One Write-All Algorithm (P)<br>Majority Voting(No FD)</p><p>===&gt;the strong model(atomic register)<br>atomic register</p><ul><li><p>SWMR linearizable registers<br>  read-impose idea</p></li><li><p>MWMR linearizable registers<br>  read-impose write-consult</p></li><li>MWMR sequentially consistent registers<br>  read-impose write-consult-majority</li></ul><p>Compare the performance and resilience of algorithms</p><h2 id="Consensus"><a href="#Consensus" class="headerlink" title="Consensus"></a>Consensus</h2><p>Single Value Consensus properties (4)<br>Validity: Any value decided is a value proposed<br>Agreement: No two correct nodes decide differently<br>termination: Every correct node eventually decides<br>integrity: A node decides at most once</p><p>do not care about crashed nodes</p><p>怎样避免orphan message（之前propose的值后到了，不应该再decide了）<br><strong>Invariant</strong><br>adopt if proposer p is ranked higher than lastprop<br>otherwise p has crashed and should be ignored</p><p>Implements: Hierarchical Consensus(c)<br>Uses:<br>beb + P<br>第几轮就是第几个process decide和broadcast</p><p>Validity: Always decide own proposal or adpoted value<br>Integrity: Rounds increase monotonically, A node only decide once in the round it is leader<br>Termincation: Every correct node makes it to the round it is leader, if some leader fails, completeness of P ensures progress. If leader correct, validity of BEB ensures delivery<br>Agreement: No two correct nodes decide differently</p><p>How many failures can it tolerate? N-1</p><p>Uniform Consensus properties (4)<br>Uniform Agreement (care about crashed nodes)</p><p>Possible with weaker FD than P?<br>Yes! use Strong Detector (S)<br>Strong completeness<br>Weak Accuracy: the “accurate” corect leader will BEB value and final decision is v by all</p><p>Eventually perfect detector, cannot solve<br>consensus with resilience t ≥ n/2 </p><h2 id="Paxos"><a href="#Paxos" class="headerlink" title="Paxos"></a>Paxos</h2><p>Single Value Uniform Consensus</p><ul><li>Validity (only proposed -&gt; decided)</li><li>Uniform Agreement (No diff decide)</li><li>Integrity (at most once)</li><li>Termination (eventually decide a value)</li></ul><p>not solvable in Fail-Silent (aynchronous sytem model)</p><p>所以assume<br>Partially synchronous system + fail-noisy model + Message duplication, loss, re-ordering</p><p>use omega(evetual leader election to elect a single proposer)</p><ul><li>Proposer imposes its proposal to everyone</li><li>Everyone decides<br>问题是<br>serveral processes might initially be proposers<br>多个process都能propose<br>使用abortable consensus 解决<br>omega ensures evetually 1 proposer succeeds (liveness)</li></ul><p>PAXOS<br>proposers (impose proposal to set of acceptors)<br>acceptors (may accept values issued by proposers)<br>learner (will decide depending on acceptors acceptances)</p><p>centralized因为面临单点故障，不行</p><p>there will be a single proposer at least providing obstruction-free progress<br>不能无脑选第一个<br>distinguish proposals with unique seq number (ballot number)<br>不能restart（这样就chose了两个值）</p><hr><p>P1 An acceptor accepts first proposal it receives (ensures obstruction-free progress and validity)<br>P2 If v is chosen, every higher proposal chosen has value v (ensures agreement, integrity trivial to implement)<br>P2a( lemma方便实现) every higher proposal accepted has value v<br>P2b (加强) every higher proposal issued has value v<br>P2c If any proposal (n,v) is issued, there is a majority set S of acceptors such that either<br>(a) no one in S has accepted any proposal numbered less than n<br>(b) v is the value of the highest proposal among all proposals less than n accepted by acceptors in S</p><p>A proposer at round n needs a query phase to get the value of highest round number + a promise that the state of S does not change until round n</p><p>总体流程</p><ol><li>proposer pick unique seq n, send prepare(n) to acceptors</li><li>acceptors 承认不会接收n以下的proposals（freeze）, 发送最高n的accepted proposal</li><li>proposer收到majority的promise, 取最高n的proposed value (如果没有就任取一个v（说明第一次）)进行accept(n, v)</li><li>acceptor接收了(n, v)，如果无接收prepare m&gt;n, 则accept proposal (ack); 否则reject(nack)</li><li>Proposer 接收到majority的response，decide否则abort</li></ol><p>可能abort的点</p><ul><li>Contention (multiple proposals competing)</li><li>Message loss (not getting an ack)</li><li>process failue (proposer dies)</li></ul><p>Optimizations</p><ul><li>Paxos (AC) in a nutshell</li></ul><p>Necessary:<br>rej accept(n,v) if answered prepare(m): m&gt;n</p><p>Optimizations:</p><ol><li>rej prepare(n) if answered prepare(m): m&gt;n</li><li>rej accept(n,v) if answered accept(m,u): m&gt;n</li><li>reject prepare(n) if answered accept(m, u): m&gt;n</li><li>ignore old msgs to proposals that got majority</li></ol><p>Proposer skips the accept phase if a majority of acceptors return the same value v<br>performance++</p><p>只要有stable storage可以应用到fail recover model</p><h2 id="RSM-Replicated-State-Machine"><a href="#RSM-Replicated-State-Machine" class="headerlink" title="RSM (Replicated State Machine)"></a>RSM (Replicated State Machine)</h2><p>multi-paxos:</p><p>ProCmds = {}<br>Log = &lt;&gt;<br>s0(initial state)<br>proposed = false</p><p>A client q wants to execute a command C, it reliably rb-broadcast &lt;C, Pid_q&gt; to all servers<br>upon delivery &lt;C,Pid_q&gt; at pj, the command pair is added to ProCmds unless it is already in Log</p><p>Validity<br>● If process p decides v then v is a sequence of proposed commands<br>(without duplicates)<br>Uniform Agreement<br>● If process p decides u and process q decides v then one is a prefix of<br>the other<br>Integrity<br>● If process p decides u and later decides v then u is a strict prefix of v<br>Termination (liveness)<br>● If command C is proposed by a correct process then eventually every<br>correct process decides a sequence containing C</p><p>Agree on (non-duplicate) commands<br>allow to issue the same command C multiple times</p><p>Initial state<br>Propoer:<br>np:=0 proposer’s current round number<br>vp:=&lt;&gt; proposer’s current value (empty sequence)</p><p>Acceptor:<br>npromise:=0 promise not to accept in lower rounds<br>na:=0 round number in which a value is accepted<br>va:=&lt;&gt; accepted value(empty sequence)</p><p>Learner<br>vd:=&lt;&gt; decided value(empty sequence)</p><p>看ppt图</p><p>依然有一些问题<br>● A proposer can run only one proposal until decide before taking the<br>next proposal. No pipelining of proposals<br>● Multiple proposers may lead to live-locks (liveness violation)<br>● Two round-trips for each sequence chosen </p><p>use BLE to make a single proposer running for a longer period of time as a leader</p><p>BLE1: Eventually every correct process trusts some correct correct process if a majority are correct<br>BLE2: Eventually no two correct processes trust different correct processes</p><p>We assume initially fail-noisy<br>but net is weaker model that may drop msg and process crash and recover</p><p>Majority requirement</p><ul><li>Each correct process will trust a leader only if the leader’s max ballot is among the collected ballots from a majority of processes</li><li>Monotonically increasing ballots<br>Every process p that do not receive the leader’s ballot (n, pidL) among collected ballots consider the leader has crashes p increases his own ballot (n+1, pidp)</li></ul><p>Eventual agreement&lt;=&gt; BLE2<br>Completeness&lt;=&gt; BLE1</p><h2 id="Leader-Based-Sequence-Paxos"><a href="#Leader-Based-Sequence-Paxos" class="headerlink" title="Leader Based Sequence Paxos"></a>Leader Based Sequence Paxos</h2><p>Assume eventual leader election abstraction with a ballot number BLE<br>BLE satisfies completeness and eventually accuracy and also monotonically unique ballots</p><p>P4 inefficient</p><ul><li>有多个proposer时，conflicts和restarts are likely (higher load -&gt; more conflicts)</li><li>2 round of msgs for each value chosen (Prepare, Accept)</li></ul><p>Solution:</p><ul><li>pick a leader (L,n) where n is a unique higher round number</li><li>the leader acts as sole Proposer for round n</li><li>After first Prepare (if not aborted) only perform Accepts until aborted by another Leader where n’ &gt; n</li></ul><p>Allow issuing and accepting multiple proposals in round n</p><p>Initial State for Sequence Paxos</p><ul><li><p>Proposers<br>nL=0, vL=      leader’s current round number, proposed value<br>propCmds=&lt;&gt;     leader’s current set of proposed commands(empty set)<br>las=[0]^N     length of longest accepted sequence per acceptor<br>lc=0        length of longest chosen sequence<br>state={(leader, prepare), (leader, accept), follower}</p></li><li><p>Acceptor<br>nprom=0     Pomise not to accept in lower rounds<br>na=0         round number in which a value is accpeted<br>va=&lt;&gt;        Accepted value(empty sequence)</p></li><li><p>Learner    Decide value(empty sequence)</p></li></ul><p>Removing redundancy of vL, va and vd</p><p>removing vL:<br>When p becomes a leader, it is possible to remove the need to<br>store the sequences vL and va separately at the leader </p><p>removing vd: at decide phase</p><p>add a new assumption<br>A3: FIFO Perfect Links</p><p>partially sync for BLE</p><p>but async for LBSP</p><h2 id="Reconfiguration"><a href="#Reconfiguration" class="headerlink" title="Reconfiguration"></a>Reconfiguration</h2><p>A replicated state machine is running on a set of N processes</p><p>Impossible to know if a process is faulty or slow in asychronous system</p><ul><li>must be able to replace any process</li></ul><p>this is called reconfiguration</p><p>Each configuration is conceptually an instance of Sequence-Paxos<br>replicas in configuration c1 = {r11,r12,r13,r14}<br>A process may act as multiple replicas in different configurations<br>e.g. p1 is {r01, r11, r21}</p><p>if seq v is issued in round n then v is an extension of all sequences chosen in rounds &lt;= n</p><p>stop-sign - last command - final sequence</p><p>rij: replica j in config i</p><p>Overlapping configurations</p><p> A process have replicas in multiple configurations<br>But can only be running in one configuration at any<br>time</p><h2 id="Time-and-Clocks-in-DS"><a href="#Time-and-Clocks-in-DS" class="headerlink" title="Time and Clocks in DS"></a>Time and Clocks in DS</h2><p>Motivation for using physical clocks<br>Consider a slightly stronger system model:</p><ul><li>Computation: no bounds on time to take a step</li><li>Communication: no bounds on latency</li><li>Clocks: Lower and upper bounds on clock rate</li></ul><ol><li>Time-based leader leases</li></ol><p>network partition P17<br>one is elected as leader but the original leader never hears about that</p><p>A propose p to become leader: sends a request (prepare) to acceptors</p><ul><li>An acceptor gives a time-based leader lease to p, lasting for 10 seconds</li><li>If a proposer gets leases from a majority of acceptors, then proposer holds lease on group and becomes a leader</li><li>In the time until the first acceptor lease expires, the proposer knows that no other proposer can hold the lease on the group<br>此时leader可以从local state里读然后直接返回</li></ul><p>两个问题<br>asynchronous network<br>clock drift</p><p>P34<br>如果proposer（receive lease的人）时钟比较快，那么leader会先取消自己的时钟，所以不会影响safety</p><p>反之，如果acceptor（give lease的人）时钟比较快，就会影响safety</p><ol start="2"><li>Shared memory using clocks</li></ol><p>Review of shared memory:<br>Leases at proposer<br>The Read-Impose Write-Consult_Majority algorithm does 2 round-trips to a majority of processes for both reads and writes<br>…</p><p>need synchronized clocks</p><p>Interval Clocks<br>Ci(t) = (lo, hi)</p><p>the correct time t is guaranteed to be in interval<br>Ci(t).lo &lt;= t &lt;= Ci(t).hi</p><p>Ci read at t1, Cj read at t2, and t1 &lt; t2<br>Ci(t1).lo &lt; Cj(t2).hi</p><p>use ICs to remove <strong>query phase in write operations</strong></p><ol><li>p1 must wait until ts(o1).t &lt;= C1(t1).lo   </li><li>ts(o2).t = C2(t2).hi   (invoke write o2)</li></ol><p>因为t1 &lt; t2 所以 C1(t1).lo &lt; C2(t2).hi<br>Hence: ts(o1) &lt; ts(o2)</p><h2 id="Consistent-Snapshot"><a href="#Consistent-Snapshot" class="headerlink" title="Consistent Snapshot"></a>Consistent Snapshot</h2><p>failure recovery and reconfiguration</p><p>SNAP -&gt; Restart system from snapshot<br>    -&gt; restart system with new configuration</p><p>S1: Termination: Eventuallt every process records its state<br>S2: Validity: All recorded states correspond to a consistent cut of the execution</p><p>Chandy Lamport Algorithm</p><ul><li>FIFO Reliable Channels</li><li>Single Initiating Process pi</li><li>Strong Connectivity 强连通</li></ul><p>Design goal:<br>Obstruction-free: run concurrently but not alter underlying computation</p><p>Intuition:<br>Disseminate a special message to mark events before and after the consistent cut</p><p>Termination is still satisfied if the protocol is initiated by a set of processes that can reach all tasks.</p><p>Epoch Snapshotting:<br>make production-grade data processing systems reliable</p><p>Previous approaches</p><ul><li>Complex Workarounds (e.g., duplicate elimination, input logging, acks) </li><li>Strong Assumptions (idempotent operations, key vs task level causal order) </li><li>External State Management (transactional external commits per action</li></ul><p>Epoch-based stream execution the intuition<br>for each epoch<br>input: deterministic input streams &amp; task states<br>stream processing system<br>success: commit system configuration<br>failure: abort and start from previous epoch</p><p>consistent cut is not enough<br>epoch cut support the large stream processing system</p>]]></content>
      
      
      
        <tags>
            
            <tag> Distributed System </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>dirty read, phantom read, and unrepeatable read</title>
      <link href="/blog/2021/02/22/dirty-read-phantom-read-and-unrepeatable-read/"/>
      <url>/blog/2021/02/22/dirty-read-phantom-read-and-unrepeatable-read/</url>
      
        <content type="html"><![CDATA[<h1 id="dirty-read-phantom-read-and-unrepeatable-read"><a href="#dirty-read-phantom-read-and-unrepeatable-read" class="headerlink" title="dirty read, phantom read, and unrepeatable read"></a>dirty read, phantom read, and unrepeatable read</h1><a id="more"></a><p>脏读dirty read：读取未提交的数据。B发起事务，B写后，A读（读取未提交的数据），但B之后回滚了，再提交，A再读，不一致。</p><p>不可重复读unrepeatable read：前后多次读取不一致。A读，B写，B提交，A再读，不一致。<strong>针对update操作</strong>。</p><p>幻读phantom read：前后多次读取，数据总量不一致。A读数据库行数，B插入或删除某一行，A再读行数，不一致。 <strong>针对insert和delete操作</strong></p><p><strong>解决方案</strong>：</p><p>根据数据库事务四大性质中的隔离性：隔离性级别被分为read_uncommit，read_commit，read_repeatable，Serializable用以解决以上的问题。它们的区别是：read_uncommit没有解决任何问题，read_commit解决了脏读，read_repeatable解决了脏读和不可重复读，Serializable解决了三种情况。</p><p>read_commit：在上文的情况下，B写的整个事务周期，A都不能读。只有B发起事务前和提交事务后A才能读，这样就不会出现B写时A读从而读取不一致的情况。（Sql Server , Oracle使用的就是read_commit级别）</p><p>read_repeatable: 保证了不出现脏读，并且保证不可重复读。A读时，就对行加锁，B不能写这条数据。直到A多次读完后，B才能写。（MySQL使用的就是read_repeatable级别）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* （参数可以为：Read uncommitted，Read committed， Repeatable，Serializable） */</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">session</span> <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> Repeatable;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`id`</span> <span class="keyword">FROM</span> <span class="string">`users`</span> <span class="keyword">WHERE</span> <span class="string">`id`</span> = <span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure></p><p>serializable：保证了不出现脏读、不可重复读和幻读。A读时，对表加锁，B不能添加或删除其它数据行。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">session</span> <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> <span class="keyword">Serializable</span>;</span><br></pre></td></tr></table></figure></p><p>参考</p><p><a href="">https://cloud.tencent.com/developer/article/1450773</a></p><p><a href="">https://segmentfault.com/a/1190000016566788</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Distributed System </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Disributed Framework and Dubbo</title>
      <link href="/blog/2021/01/28/Disributed-Framework-and-Dubbo/"/>
      <url>/blog/2021/01/28/Disributed-Framework-and-Dubbo/</url>
      
        <content type="html"><![CDATA[<h1 id="Distributed-Framework-and-Dubbo"><a href="#Distributed-Framework-and-Dubbo" class="headerlink" title="Distributed Framework and Dubbo"></a>Distributed Framework and Dubbo</h1><a id="more"></a><h2 id="What-is-Distributed-System"><a href="#What-is-Distributed-System" class="headerlink" title="What is Distributed System?"></a>What is Distributed System?</h2><p>a collection of independent comptuters which serve like a coherent system to users.</p><h2 id="Framework-transition-and-why-we-need-Distributed-Framework"><a href="#Framework-transition-and-why-we-need-Distributed-Framework" class="headerlink" title="Framework transition and why we need Distributed Framework?"></a>Framework transition and why we need Distributed Framework?</h2><h3 id="All-in-One-Architecture"><a href="#All-in-One-Architecture" class="headerlink" title="All in One Architecture"></a>All in One Architecture</h3><p>Initially, we have one simple application, on which all the functionalities are integrated, when we have only a few users. At that time, ORM is necessary because it simplify the CRUD processes.</p><p>When there are more and more users, we surely need more servers to bear more pressure (One application Multiple servers). Therefore we need more servers ro bear the pressure together (use Ngnix to balance overload). However that will cause two problems:</p><ul><li><p>Difficult to extend<br>When we modify one func of one server, we need to package the whole application again to other servers.</p></li><li><p>Difficult to collaborate</p></li></ul><h3 id="Vertical-Architecture"><a href="#Vertical-Architecture" class="headerlink" title="Vertical Architecture"></a>Vertical Architecture</h3><p>different modules of applications (e.g. User/Shopping Cart/Payment), assign different number of servers to modules based on demands. We will meet the problems and we should also:  </p><ul><li><p>View/ Logics should be divided </p></li><li><p>Applications cannot be fully seperated, some should interact</p></li></ul><h3 id="RPC-Architecture"><a href="#RPC-Architecture" class="headerlink" title="RPC Architecture"></a>RPC Architecture</h3><p>But there yield another problem, how to interact between Web view and Services logics as they are divided?</p><p>Answer: Use RPC (Remote Process Call).</p><p>Therefore, we need a distributed service framework to handle the RPC. And we also need a <strong>scheduler</strong> to balance the load.</p><h2 id="RPC-problems"><a href="#RPC-problems" class="headerlink" title="RPC problems"></a>RPC problems</h2><p>RPC is a method that used by one service on one server A to call the procedure on another server B.</p><p>Both server A and B should have its own stub (helper) to handle the sending messages(functions/parameters)and returning messages(results). The RPC is an aynchronous process. To send or receive the messages the stub should firstly serialize or deserialize the objects.</p><p>The core problems in an RPC framework:</p><ul><li>how efficient to establish connection</li><li>how efficient to serialize/deserialize</li></ul><h2 id="RPC-framework-Dubbo"><a href="#RPC-framework-Dubbo" class="headerlink" title="RPC framework - Dubbo"></a>RPC framework - Dubbo</h2><p><a href="https://dubbo.apache.org/en/" target="_blank" rel="noopener">https://dubbo.apache.org/en/</a></p><p><img src="https://raw.githubusercontent.com/apache/dubbo-website/master/static/imgs/architecture.png" alt="arch"></p><p>Dubbo is a framework with following features:</p><ul><li>Interface-based High-performance RPC</li><li>Intelligent load balance</li><li>Automatic service registration and discovery (“recommend”)</li><li>High extensibility (micro-kernal and plugin design)</li><li>Runtime traffic routing (blue-green deployment, some requests use new services, some use old services)</li><li>Visualization</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Distributed System </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Byzantine Leader Election</title>
      <link href="/blog/2021/01/24/Byzantine-Leader-Election/"/>
      <url>/blog/2021/01/24/Byzantine-Leader-Election/</url>
      
        <content type="html"><![CDATA[<h1 id="Why-in-Byzantine-Leader-Election-N-gt-3f"><a href="#Why-in-Byzantine-Leader-Election-N-gt-3f" class="headerlink" title="Why in Byzantine Leader Election, N &gt; 3f"></a>Why in Byzantine Leader Election, N &gt; 3f</h1><a id="more"></a><p>Given<br>N: number of the processes<br>f: number of the Byzantine processes</p><p>In the paper “Practical Byzantine Fault Tolerance”, we get the conclusion that 3f+1 is the minimum number of replicas that allow an asynchronous system to provide the safety and liveness properties when up to f replicas are faulty. This many replicas are needed because it must be possible to proceed after communicating with n-f replicas, since f replicas might be faulty and not responding. However, it is possible that the f replicas that did not respond are not faulty and therefore f of those that responded might be faulty. Even so, there must still be enough responses that those from non-faulty replicas outnumber those from faulty ones, i.e., n-2f&gt;f. Therefore n&gt;3f.</p><p>理解起来其实很困难，总给人一种哪里不对的感觉。比如为什么不能直接大多数N &gt; 2f 就能解决呢？只要有f+1个正确节点都表态(+)，即使有f个拜占庭节点都投反对票(-)，那正确节点也占多数，最后不也达成了正确的一致性吗？</p><p>但是这忽略了系统的一个根本问题：什么时候才能达成一致性呢？拜占庭节点之所以叫拜占庭节点，就是说它所做的是不可控的（表态可以是表态+或-或者干脆不表态）。也就是说，如果我规定某个节点A（可能是正常也可能是拜占庭节点）要知道大多数的意见，A需要收集N个消息（包括自己），但是拜占庭可能不回复，因此就永远收集不了N-f个消息，无限等待。我们当然不希望无限等待一个永远不回复的拜占庭节点，因此我们的quorum就必须规定为最大N-f。当我们收集到最多N-f个消息后，我们就必须能够通过多数派判断选票结果。</p><p>因此，考虑到拜占庭节点的不确定性，除了本身N-f即形成quorum，我们还要考虑回复消息的至多f个拜占庭节点，除去这些节点，也即N-2f这些节点必是正确节点，这些节点的个数要大于f个拜占庭节点从而形成正确的consensus，也即N-2f&gt;f，也即N&gt;3f。</p><p>例子：</p><p>前提：由于f个拜占庭节点可能都挂，f个拜占庭节点可能不回复，所以必须收集到最多N-f个消息就已经决定结果了，也就是最大的quorum大小Q（极限情况）</p><p>f=1时，<br>N=3，不行，因为收到2个消息时，可能一正一误，无法判断。<br>N=4，可以，因为收到3个消息，必有两正一误，或三正，都可以得出正确结果。<br>N&gt;4，可以，收到N-1个消息，必有N-1 &gt; 2 * 1，quorum中正确节点数总是大于拜占庭节点数</p><p>f=2时，<br>N=5，不行，因为收到3个消息时，可能一正两误。<br>N=6，不行，因为收到4个消息时，可能两正两误，无法判断。<br>N=7，可以，因为收到5个消息，必有三正，大于两误，可以得出正确结果。<br>N&gt;7，可以，收到N-2个消息，必有N-2 &gt; 2 * 2，quorum中正确节点数总是大于拜占庭节点数</p><p>…</p><p>由以上每种情况最后一行类推，N-f &gt; 2 * f，可知<br>N &gt; 3f</p><blockquote><p>补充：没有拜占庭情况，即crash-stop, crash noisy, crash-recovery, crash silent情况<br>N=2f+1, Q=(N+1)/2<br>有拜占庭情况，<br>N=3f+1，Q=N-f也等于2f+1<br><!-- N>3f+1，Q>=(N+f+1)/2 --></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Distributed System </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SVM公式推导和原理解析</title>
      <link href="/blog/2020/12/16/SVM%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC%E5%92%8C%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
      <url>/blog/2020/12/16/SVM%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC%E5%92%8C%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="SVM公式推导和原理解析"><a href="#SVM公式推导和原理解析" class="headerlink" title="SVM公式推导和原理解析"></a>SVM公式推导和原理解析</h1><a id="more"></a><p><img src="https://raw.githubusercontent.com/Spycsh/blog/master/2020/12/16/SVM%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC%E5%92%8C%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/1.jpg"></p><p><img src="https://raw.githubusercontent.com/Spycsh/blog/master/2020/12/16/SVM%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC%E5%92%8C%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/2.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>多分类AUC计算</title>
      <link href="/blog/2020/11/07/%E5%A4%9A%E5%88%86%E7%B1%BBAUC%E8%AE%A1%E7%AE%97/"/>
      <url>/blog/2020/11/07/%E5%A4%9A%E5%88%86%E7%B1%BBAUC%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>一般涉及到的是binary classification的AUC计算,这里给出的计算方法即可用于binary也可用于多分类问题。</p><a id="more"></a><p>input: 给定的dataframe, 实际预测的correctlabels<br>output: AUC 面积</p><p>举个例子，给定的dataframe是</p><table><thead><tr><th>d</th><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>0</td><td>0.50</td><td>0.50</td><td>0.00</td></tr><tr><td>1</td><td>0.50</td><td>0.25</td><td>0.25</td></tr><tr><td>2</td><td>0.50</td><td>0.25</td><td>0.25</td></tr><tr><td>3</td><td>0.25</td><td>0.50</td><td>0.25</td></tr><tr><td>4</td><td>0.25</td><td>0.25</td><td>0.50</td></tr></tbody></table><p>A,B,C代表三个类，其中的数字代表着预测该类的概率  </p><p>而corrrectlabels也即实际预测的结果是[“B”,”A”,”B”,”B”,”C”]<br>这两者作为input可以计算output的AUC面积</p><p>以下是求面积的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_pos_neg_instance_scores</span><span class="params">(prediction_column, correct_labels, column_name)</span>:</span></span><br><span class="line">    prediction_column_array = np.array(prediction_column)</span><br><span class="line">    binary_AUC = [column_name == i <span class="keyword">for</span> i <span class="keyword">in</span> correct_labels] </span><br><span class="line">    print(<span class="string">'binary_AUC='</span>, binary_AUC)</span><br><span class="line">    <span class="comment"># positive_instance_scores =&gt; Col-Name (predicted class) matches with the correct class</span></span><br><span class="line">    positive_instance_scores = prediction_column_array[binary_AUC]</span><br><span class="line">    <span class="comment"># negative_instance_scores =&gt; Col-Name (predicted class) DOES NOT match with the correct class</span></span><br><span class="line">    negative_instance_scores = prediction_column_array[~np.array(binary_AUC)]</span><br><span class="line">    print(positive_instance_scores)</span><br><span class="line">    print(negative_instance_scores)</span><br><span class="line">    <span class="keyword">return</span> positive_instance_scores, negative_instance_scores</span><br><span class="line"></span><br><span class="line"><span class="comment"># fpr=False_Positive_Rate</span></span><br><span class="line"><span class="comment"># tpr=True_Positive_Rate</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tpr_fpr</span><span class="params">(prediction_column, correct_labels, column_name)</span>:</span></span><br><span class="line">    positive_instance_scores, negative_instance_scores = find_pos_neg_instance_scores(prediction_column, correct_labels, column_name)</span><br><span class="line"><span class="comment">#     print(positive_instance_scores)</span></span><br><span class="line"><span class="comment">#     print(negative_instance_scores)</span></span><br><span class="line">    scores_extended = [<span class="number">0</span>]</span><br><span class="line">    scores_extended += sorted(prediction_column)</span><br><span class="line">    scores_extended += [<span class="number">1</span>]</span><br><span class="line">    print(<span class="string">'scores_extended='</span>,scores_extended)</span><br><span class="line">    dict_tpr_fpr = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> predicted_score <span class="keyword">in</span> scores_extended:</span><br><span class="line">        <span class="keyword">if</span>(len(negative_instance_scores)==<span class="number">0</span>):</span><br><span class="line">            count_false_pos_instances = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count_false_pos_instances = np.sum(negative_instance_scores &gt;= predicted_score)/len(negative_instance_scores)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(len(positive_instance_scores)==<span class="number">0</span>):</span><br><span class="line">            count_true_pos_instances = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count_true_pos_instances = np.sum(positive_instance_scores &gt;= predicted_score)/len(positive_instance_scores)</span><br><span class="line">            </span><br><span class="line">        <span class="comment">#dict_tpr_fpr[predicted_score] = [count_false_pos_instances, count_true_pos_instances]</span></span><br><span class="line">        dict_tpr_fpr[predicted_score] = [count_true_pos_instances, count_false_pos_instances]</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">'dict_tpr_fpr='</span>,dict_tpr_fpr)</span><br><span class="line">    list_reversed_tpr_fpr = [i <span class="keyword">for</span> i <span class="keyword">in</span> reversed(list(dict_tpr_fpr.values()))]</span><br><span class="line">    print(<span class="string">'list_reversed_tpr_fpr='</span>, list_reversed_tpr_fpr)</span><br><span class="line">    <span class="keyword">return</span> list_reversed_tpr_fpr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_AUC</span><span class="params">(list_reversed_tpr_fpr)</span>:</span></span><br><span class="line">    <span class="comment"># AUC = Area under ROC curve</span></span><br><span class="line">    AUC = <span class="number">0</span></span><br><span class="line">    n_tpr_fpr = len(list_reversed_tpr_fpr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n_tpr_fpr - <span class="number">1</span>):        </span><br><span class="line">        <span class="keyword">if</span>(list_reversed_tpr_fpr[i][<span class="number">1</span>] != list_reversed_tpr_fpr[i + <span class="number">1</span>][<span class="number">1</span>]):</span><br><span class="line">            <span class="comment"># if fpr is changing but tpr is not changing then the area is a square=a*b=(tpr[i+1]-0)*(fpr[i+1]-fpr[i])</span></span><br><span class="line">            <span class="keyword">if</span>(list_reversed_tpr_fpr[i][<span class="number">0</span>] == list_reversed_tpr_fpr[i + <span class="number">1</span>][<span class="number">0</span>]):</span><br><span class="line">                AUC += list_reversed_tpr_fpr[i + <span class="number">1</span>][<span class="number">0</span>]*(list_reversed_tpr_fpr[i + <span class="number">1</span>][<span class="number">1</span>] - list_reversed_tpr_fpr[i][<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># if both are changing then the area is a trapezoid=(a+b)*h/2=(tpr[i]+tpr[i+1])*(fpr[i+1]-fpr[i])/2</span></span><br><span class="line">                AUC += (list_reversed_tpr_fpr[i + <span class="number">1</span>][<span class="number">0</span>] + list_reversed_tpr_fpr[i][<span class="number">0</span>])*(list_reversed_tpr_fpr[i + <span class="number">1</span>][<span class="number">1</span>] - list_reversed_tpr_fpr[i][<span class="number">1</span>])/<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> AUC</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auc</span><span class="params">(df, correctlabels)</span>:</span></span><br><span class="line">    AUC = <span class="number">0</span></span><br><span class="line">    class_frequency = dict()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> correctlabels:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> class_frequency:</span><br><span class="line">            class_frequency[i] = (<span class="number">1</span>/len(correctlabels))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            class_frequency[i] += (<span class="number">1</span>/len(correctlabels))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> df.columns:</span><br><span class="line">        prediction_vector = df[col]</span><br><span class="line">        list_reversed_tpr_fpr = get_tpr_fpr(prediction_vector, correctlabels, col)</span><br><span class="line">        area_col = calculate_AUC(list_reversed_tpr_fpr)</span><br><span class="line">        AUC += class_frequency[col] * area_col</span><br><span class="line">    <span class="keyword">return</span> AUC</span><br></pre></td></tr></table></figure><p>测试代码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">predictions = pd.DataFrame(&#123;<span class="string">"A"</span>:[<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>],<span class="string">"B"</span>:[<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>,<span class="number">0.25</span>],<span class="string">"C"</span>:[<span class="number">0.0</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>]&#125;)</span><br><span class="line"></span><br><span class="line">correctlabels = [<span class="string">"B"</span>,<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">"AUC: &#123;&#125;"</span>.format(auc(predictions,correctlabels)))</span><br></pre></td></tr></table></figure></p><p>步骤说明：<br>第一步即调用auc方法计算class_frequency，即利用frequency作为<strong>权重</strong>将所有类的AUC相加。(Calculate the weighted AUC by summing the individual AUCs weighted by the relative<br>frequency of each class (as estimated from the correct labels)  </p><p>接下来就是计算每个类的AUC了,实际上是每个类的binary AUC, 也即对于这个类的FPR和TPR点所围面积的和 <a href="https://zh.wikipedia.org/wiki/ROC%E6%9B%B2%E7%BA%BF" target="_blank" rel="noopener">概念链接</a>。 </p><p>因此，首先我们必须计算TPR和FPR点的坐标，也就是<code>get_tpr_fpr</code>函数，先找到其中判断对positive与错negative的scores（<code>find_pos_neg_instance_scores</code>函数），再对prediction_column（这里需要在首尾加一个0和一个1，好帮助后面的面积计算）中的每个prediction_score，判断它和判断negative 或positive instance的score的关系。得到count_false_pos_instances和count_true_pos_instances的两句实际上就是FPR（在所有实际为阴性的样本中，被错误地判断为阳性之比率FPR=FP/(FP+TN)）和TPR（在所有实际为阴性的样本中，被错误地判断为阳性之比率TPR=TP/(TP+FN)）的计算过程。 </p><p>这一步之后再进行个从小到大的排序，其实就得到了所有的score对应的TPR和FPR pair 也即点坐标，只要画出点坐标连接后下方在坐标轴上的面积（以TPR为纵轴，FPR为横轴），就可以得到AUC的面积了。而这一步则用<code>calculate_AUC</code>函数自动计算得到。</p><p>得到了每一个类的AUC，再做一个weight sum就是最后的多分类AUC面积。</p><p>更简单的多分类方法（概率方法）：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auc</span><span class="params">(df,correctlabels)</span>:</span></span><br><span class="line">    new_df=df.copy()</span><br><span class="line">    lens=len(correctlabels)</span><br><span class="line">    cols=new_df.columns.tolist()</span><br><span class="line">    <span class="keyword">if</span> len(cols)&lt;<span class="number">3</span>: <span class="comment">#binary ;only Pos and Neg</span></span><br><span class="line">        pos=[ i <span class="keyword">for</span> i <span class="keyword">in</span> range(lens)  <span class="keyword">if</span> correctlabels[i]==cols[<span class="number">0</span>]]</span><br><span class="line">        neg=[i <span class="keyword">for</span> i <span class="keyword">in</span> range(lens)  <span class="keyword">if</span> correctlabels[i]!=cols[<span class="number">0</span>]]                    </span><br><span class="line">        print(pos,neg)</span><br><span class="line">        one=new_df[cols[<span class="number">0</span>]]</span><br><span class="line">        auc = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> pos:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> neg:</span><br><span class="line">                <span class="keyword">if</span> one[i] &gt; one[j]:</span><br><span class="line">                    auc += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> one[i] == one[j]:</span><br><span class="line">                    auc += <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> auc / (len(pos)*len(neg))</span><br><span class="line">    <span class="keyword">else</span>:      <span class="comment"># CLASS &gt;=3   Pos / non-Pos</span></span><br><span class="line">        aucs=[]</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> cols:</span><br><span class="line">            pos=[ i <span class="keyword">for</span> i <span class="keyword">in</span> range(lens)  <span class="keyword">if</span> correctlabels[i]==col]</span><br><span class="line">            nonpos=[i <span class="keyword">for</span> i <span class="keyword">in</span> range(lens)  <span class="keyword">if</span> correctlabels[i]!=col]                      </span><br><span class="line">            print(pos,nonpos)</span><br><span class="line">            one=new_df[col]</span><br><span class="line">            auc = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> pos:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> nonpos:</span><br><span class="line">                    <span class="keyword">if</span> one[i] &gt; one[j]:</span><br><span class="line">                        auc += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">elif</span> one[i] == one[j]:</span><br><span class="line">                        auc += <span class="number">0.5</span></span><br><span class="line">            auc=auc/(len(pos)*len(nonpos))</span><br><span class="line">            aucs.append(auc)</span><br><span class="line">        weights=[correctlabels.count(col)/len(correctlabels) <span class="keyword">for</span> col <span class="keyword">in</span> cols ]</span><br><span class="line">        print(weights)</span><br><span class="line">        print(aucs)</span><br><span class="line"></span><br><span class="line">        weights=np.array(weights)</span><br><span class="line">        aucs=np.array(aucs)</span><br><span class="line">        avg_auc=np.sum(aucs*weights)</span><br><span class="line">        <span class="keyword">return</span> avg_auc</span><br><span class="line"></span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">predictions = pd.DataFrame(&#123;<span class="string">"A"</span>:[<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>],<span class="string">"B"</span>:[<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>,<span class="number">0.25</span>],<span class="string">"C"</span>:[<span class="number">0.0</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>]&#125;)</span><br><span class="line"></span><br><span class="line">correctlabels = [<span class="string">"B"</span>,<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">"AUC: &#123;&#125;"</span>.format(auc(predictions,correctlabels)))</span><br></pre></td></tr></table></figure></p><p>简单的二分类AUC计算<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_auc</span><span class="params">(prob, labels)</span>:</span></span><br><span class="line">    f = list(zip(prob, labels))</span><br><span class="line">    rank = [values2 <span class="keyword">for</span> values1, values2 <span class="keyword">in</span> sorted(f, key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])]</span><br><span class="line">    rankList = [i + <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(rank)) <span class="keyword">if</span> rank[i] == <span class="number">1</span>]</span><br><span class="line">    posNum = <span class="number">0</span></span><br><span class="line">    negNum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(labels)):</span><br><span class="line">        <span class="keyword">if</span> (labels[i] == <span class="number">1</span>):</span><br><span class="line">            posNum += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            negNum += <span class="number">1</span></span><br><span class="line">    auc = (sum(rankList) - (posNum * (posNum + <span class="number">1</span>)) / <span class="number">2</span>) / (posNum * negNum)</span><br><span class="line">    <span class="keyword">return</span> auc</span><br><span class="line"></span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">model = BernoulliNB()</span><br><span class="line">model.fit(x_train, y_train)</span><br><span class="line">prediction = model.predict_proba(x_val)</span><br><span class="line">auc = cal_auc(prediction[:, <span class="number">1</span>], np.array(y_val))</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>computer network</title>
      <link href="/blog/2020/08/03/computer-network/"/>
      <url>/blog/2020/08/03/computer-network/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络知识点"><a href="#计算机网络知识点" class="headerlink" title="计算机网络知识点"></a>计算机网络知识点</h1><a id="more"></a><p>用户态（应用层HTTP,FTP,DNS,HTTPS)<br>核心态(传输层tcp, 网络层ip, 链路层)</p><p>二、链路层</p><p>功能：将上层数据封装成帧，用MAC地址访问媒介，错误检测与修正</p><ul><li><p>以太网帧格式<br>7字节前导码（同步）<br>1字节帧开始符<br>6子节MAC目标地址<br>6子节MAC源地址<br>一个4子节标签（可选）<br>2字节以太类型（0x0800 IPv4; 0x0806 ARP)<br>负载46-1500字节<br>CRC冗余校验<br>帧间距12字节<br><img src="https://raw.githubusercontent.com/Spycsh/blog/master/2020/08/03/computer-network/EthernetFrame.jpg" alt="1"></p></li><li><p>MTU（Maximum transmission Unit) 数据链路层最大数据包大小，单位：字节。即无需进一步分片就能穿过这条“路径”的最大传输单元的最大值。如果不要分片，设置数据报的DF位（Don’t fragment），路径上任何需要将分组进行分片的设备都会将这种数据报丢弃并返回一个“数据报过大”的ICMP响应到源地址。</p></li></ul><ul><li><p>arp协议 address resolution protocol 实现ip地址到MAC地址的映射，即询问目标IP地址对应的MAC地址，然后放入ARP缓存表。<br>原理：把带有目标ip地址的arp请求广播到局域网上所有主机，并接受响应获取mac地址。存入arp缓存表一段时间。<br><img src="https://raw.githubusercontent.com/Spycsh/blog/master/2020/08/03/computer-network/arp报文格式.png" alt="2"><br>目的MAC地址：占6字节，表示接收方设备的硬件地址，在请求报文中该字段值全为0，即00-00-00-00-00-00，表示任意地址，因为现在不知道这个MAC地址。</p></li><li><p>基于功能来考虑，ARP是链路层协议；基于分层/包封装来考虑，ARP是网络层协议（2字节以太类型（0x0800 IPv4; 0x0806 ARP)）</p></li></ul><p>三、网络层<br>功能：1、路由选择（规划路线）<br>2、存储、交换、转发（路由器通过路由表转发包，如果接收速度大于转发速度就缓存）3、拥塞控制 4、呼叫准入（所有路由器的许可）</p><ul><li><p>ip首部格式：<br>如图第二行，16位序列号：如有分片，下一个序列号与上一个相同，若无分片，下一个序列号等于上一个加一。<br>3三个bit位：第一位保留，未使用。第二位是DF（Don’t Fragment），如果为1，表示未发生分片。第三位是MF（More Fragment），如果为1，表示发生了分片，并且除了分片出的最后一个报文中此标志为0，其余报文中此标志均为1。<br>13位片位移：分片相对于原始ip数据报开始处的偏移。</p></li><li><p>8位生存时间TTL（time to live), 防止数据报兜圈子，不断减去在路由器间传递的时间，直到零就丢弃数据报，不再转发。</p></li><li>16位首部检验和<br><img src="https://raw.githubusercontent.com/Spycsh/blog/master/2020/08/03/computer-network/ip报文格式.png" alt="3"></li></ul><blockquote><p>掌握IP分片<br>一个长4000B的IP数据报，数据部分3980B,到达了一个路由，需要转发到一个MTU为1500B的链路上，这样就得分片了。分片数目是3片。每个片都是一个数据报。假设标识是777，那么数据报分片结果是：<br>分片一：标识：777，MF=1，DF=0,片偏移=0，有效数据：1480B(编号0~1479)<br>分片二：标识：777，MF=1,DF=0,片偏移=185，185<em>8=1480，有效数据：1480B(编号1480~2959)<br>分片三：标识：777，MF=0,DF=0,片偏移370，370</em>8=2960，有效数据：1020B(编号2960~3979)</p></blockquote><ul><li>IP路由表<br><img src="https://raw.githubusercontent.com/Spycsh/blog/master/2020/08/03/computer-network/IP分组转发流程.jpg" alt="4"></li></ul><p>分组转发流程</p><ol><li>从数据报首部提取主机的IP地址D，得到目的网络地址N（子网掩码存储在路由表中，与IP地址D进行逻辑与即可得到N）</li><li>若N是与此路由器直接相连的某个网络地址，直接交付</li><li>若路由表中有目的地址为D的特定主机路由/到达网络N的路由，则把数据报传送给表中指明的下一跳路由</li><li>若路由表中有一个默认路由，则把数据报传送给路由表所指明的默认路由器</li><li>报告转发分组出错</li></ol><ul><li><p>IP内部网关协议RIP<br>RIP 按固定的时间间隔仅和相邻路由器交换自己的路由表，经过若干次交换之后，所有路由器最终会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器地址。<br><img src="https://raw.githubusercontent.com/Spycsh/blog/master/2020/08/03/computer-network/RIP路由表建立.jpg" alt="5"></p></li><li><p>ICMP查询2种+差错5种<br><img src="https://raw.githubusercontent.com/Spycsh/blog/master/2020/08/03/computer-network/ICMP报文类型.png" alt="6"></p></li></ul><p>四、传输层<br>UDP协议：特点，首部字段</p><p>TCP协议：特点+首部字段+可靠机制<br>首部（校验和。。。）</p><p>连接基础</p><ul><li><p>三次握手</p><!-- ![5](computer-network/TCP三次握手.png) --><p>目的：为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。主要防止资源的浪费。</p></li><li><p>四次挥手（为什么）</p><!-- ![6](computer-network/TCP四次挥手.png) --><p>关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，我们也未必全部数据都发送给对方了，所以我们不可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，我们的ACK和FIN一般都会分开发送。</p></li></ul><p>同时打开、同时关闭、半关闭</p><p>服务器第一次收到客户端的 SYN 之后，就会处于 SYN_RCVD 状态，此时双方还没有完全建立其连接，服务器会把此种状态下请求连接放在一个队列里，我们把这种队列称之为<code>半连接队列</code>。<br>当然还有一个<code>全连接队列</code>，就是已经完成三次握手，建立起连接的就会放在全连接队列中。如果队列满了就有可能会出现丢包现象。<a href="https://juejin.im/post/6844903958624878606" target="_blank" rel="noopener">来源链接</a></p><p><img src="https://raw.githubusercontent.com/Spycsh/blog/master/2020/08/03/computer-network/tcp-ip-handshark.png" alt="7"></p><p>tcp流量控制机制：<br>滑窗、<br><img src="https://raw.githubusercontent.com/Spycsh/blog/master/2020/08/03/computer-network/滑窗.jpg" alt="8"></p><ul><li>在未收到ACK确认之间都必须暂时保留在发送窗口内，以便超时重传使用</li></ul><p>慢启动、拥塞避免、快速重传、快速恢复<br>超时重传</p><p>伪包头</p><p>五、应用层<br>域名解析<br>DNS协议名字空间、DNS指针查询（反向查找或逆向解析）、DNS缓存</p><blockquote><p>DNS查询过程实例<br>1）客户端将<a href="http://www.redhat.com的查询提交给本地DNS服务器（递归查询）。" target="_blank" rel="noopener">www.redhat.com的查询提交给本地DNS服务器（递归查询）。</a><br>2）本地DNS服务器检查区域数据库，由于该服务器没有redhat.com的授权，它将查询传递到根服务器（“.”DNS服务器），请求解析主机名称。根名称服务器把“com”DNS服务器IP地址返回给本地DNS服务器（迭代查询）。<br>3）本地DNS服务器将请求发给“com”DNS服务器，该服务器根据请求将“redhat.com”DNS服务器IP地址返回给本地DNS服务器（迭代查询）。<br>4）本地DNS服务器向“redhat.com”DNS服务器发送请求，由于该服务器具有“<a href="http://www.redhat.com”记录，它将www.redhat.com的IP地址返回给本地DNS服务器。" target="_blank" rel="noopener">www.redhat.com”记录，它将www.redhat.com的IP地址返回给本地DNS服务器。</a><br>5）本地DNS服务器将<a href="http://www.redhat.com的IP地址发送给客户端。" target="_blank" rel="noopener">www.redhat.com的IP地址发送给客户端。</a></p></blockquote><p>FTP数据流、控制流：<br>端口20用于在客户端和服务器之间传输数据流，而端口21用于传输控制流</p><p>两种工作模式：PASV+PORT</p><blockquote><p>   1、主动FTP：<br>命令连接：客户端 &gt;1024端口 -&gt; 服务器 21端口<br>数据连接：客户端 &gt;1024端口 <- 服务器="" 20端口="" 2、被动ftp：="" 命令连接：客户端="">1024端口 -&gt; 服务器 21端口 </-></p></blockquote><p>数据连接：客户端 &gt;1024端口 -&gt; 服务器 &gt;1024端口</p><p>我自己的理解是主动模式的话，客户端随意起一个大于1024端口去连服务器的21端口，然后告诉服务器我已经准备好数据连接了，你过来连我的数据端口吧，然后服务器用自己的20端口去连客户端的端口，注意此时客户端其实为了响应，是随意启用了一个自己不用的端口，即大于1024的端口。</p><p>被动模式：从头到尾都是客户端去连服务器，服务器一直处于响应状态。客户端打开两个大于1024的端口，然后第一个端口去连服务器的21号端口，告诉服务器：“你准备好了吗？我要向你传输数据了。然后服务器说我好了，客户端用自己事先开好的第二个端口去连接服务器，注意此时服务器的数据端口已经不是20了，服务器为了响应请求，随机开了一个大于1024端口<br>(<a href="https://blog.51cto.com/9237101/1911032" target="_blank" rel="noopener">https://blog.51cto.com/9237101/1911032</a>)</p><p>FTP指令和响应码<br>FTP断电续传、匿名ftp</p><p>HTTP<br>报文格式：请求报文、响应报文、请求头各种字段、响应头各种字段<br>http状态码</p><p>HTTPS<br>详细握手<br>摘要算法、数字签名、数字证书</p>]]></content>
      
      
      
        <tags>
            
            <tag> Computer Network </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>go基础</title>
      <link href="/blog/2020/07/21/go%E5%9F%BA%E7%A1%80/"/>
      <url>/blog/2020/07/21/go%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="go-programming-基础"><a href="#go-programming-基础" class="headerlink" title="go programming 基础"></a>go programming 基础</h1><a id="more"></a><h2 id="Why-go"><a href="#Why-go" class="headerlink" title="Why go"></a>Why go</h2><p>1.Code run fast<br>2.Garbage collection<br>3.Simpler objects<br>4.Concurrency is efficient</p><p>Software Translation</p><ul><li>machine language: CPU instructions represented in binary</li><li>Assembly language: CPU ~ with mnemonics (easier to read)</li><li>High level language</li></ul><p>Compilation<br>Translate instructions while code is executed</p><ul><li>C++, C, Java (compiler) Translation occurs once</li><li>Java(compiled to bytecode then be interpreted), Python (interpreter) Translation occurs every execution</li></ul><h2 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h2><p>Go is weakly OOP language</p><p>Go use structs instead of class</p><ul><li>No contructor, generics and inheritance</li></ul><h2 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h2><p>Performance Limits:<br>Moore’s Law<br>More transistors used to lead to higher clock frequencies<br>Power/temperature constraints</p><p>Parallelism<br>GPU thounsands of cores</p><ul><li>Concurrency is the management of multiple tasks at the same time</li><li>Key requirement for large systems</li><li>Concurrent programming enables parallelism<br>-&gt; Management of task execution<br>-&gt; Communication between tasks<br>-&gt; Synchronization between tasks</li></ul><p>Go includes concurrency primitives<br><code>Goroutines</code> represent concurrent tasks<br><code>Channels</code> are used to communicate between tasks<br><code>Select</code> enables task sysnchronization<br>Concurrency primitives are efficient and easy to use</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Package Main<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Printf(<span class="string">"hellow world\n"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Commands:</p><ul><li><code>go build</code> - compiles the program to .exe file</li><li><code>go doc</code> print documentation</li><li><code>go fmt</code> format indentation</li><li><code>go get</code> package</li><li><code>go run</code></li><li><code>go test</code></li></ul><h2 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h2><p>var x int = 100<br>var x, y int = 100</p><p>var x = 100 (auto infer)</p><p>x := 100</p><p>Define and alias for a type<br>type Celsius float64<br>type IDnum int</p><h2 id="Pointer"><a href="#Pointer" class="headerlink" title="Pointer"></a>Pointer</h2><p>A pointer is an address to data in memory</p><p><code>&amp;</code> returns the address of a variable/function</p><p><code>*</code> operator returns the data at the address<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> y <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> ip *<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">ip = &amp;x</span><br><span class="line">y = *ip</span><br></pre></td></tr></table></figure></p><p>New</p><ul><li>new() function creates a variable and returns a pointer to the variable<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ptr := <span class="built_in">new</span>(<span class="keyword">int</span>)</span><br><span class="line">*ptr = <span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"Hi %s"</span>, x)</span><br></pre></td></tr></table></figure><p>x = int32(y)</p><h2 id="String-Package"><a href="#String-Package" class="headerlink" title="String Package"></a>String Package</h2><p>CompareTo(a, b)</p><p>Contains(s, substr)</p><p>HasPrefix(s, prefix)</p><p>Index(s, substr)</p><p>Replace(s, old, new, n)</p><p>ToLower(s)</p><p>TrimSpace(s)</p><p>returns a new string</p><h2 id="Strconv-Package"><a href="#Strconv-Package" class="headerlink" title="Strconv Package"></a>Strconv Package</h2><p>Atoi(s) -converts string s to int</p><p>Itoa(s) -convert int to string</p><p>FormatFloat(f, fmt,prec, bitSize) - convert flot to string</p><p>ParseFloat(s, bitSize) - Converts a string to a floating point number</p><h2 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h2><ul><li>Expression whose value is known at compile time</li><li>Type is inferred from righthand side (boolean, string number)<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">1.3</span></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">    y=<span class="number">4</span></span><br><span class="line">    z=<span class="string">"Hi"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><p>iota (like enumerate)</p><ul><li>generate a set of related but distinct constants</li><li>Ofter represents a property which has several distinct values<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Grades <span class="keyword">int</span></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">    A Grade = <span class="literal">iota</span>  <span class="comment">// 0</span></span><br><span class="line">    B               <span class="comment">// 1</span></span><br><span class="line">    C               <span class="comment">// 2</span></span><br><span class="line">    D</span><br><span class="line">    F</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Allergen <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    IgEggs Allergen = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span> <span class="comment">// 1 &lt;&lt; 0 which is 00000001</span></span><br><span class="line">    IgChocolate                         <span class="comment">// 1 &lt;&lt; 1 which is 00000010</span></span><br><span class="line">    IgNuts                              <span class="comment">// 1 &lt;&lt; 2 which is 00000100</span></span><br><span class="line">    IgStrawberries                      <span class="comment">// 1 &lt;&lt; 3 which is 00001000</span></span><br><span class="line">    IgShellfish                         <span class="comment">// 1 &lt;&lt; 4 which is 00010000</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Control-flow"><a href="#Control-flow" class="headerlink" title="Control flow"></a>Control flow</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x &gt; <span class="number">5</span>&#123;</span><br><span class="line">    fmt.Printf(<span class="string">"aa"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> x&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        fmt.Printf(<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        fmt.Printf(<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Printf(<span class="string">"nocase"</span>) <span class="comment">// auto break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Scan"><a href="#Scan" class="headerlink" title="Scan"></a>Scan</h2><ul><li>Scan reads user input</li><li>Takes a pointer as an argument</li><li>Typed data is written to pointer</li><li>Returns number of scanned item</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> appleNum <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"Number of apples?"</span>)</span><br><span class="line">num, err := fmt.scan(&amp;appleNum)</span><br><span class="line">fmt.Printf(appleNum)</span><br></pre></td></tr></table></figure><h2 id="Composite-Data-types"><a href="#Composite-Data-types" class="headerlink" title="Composite Data types"></a>Composite Data types</h2><h3 id="Arrays-fixed-length"><a href="#Arrays-fixed-length" class="headerlink" title="Arrays: fixed length"></a>Arrays: fixed length</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x [<span class="number">5</span>]<span class="keyword">int</span></span><br><span class="line">x[<span class="number">0</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x [<span class="number">5</span>]<span class="keyword">int</span> = [<span class="number">5</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">x:=[...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125; <span class="comment">// infers size from number of initializers</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> x&#123;</span><br><span class="line">    fmt.Printf(<span class="string">"ind %d, val %d"</span>, i, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Slices"><a href="#Slices" class="headerlink" title="Slices"></a>Slices</h3><ul><li>A “window” on an underlying array</li><li><p>Variable size, up to the whole array</p></li><li><p><code>Pointer</code> indicates the start of the slice</p></li><li><code>Length</code></li><li><code>Capacity</code> is the max number of elts(elements)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr := [...]<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>&#125;</span><br><span class="line">s1:=arr[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">s2:=arr[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">fmt.Printf(<span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s))<span class="comment">// 3 7</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sli := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; <span class="comment">// this is a slice because no ... or number in the bracket</span></span><br></pre></td></tr></table></figure><h3 id="init-a-slice-directly"><a href="#init-a-slice-directly" class="headerlink" title="init a slice directly"></a>init a slice directly</h3><ul><li><p><code>make()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sli := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>)   <span class="comment">// 10 is the length</span></span><br><span class="line"></span><br><span class="line">sli := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>, <span class="number">15</span>) <span class="comment">// 15 is the capacity</span></span><br></pre></td></tr></table></figure></li><li><p><code>append()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sli = <span class="built_in">append</span>(sli, <span class="number">100</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h2><ul><li>Implementation of a hash map</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> idMap <span class="keyword">map</span>[<span class="keyword">string</span>][<span class="keyword">int</span>]</span><br><span class="line">idMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">idMap := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line">    <span class="string">"joe"</span>: <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">idMap[<span class="string">"joe"</span>] = <span class="number">456</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">delete</span>(idMap, <span class="string">"joe"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">id, p := idMap[<span class="string">"joe"</span>]   <span class="comment">// id is value, p is True/False the key in the map</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>(idMap)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, val := <span class="keyword">range</span> idMap&#123;</span><br><span class="line">    fmt.Println(key, val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="structs"><a href="#structs" class="headerlink" title="structs"></a>structs</h2><p>Person Struct<br>Name, Address, phone</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="keyword">struct</span> Person&#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    addr <span class="keyword">string</span></span><br><span class="line">    phone <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 Person</span><br><span class="line"></span><br><span class="line"><span class="comment">// dot notation to access struct fields</span></span><br><span class="line">p1.name = <span class="string">"joe"</span></span><br><span class="line">x1 = p1.addr</span><br><span class="line"></span><br><span class="line"><span class="comment">// init a struct</span></span><br><span class="line">p1 := <span class="built_in">new</span>(Person)</span><br><span class="line"></span><br><span class="line">p1 := Person(name: <span class="string">"joe"</span>, addr: <span class="string">"a st."</span>, phone: <span class="string">"123"</span>)</span><br></pre></td></tr></table></figure><h2 id="Protocols-and-Format"><a href="#Protocols-and-Format" class="headerlink" title="Protocols and Format"></a>Protocols and Format</h2><ul><li>Request for Comments (RFC)</li><li>Definition of Internet protocols and format<br>e.g.</li></ul><ul><li>HTML Hypertext Markup Language</li><li>URI Uniform Resource Identifier</li><li>HTTP Hypertext Transfer Protocol</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"net/http"</span></span><br><span class="line">http.Get(www.baidu.com)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"net"</span></span><br><span class="line">net.Dial(<span class="string">"tcp"</span>, <span class="string">"uci.edu:80"</span>)   <span class="comment">//make a tcp connect with the url</span></span><br></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>JavaScript Object Notation</p><ul><li><p>Go struct<br>p1 := Person(name:”joe”, addr: “a st.”)</p></li><li><p>equivalent JSON object<br>{“name”:”jow, “addr”:”a st.”}</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p1 := Person(name:<span class="string">"joe"</span>, addr:<span class="string">"aaa"</span>)</span><br><span class="line">barr, err:=json.Marshal(p1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 Person</span><br><span class="line">err := json.Unmarshal(barr, &amp;p2)</span><br></pre></td></tr></table></figure><ul><li><code>Marshal()</code> returns JSON representation as []byte</li><li><code>Unmarschal()</code> pointer passed to GO object and object must fit JSON  []byte </li></ul><h2 id="Files-Read-Write"><a href="#Files-Read-Write" class="headerlink" title="Files (Read, Write)"></a>Files (Read, Write)</h2><ul><li>Linear access, not random access</li></ul><p>Open, Read, write close seek(move read/write head)</p><p><code>ioutil File Read</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dat, e := ioutil.ReadFile(<span class="string">"test.txt"</span>)   <span class="comment">// content, error</span></span><br><span class="line"><span class="comment">// Explicit open/close are not needed</span></span><br><span class="line"><span class="comment">// Large files cause a problem (in RAM)</span></span><br><span class="line"></span><br><span class="line">dat = <span class="string">"JoJO"</span></span><br><span class="line">err:= ioutil.WriteFile(<span class="string">"out.txt"</span>, dat, <span class="number">0777</span>)    <span class="comment">// permission</span></span><br></pre></td></tr></table></figure><p><code>os.Open()</code></p><p><code>os.Close()</code></p><p><code>os.Read()</code> reads from a file into byte[]</p><p><code>os.Write()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f, err := os.Open(<span class="string">"dt.txt"</span>)</span><br><span class="line">barr :=<span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">10</span>) <span class="comment">// read 10 byte</span></span><br><span class="line">nb, err := f.Read(barr)</span><br><span class="line">f.Close()</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f, err := os.Create(<span class="string">"outfile.txt"</span>)</span><br><span class="line"></span><br><span class="line">barr:=[]<span class="keyword">byte</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">nb,err:=f.Write(barr)   <span class="comment">// write any unicode sequence</span></span><br><span class="line">nb,err:=f.WriteString(<span class="string">"Hi"</span>)</span><br></pre></td></tr></table></figure><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Printf(<span class="string">"Helllo, world."</span>)    <span class="comment">// main function called automatically</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Abstraction is hiding details that are less important</li></ul><h2 id="Call-by-Reference"><a href="#Call-by-Reference" class="headerlink" title="Call by Reference"></a>Call by Reference</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(y *<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    *y = *y + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    x:=<span class="number">2</span></span><br><span class="line">    foo(&amp;x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pros: copying time(no need to pass a whole array)<br>cons: data encapsulation</p><h2 id="Passing-Array-Arguments"><a href="#Passing-Array-Arguments" class="headerlink" title="Passing Array Arguments"></a>Passing Array Arguments</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(x [3]<span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a:=[<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">    fmt.Print(foo(a))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// modify by passing array pointers (messy and unnecessary)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(x *[3]<span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line">    (*x)[<span class="number">0</span>] = (*x)[<span class="number">0</span>] + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a:=[<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">    foo(&amp;a)</span><br><span class="line">    fmt.Print(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// using slices in go!!!</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(sli [])</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    sli[<span class="number">0</span>] = sli[<span class="number">0</span>] +<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;   <span class="comment">// no size</span></span><br><span class="line">    foo(a)</span><br><span class="line">    fmt.Print(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="First-Class-Values"><a href="#First-Class-Values" class="headerlink" title="First-Class Values"></a>First-Class Values</h2><ul><li>Functions can be treated like other types</li></ul><ul><li>Variables can be declared as a func</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funcVar <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">incFn</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    funcVar = incFn</span><br><span class="line">    fmt.Print(funcVar(<span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Functions as Arguments</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">applyIt</span><span class="params">(afunct <span class="keyword">func</span>(<span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">val</span> <span class="title">int</span>) <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> afunct(val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Anonymous Functions</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">applyIt</span><span class="params">(afunct <span class="keyword">func</span>(<span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">val</span> <span class="title">int</span>) <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> afunct(val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    v:= applyIt(<span class="function"><span class="keyword">func</span> <span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;<span class="keyword">return</span> x+<span class="number">1</span>&#125;, <span class="number">2</span>)</span><br><span class="line">    fmt.Println(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Function Defines a Function<br>ex: compute the distance between a point to a origin (variable)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MakeDistOrigin</span><span class="params">(o_x, o_y <span class="keyword">float64</span>)</span>  // 参数类型</span></span><br><span class="line"><span class="function">                <span class="title">func</span><span class="params">(<span class="keyword">float64</span>, <span class="keyword">float64</span>)</span> <span class="title">float64</span></span>&#123; <span class="comment">// 返回类型是一个函数</span></span><br><span class="line">    fn := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">float64</span>)</span> <span class="title">float64</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> math.Sqrt(math.Pow(x-o_x, <span class="number">2</span>) + math.Pow(y-o_y, <span class="number">2</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Dist1 := MakeDistOrigin(<span class="number">0</span>,<span class="number">0</span>)    <span class="comment">// return a function which can compute the distance from given point to (0,0)</span></span><br><span class="line">    Dist2 := MakeDistOrigin(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">    fmt.Println(Dist1(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">    fmt.Println(Dist2(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>environment along with a function</li></ul><h2 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h2><ul><li>function + its environment</li><li>when functions are passed/ returned, their environment comes with them</li></ul><p>in the previous example<br>o_x, o_y are the environment</p><p>闭包的好处</p><ol><li>希望一个变量长期保存内存中</li><li>避免全局变量污染</li><li>私有成员的存在。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拍卖</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeComparePrice</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123; <span class="comment">// 返回类型是一个函数,指定这个函数的参数类型和返回类型</span></span><br><span class="line">    o_price := <span class="number">5.0</span> <span class="comment">// := 是申明新的变量并赋值</span></span><br><span class="line">    fn := <span class="function"><span class="keyword">func</span><span class="params">(price <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> o_price &lt; price &#123;</span><br><span class="line">            o_price = price <span class="comment">// =是改变原来的o_price,这里不能使用o_price := price这样就是新的一个o_price</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o_price</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    comparePrice := makeComparePrice()</span><br><span class="line">    fmt.Println(comparePrice(<span class="number">4</span>))    <span class="comment">// 5</span></span><br><span class="line">    fmt.Println(comparePrice(<span class="number">6</span>))    <span class="comment">// 6</span></span><br><span class="line">    fmt.Println(comparePrice(<span class="number">980.424</span>))  <span class="comment">// 980.424</span></span><br><span class="line">    fmt.Println(comparePrice(<span class="number">1.23</span>))     <span class="comment">// 980.424</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Variadic-and-Deferred"><a href="#Variadic-and-Deferred" class="headerlink" title="Variadic and Deferred"></a>Variadic and Deferred</h2><ul><li>variable argument number</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getMax</span><span class="params">(val ...<span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    maxV := <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> vals&#123;</span><br><span class="line">        <span class="keyword">if</span> v&gt;maxV&#123;</span><br><span class="line">            maxV = V</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxV</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(getMax(<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>))</span><br><span class="line">    vslice := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>&#125;</span><br><span class="line">    fmt.Println(getMax(vslice...))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>defer <code>calling</code> function</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    i:=<span class="number">1</span></span><br><span class="line">    <span class="keyword">defer</span> fmt.Prinln(i+<span class="number">1</span>)   <span class="comment">// 2</span></span><br><span class="line">    i++</span><br><span class="line">    fmt.Println(<span class="string">"Hello"</span>!)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Classes-and-Encapsulation"><a href="#Classes-and-Encapsulation" class="headerlink" title="Classes and Encapsulation"></a>Classes and Encapsulation</h2><p><code>Encapsulation</code></p><ul><li>data can be protected from the programmer</li><li>data can be accessed by only methods</li></ul><p>Associating Methods with Data</p><ul><li><p>Method has a <code>receiver type</code> that it is associated with</p></li><li><p>Use dot notation to call the method</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInt <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mi MyInt)</span> <span class="title">Double</span><span class="params">()</span> <span class="title">int</span></span>&#123;   <span class="comment">// MyInt is the receiver type, this type has a method named Double(), we can call it by dot notation</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">int</span>(mi*<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    v:=MyInt(<span class="number">3</span>)</span><br><span class="line">    fmt.Println(v.Double())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>use struct<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Point type</span></span><br><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span>&#123;</span><br><span class="line">    x <span class="keyword">float64</span></span><br><span class="line">    y <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为Point类定义一个方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Point)</span> <span class="title">DistToOrig</span><span class="params">()</span></span>&#123;</span><br><span class="line">    t := math.Pow(p.x, <span class="number">2</span>) + math.Pow(p.y,<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> math.Sqrt(t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p1 := Point(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">    fmt.Println(p1.DistToOrig())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Controlling-Access"><a href="#Controlling-Access" class="headerlink" title="Controlling Access"></a>Controlling Access</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> data</span><br><span class="line"><span class="keyword">var</span> x <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrintX</span><span class="params">()</span></span>&#123;fmt.Println(x)&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"data"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    data.PrintX()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Controlling-Access-to-Structs"><a href="#Controlling-Access-to-Structs" class="headerlink" title="Controlling Access to Structs"></a>Controlling Access to Structs</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> data</span><br><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span>&#123;</span><br><span class="line">    x <span class="keyword">float64</span></span><br><span class="line">    y <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Point)</span> <span class="title">InitMe</span><span class="params">(xn, yn <span class="keyword">float64</span>)</span></span>&#123;</span><br><span class="line">    p.x = xn</span><br><span class="line">    p.y = yn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Point)</span> <span class="title">Scale</span><span class="params">(v <span class="keyword">float64</span>)</span></span>&#123;</span><br><span class="line">    p.x = p.x* v</span><br><span class="line">    p.y = p.y* v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p data.Point</span><br><span class="line">    p.InitMe(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">    p.Scale(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wrong, just the copy, do not change x coord at all</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p1 := Point(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    p1.OffsetX(<span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// large receiver!!</span></span><br><span class="line"><span class="keyword">type</span> Image [<span class="number">100</span>][<span class="number">100</span>] <span class="keyword">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    i1:= GrabImage()</span><br><span class="line">    il.BlurImage()  <span class="comment">// 10000 ints copied to BlurImage()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(p *Point)</span> <span class="title">Offset</span><span class="params">(v <span class="keyword">float64</span>)</span></span>&#123;</span><br><span class="line">    p.x = p.x + v</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h2><ul><li>Ability for an object to have different forms depending on the context</li></ul><p>Overriding<br>Subclass redefines a method inherited from the superclass</p><p>-polumorphic</p><p>Interfaces</p><ul><li>Name, parameters, return values</li><li>Implementation is NOT defined</li></ul><p>Satisfying an Interface<br>implement all the methods(similar to inheritance with overriding)</p><p>additional functions permitted</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Shape2D <span class="keyword">interface</span>&#123;</span><br><span class="line">    Area() <span class="keyword">float64</span></span><br><span class="line">    Perimeter() <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Triangle&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(t Triangle)</span> <span class="title">Area</span><span class="params">()</span> <span class="title">float64</span></span>&#123;...&#125;    <span class="comment">// match to the func in Shape2D interface automatically</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(t Triangle)</span> <span class="title">Perimeter</span> <span class="title">float64</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure><h2 id="Concrete-vs-Interface-Types"><a href="#Concrete-vs-Interface-Types" class="headerlink" title="Concrete vs Interface Types"></a>Concrete vs Interface Types</h2><p>(data &amp; methods) vs (methods)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Speaker <span class="keyword">interface</span> &#123;Speak()&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;name <span class="keyword">string</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现Speaker里的Speak函数，无需指定Speaker名。有一个associated type是实现类型Dog</span></span><br><span class="line"><span class="comment">// x相当于Dog实现了Speaker的Speak函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Dog)</span> <span class="title">Speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(d.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s1 Speaker</span><br><span class="line">    <span class="keyword">var</span> d1 Dog&#123;<span class="string">"Brian"</span>&#125;</span><br><span class="line"></span><br><span class="line">    s1 = d1</span><br><span class="line">    s1.Speak()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>// var d1 *Dog       //legal, d1 has no concrete value, ca still call the Speak()<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d*Dog)</span> <span class="title">Speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> d == <span class="literal">nil</span>&#123;</span><br><span class="line">        fmt.Println(<span class="string">"&lt;noise&gt;"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        fmt.Println(d.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s1 Speaker</span><br><span class="line"><span class="keyword">var</span> d1 *Dog</span><br><span class="line">s1 = d1</span><br><span class="line">s1.Speak()</span><br></pre></td></tr></table></figure></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 任意实现Shape2D的图形都可以用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FitInYard</span><span class="params">(s Shape2D)</span> <span class="title">bool</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.Area()&gt;<span class="number">100</span> &amp;&amp; s.Perimeter()&gt;<span class="number">100</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> False</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不同图Type不同功能</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DrawRect</span><span class="params">(r Rectangle)</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DrawTriangle</span><span class="params">(t Triangle)</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DrawShape</span><span class="params">(s Shape2D)</span> <span class="title">bool</span></span>&#123;</span><br><span class="line">    <span class="comment">// rect, ok:= s.(Rectangle)</span></span><br><span class="line">    <span class="comment">// if ok&#123;</span></span><br><span class="line">    <span class="comment">//     DrawRect(rect)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// tri, ok:= s.(Triangle)</span></span><br><span class="line">    <span class="comment">// if ok&#123;</span></span><br><span class="line">    <span class="comment">//     DrawTriangle(tri)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">switch</span>:=sh:=s.(<span class="keyword">type</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> Rectangle:</span><br><span class="line">            DrawRect(sh)</span><br><span class="line">        <span class="keyword">case</span> Triangle:</span><br><span class="line">            DrawTriangle(tri)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Error-Interface"><a href="#Error-Interface" class="headerlink" title="Error Interface"></a>Error Interface</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span>&#123;</span><br><span class="line">    Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handling Errors</span></span><br><span class="line">f, err := os.Open(<span class="string">"/harris/test.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Why-use-concurrency"><a href="#Why-use-concurrency" class="headerlink" title="Why use concurrency"></a>Why use concurrency</h2><ul><li><p>Parallel Execution<br>Two programs execute in parallel if they execute at exactly the same time. (At time t, an instruction is being performed for both P! and P2) CPU1, CPU2</p></li><li><p>Von Neumann Bottleneck<br>a limitation on throughput on personal computer<br>With the processing becoming faster for processors, the memory transfer rates meet a limitation.</p></li></ul><p>To solve that:<br>Cache, Prefetching, Multithreading, DDR SDRAM</p><p>P = alpha * CFV^2</p><p>alpha is percent of time switching<br>C is capacitance<br>F is the clock frequency<br>V is voltage swing</p><p>Other concurrent tasks can operate while one task is waiting</p><h2 id="Processes-vs-Threads"><a href="#Processes-vs-Threads" class="headerlink" title="Processes vs. Threads"></a>Processes vs. Threads</h2><ul><li>Threads share some context</li><li>Many threads can exist in one process</li></ul><h2 id="Goroutines"><a href="#Goroutines" class="headerlink" title="Goroutines"></a>Goroutines</h2><ul><li>Like a thread in Go</li><li>Many Goroutines execute within a single OS thread</li></ul><p>switch the go routines like threads</p><h2 id="Interleaving"><a href="#Interleaving" class="headerlink" title="Interleaving"></a>Interleaving</h2><ul><li>Order of execution within a task is unknown</li><li>Order of execution <code>between</code> concurrent tasks is unknown</li><li>Interleaving of instructions between tasks is unknown</li></ul><p><code>Web</code><br>Threads are largely independent but not completely independent (some communication between)<br>Web server, one thread per client</p><p><code>Image processing</code><br>blur the pixels<br>1 thread per pixel block (GPU does)</p><p>some pixel values are shared between the neighbors</p><h2 id="Create-a-Goroutine"><a href="#Create-a-Goroutine" class="headerlink" title="Create a Goroutine"></a>Create a Goroutine</h2><ul><li>One goroutine is created automatically to execute the main()</li><li>Other goroutines are created using the go keyword</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">go</span> foo()    <span class="comment">// 使用go关键词, Main goroutine 不会block</span></span><br><span class="line">a = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>when the main goroutine end, all other goroutines will exit</p><h2 id="Exit-goroutines"><a href="#Exit-goroutines" class="headerlink" title="Exit goroutines"></a>Exit goroutines</h2><p>Early Exit<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">go</span> fmt.Printf(<span class="string">"New routine"</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"Main routine"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>Only “Main routine” is printed because Main finished before the new goroutine started.</li></ul><h2 id="Delayed-Exit"><a href="#Delayed-Exit" class="headerlink" title="Delayed Exit"></a>Delayed Exit</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">go</span> fmt.Printf(<span class="string">"New routine"</span>)</span><br><span class="line">    time.Sleep(<span class="number">100</span> * time.Millisecond)  <span class="comment">// Adding a delay to wait is bad because assumptions may be wrong</span></span><br><span class="line">    fmt.Printf(<span class="string">"Main routine"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Synchronization"><a href="#Synchronization" class="headerlink" title="Synchronization"></a>Synchronization</h2><ul><li><p>Using global events whose execution is viewed by all threads, simultaneously</p></li><li><p>GLOBAL EVENT is viewed by all tasks at the same time</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line">x = x+<span class="number">1</span></span><br><span class="line">GLOBAL EVENT</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> GLOBAL EVENT <span class="comment">// x has been updated</span></span><br><span class="line">    <span class="built_in">print</span> x</span><br></pre></td></tr></table></figure><p>Wait groups</p><ul><li>Sync package contains functions to synchronize between goroutines</li><li><code>sync.WaitGroup</code> forces a goroutine to wait for other goroutines</li><li>contains an internal counter</li></ul><ul><li>increment counter for each goroutine to wait for</li><li>decrement counter when each goroutine completes</li><li>Waiting goroutine cannot continue until counter is 0</li></ul><p>Using waitgroup</p><p>Add() increments the counter<br>Done() decrements the counter<br>Wait() blocks until counter == 0</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> foo(&amp;wg)</span><br><span class="line">wg.Wait() <span class="comment">// wait on one thread</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在foo里</span></span><br><span class="line">wg.Done()</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(wg *sync.WaitGroup)</span></span>&#123;</span><br><span class="line">    fmt.Printf(<span class="string">"New routine"</span>)</span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    wg.Add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> foo (&amp;wg)    <span class="comment">// 传递引用，免得copy一大堆过去</span></span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Printf(<span class="string">"Main routine"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Channels"><a href="#Channels" class="headerlink" title="Channels"></a>Channels</h2><ul><li>Transfer data between goroutines</li><li>Channels are typed</li><li>Use make() to create a channel<br>c:=make(chan int)</li><li>send and receive data usign the &lt;-</li><li>Send data on a channel<br>c&lt;-3</li><li>receive data from a channel<br>x := &lt;- c</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prod</span><span class="params">(v1 <span class="keyword">int</span>, v2 <span class="keyword">int</span>, c <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    c &lt;- v1 * v2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">go</span> prod(<span class="number">1</span>, <span class="number">2</span>, c)</span><br><span class="line">    <span class="keyword">go</span> prod(<span class="number">3</span>, <span class="number">4</span>, c)    <span class="comment">// In the same channel c</span></span><br><span class="line">    a:= &lt;-c</span><br><span class="line">    b:=&lt;-c</span><br><span class="line">    fmt.Println(a*b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>cache 是为了弥补高速设备和低速设备的鸿沟而引入的中间层，最终起到<strong>加快访问速度</strong>的作用。</li><li>而 buffer 的主要目的进行流量整形，把突发的大数量较小规模的 I/O 整理成平稳的小数量较大规模的 I/O，以<strong>减少响应次数</strong></li></ul><p>Unbuffered Channel cannot hold datta in transit<br>Sendind blocks until data is received<br>Receiving blocks until data is sent</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Task <span class="number">1</span></span><br><span class="line">c &lt;- <span class="number">3</span>  <span class="comment">// no buffer, has to wait for task 2 to receive</span></span><br><span class="line"></span><br><span class="line">One hour later</span><br><span class="line"></span><br><span class="line">Task <span class="number">2</span></span><br><span class="line">x := &lt;- c  <span class="comment">// wait task 1 to send</span></span><br></pre></td></tr></table></figure><p>So a <code>Wait()</code> should be here</p><h2 id="Channel-Capacity"><a href="#Channel-Capacity" class="headerlink" title="Channel Capacity"></a>Channel Capacity</h2><ul><li>channels can obtain a limited number of objects</li><li>Capacity is the number of objects it can hold in transit</li></ul><p>c:=make(chan int, 3)</p><ul><li>Sending only blocks if buffer is full</li><li>receiving only blocks if buffer is empty </li></ul><p>生产者线程-&gt;有限的缓冲区-&gt;消费者线程</p><ul><li>在缓冲区为空时，消费者不能再消费</li><li>缓冲区满时，生产者不能再进行生产</li></ul><h2 id="Iterate-through-a-channel"><a href="#Iterate-through-a-channel" class="headerlink" title="Iterate through a channel"></a>Iterate through a channel</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i:= <span class="keyword">range</span> c&#123;    <span class="comment">// i is the read value</span></span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>iterates when sender calls close(c)</li></ul><h2 id="Receiving-from-Multiple-Goroutines"><a href="#Receiving-from-Multiple-Goroutines" class="headerlink" title="Receiving from Multiple Goroutines"></a>Receiving from Multiple Goroutines</h2><ul><li>Multiple channels may be used to receive from multiple sources</li></ul><h2 id="Select-Statement"><a href="#Select-Statement" class="headerlink" title="Select Statement"></a>Select Statement</h2><ul><li><p>May have a choice of which data to use<br>-First come First served</p></li><li><p>use the select statement to wait on the first data from a set of channels</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只选第一个</span></span><br><span class="line"><span class="keyword">select</span>&#123;</span><br><span class="line">    <span class="keyword">case</span> a = &lt;- c1:</span><br><span class="line">        fmt.Println(a)</span><br><span class="line">    <span class="keyword">case</span> b = &lt;- c2:</span><br><span class="line">        fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>&#123;</span><br><span class="line">    <span class="keyword">case</span> a = &lt;- inchan:</span><br><span class="line">        fmt.Println(<span class="string">"Received a"</span>)</span><br><span class="line">    <span class="keyword">case</span> b = &lt;- outchan:</span><br><span class="line">        fmt.Println(<span class="string">"Send b"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Select with an Abort Channel</p><p>Producer-consumer<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>&#123;    <span class="comment">//infinite for loop keep receiving</span></span><br><span class="line">    <span class="keyword">select</span>&#123;</span><br><span class="line">        <span class="keyword">case</span> a &lt;- c:</span><br><span class="line">            fmt.Println(a)  <span class="comment">// keep receivinf and processing</span></span><br><span class="line">        <span class="keyword">case</span> &lt;-abort:       <span class="comment">// abort channel maybe enter quit, 如果有东西到abort channel上了，就会return</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>&#123;</span><br><span class="line">    <span class="keyword">case</span> a=&lt;-c1:</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    <span class="keyword">case</span> b=&lt;-c2:</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    <span class="keyword">default</span>:    <span class="comment">// default case do not block</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mutual-Exclusion"><a href="#Mutual-Exclusion" class="headerlink" title="Mutual Exclusion"></a>Mutual Exclusion</h2><p>Two goroutines write to a shared variable can interfere with each other.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// not corrent!!</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    wg.Add(<span class="number">2</span>)   <span class="comment">// create 2 goroutines</span></span><br><span class="line">    <span class="keyword">go</span> inc()</span><br><span class="line">    <span class="keyword">go</span> inc()</span><br><span class="line">    wg.Wait()   <span class="comment">// wait for the two routines</span></span><br><span class="line">    fmt.Println(i)  <span class="comment">// i should equal 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>seems no problem and i should equal 2??</p><p><strong>Granularity of Concurrency</strong><br>i = i+1 might be three machine instructions<br>read i<br>increment<br>write i</p><p>Interleaving machine instructions<br>|Task 1|Task2|i|<br>|—|—|—|<br>|read i||0|<br>||read i|0|<br>|inc||1|<br>|write i||1|<br>||inc|1|<br>||write i|1|</p><p>Correct Sharing</p><ul><li>Don’t let 2 goroutines write to a shared variable at the same time</li><li>Mutual Exclusion</li></ul><p>Sync.Mutex</p><ul><li>A Mutex ensures mutual exclusion</li><li>uses a binary semaphore</li><li>Flag up - shared variable is in use</li><li><p>Flag down - shared variable is available</p></li><li><p><code>Lock()</code> method puts the flag up - shared variale i use</p></li><li><code>Unlock()</code> method puts the flag down<br>When Unlock() is called, a Lock() can be proceed</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> mut sync.Mutex</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mut.Lock()</span><br><span class="line">    i = i+<span class="number">1</span></span><br><span class="line">    mut.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Synchronous-Initialization"><a href="#Synchronous-Initialization" class="headerlink" title="Synchronous Initialization"></a>Synchronous Initialization</h2><p>Initialization must happen once and before everything else<br>Sync.Once</p><ul><li>Has one method, <code>once.Do(f)</code></li><li>Function f is executed only one time even if it is ccalled in multiple gotoutines</li><li>All calls to once.Do() block until the first returns</li></ul><ul><li>Ensures that init executes first</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">go</span> dostuff()</span><br><span class="line">    <span class="keyword">go</span> dostuff()</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> on sync.Once</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Pringln(<span class="string">"Init"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dostuff</span><span class="params">()</span></span>&#123;</span><br><span class="line">    on.Do(setup)</span><br><span class="line">    fmt.Println(<span class="string">"hello"</span>)</span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//result</span></span><br><span class="line"><span class="comment">// Init</span></span><br><span class="line"><span class="comment">// hello</span></span><br><span class="line"><span class="comment">// hello</span></span><br></pre></td></tr></table></figure><h2 id="Deadlock-example"><a href="#Deadlock-example" class="headerlink" title="Deadlock example"></a>Deadlock example</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dostuff</span><span class="params">(c1 <span class="keyword">chan</span> <span class="keyword">int</span>, c2 <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    &lt;- c1</span><br><span class="line">    c2 &lt;- <span class="number">1</span></span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">go</span> dostuff(ch1, ch2)</span><br><span class="line">    <span class="keyword">go</span> dostuff(ch2, ch1)</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Golang detects when all goroutine are deadlocks, but cannot detect subset of goroutines are deadlocks</p><h2 id="Dining-Philosophers-Problem"><a href="#Dining-Philosophers-Problem" class="headerlink" title="Dining Philosophers Problem"></a>Dining Philosophers Problem</h2><p>Each chopstick is a mutex<br>Each philosopher is associated with a goroutine and two chopsticks</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ChopS <span class="keyword">struct</span>&#123; sync.Mutex&#125;</span><br><span class="line"><span class="keyword">type</span> Philo <span class="keyword">struct</span>&#123;</span><br><span class="line">    leftCS, rightCS *ChopS</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Philo)</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>&#123;</span><br><span class="line">        <span class="comment">// All people will lock the chopstick on their left side firstly</span></span><br><span class="line">        p.leftCS.Lock()</span><br><span class="line">        p.rightCS.Lock()</span><br><span class="line"></span><br><span class="line">        fmt.Println(<span class="string">"eating"</span>)</span><br><span class="line"></span><br><span class="line">        p.rightCS.UnLock()</span><br><span class="line">        p.leftCS.UnLock()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// init</span></span><br><span class="line">CSticks := <span class="built_in">make</span>([]*ChopS, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++&#123;</span><br><span class="line">    CStick[i] = <span class="built_in">new</span>(ChopS)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">philos := <span class="built_in">make</span>([]*Philo, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++&#123;</span><br><span class="line">    philos[i] = &amp;Philo&#123;CSticks[i], CSticks[(i+<span class="number">1</span>)%<span class="number">5</span>]&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// start eating</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++&#123;</span><br><span class="line">    <span class="keyword">go</span> philos[i].eat()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个人拿最小的<br>Solution<br>change to &amp;Philo{CSticks[min(i, (i+1)%5)], CSticks[max(i, (i+1)%5)]}</p>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Internet programming</title>
      <link href="/blog/2019/10/14/Internet-programming/"/>
      <url>/blog/2019/10/14/Internet-programming/</url>
      
        <content type="html"><![CDATA[<h1 id="Internet-programming-笔记"><a href="#Internet-programming-笔记" class="headerlink" title="Internet programming 笔记"></a>Internet programming 笔记</h1><a id="more"></a><h2 id="note1"><a href="#note1" class="headerlink" title="note1"></a>note1</h2><p><code>http</code>: hypertext transfer protocol, the underlying protocol used by the WWW and this protocol defines how messages are formatted and transmitted,</p><p>and what actions Web servers and browsers should take in response to various commands.</p><p><code>https</code>: http over secure</p><p><code>session</code>: a temporary and interactive information interchange between two or more communicating devices or between computer and user.</p><p><code>Internet</code> vs <code>WWW</code> : Internet is a global network comprised of computers( conceptualized during 1969, APRA), World Wide Web is a collection of web pages following Http that can be accessed via the Internet from any part of the world.</p><p><code>Cookie</code>: a small piece of data sent from a website and stored on the user’s computer by the user’s web browser. It can record user’s browsing activity and remember stateful information and arbitrary information that user entered into form fields.</p><p><code>JSP</code>: JSP stands for Java Server Pages, which helps developers to create dynamically web pages based on HTML, XML, or other types.</p><p><code>Servlets</code>: are Java programs that are already compiled which also creates dynamic web content.</p><p><code>HTML</code>: HyperText Markup Language, the authoring language used to create documents on the World Wide Web</p><p><code>javascript</code>: make web pages dynamic and interactive by implementing client-side scripts.</p><p><code>css</code>: Cascading Style Sheets is a language that describes the style of an HTML document.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Computer Network </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Screen Design</title>
      <link href="/blog/2019/05/22/ScreenDesign/"/>
      <url>/blog/2019/05/22/ScreenDesign/</url>
      
        <content type="html"><![CDATA[<h1 id="A-brief-introduction-of-Screen-Design"><a href="#A-brief-introduction-of-Screen-Design" class="headerlink" title="A brief introduction of Screen Design"></a>A brief introduction of Screen Design</h1><blockquote><p>Design, 50% instinct, 50% hard work.</p></blockquote><a id="more"></a><h2 id="Gestalt-pyschology"><a href="#Gestalt-pyschology" class="headerlink" title="Gestalt pyschology"></a>Gestalt pyschology</h2><blockquote><p>The whole(unity) is greater than the sum of its parts.(Aristotle)</p></blockquote><p><br><br><div class="row">    <embed src="Handout01-GestaltPsychology.pdf" width="100%" height="550" type="application/pdf"></div><br><br></p><h2 id="Composition-Symmetry-and-Balance"><a href="#Composition-Symmetry-and-Balance" class="headerlink" title="Composition, Symmetry and Balance"></a>Composition, Symmetry and Balance</h2><blockquote><p>Pictures need a frame for their composition. Youe must know where is the end of the picture and where begins reality.</p></blockquote><ul><li><code>Composition with perspective</code></li><li>not in the middle</li><li>Symmetry in the composition and in the meaning</li><li>Golden section</li></ul><p><br><br><div class="row">    <embed src="Handout03_Composition.pdf" width="100%" height="550" type="application/pdf"></div><br><br></p><h2 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h2><blockquote><p>color palettes</p></blockquote><p><br><br><div class="row">    <embed src="Handout04_Color.pdf" width="100%" height="550" type="application/pdf"></div><br><br></p><h2 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h2><p><br><br><div class="row">    <embed src="Handout05_Grid.pdf" width="100%" height="550" type="application/pdf"></div><br><br></p><h2 id="Logo"><a href="#Logo" class="headerlink" title="Logo"></a>Logo</h2><ul><li>from <code>tangram</code> 七巧板 to logotype</li><li><code>pictogram</code> 象形符号</li></ul><p><br><br><div class="row">    <embed src="06_Logo.pdf" width="100%" height="550" type="application/pdf"></div><br><br></p><h2 id="Typography"><a href="#Typography" class="headerlink" title="Typography"></a>Typography</h2><ul><li>Leading</li><li>captical letter</li><li>typographie</li></ul><p><br><br><div class="row">    <embed src="Handout07_Typography.pdf" width="100%" height="550" type="application/pdf"></div><br><br></p><h2 id="Design-Thinking"><a href="#Design-Thinking" class="headerlink" title="Design Thinking"></a>Design Thinking</h2><p><br><br><div class="row">    <embed src="08_DesignThinking.pdf" width="100%" height="550" type="application/pdf"></div><br><br></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>DSP_SwarmIntelligence</title>
      <link href="/blog/2019/05/21/DSP-SwarmIntelligence/"/>
      <url>/blog/2019/05/21/DSP-SwarmIntelligence/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Swarm intelligence (SI) is the collective behavior of decentralized, self-organized systems, natural or artificial. The concept is employed in work on artificial intelligence. The expression was introduced by Gerardo Beni and Jing Wang in 1989, in the context of cellular robotic systems</p></blockquote><a id="more"></a><blockquote><p>How can we implement the coordination among the groups?</p></blockquote><p>flask-&gt;waterholr-&gt;on and another</p><p>predator-&gt;flask split-&gt; </p><ol start="2"><li>knowledge accumulated to concesus</li></ol><p>penguin<br>-40 together to brook the temperature<br>huddle tiny streps away<br>shift and rotate fro, back to front<br>not let the </p><p>overheat-&gt;breakdown</p><p>step by step huddle after huddle</p><p>mayfly</p><p>flock of fish collide with predator </p><blockquote><p>pheromone 信息素</p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>java网络编程</title>
      <link href="/blog/2019/05/18/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/blog/2019/05/18/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="java网络编程"><a href="#java网络编程" class="headerlink" title="java网络编程"></a>java网络编程</h1><a id="more"></a><h2 id="任务一-TCP实现逆序字符串输出"><a href="#任务一-TCP实现逆序字符串输出" class="headerlink" title="任务一 TCP实现逆序字符串输出"></a>任务一 TCP实现逆序字符串输出</h2><blockquote><p>客户端想要发一行字符行给服务器端然后得到一个逆序的字符行。</p></blockquote><h3 id="SocketClient-java"><a href="#SocketClient-java" class="headerlink" title="SocketClient.java"></a>SocketClient.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketClient</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> UnknownHostException, IOException </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">54321</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// get input stream</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// get output stream</span></span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line"><span class="comment">// write string into server</span></span><br><span class="line">ps.println(sc.nextLine());</span><br><span class="line"></span><br><span class="line"><span class="comment">// print the reversed string from server</span></span><br><span class="line">System.out.println(br.readLine());</span><br><span class="line"></span><br><span class="line">socket.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SocketServer-java"><a href="#SocketServer-java" class="headerlink" title="SocketServer.java"></a>SocketServer.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketServer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">54321</span>);</span><br><span class="line">System.out.println(<span class="string">"Server is on, binded to 54321 port"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">final</span> Socket socket = server.accept();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// get the input stream</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">String line = br.readLine();</span><br><span class="line">line = <span class="keyword">new</span> StringBuilder(line).reverse().toString();</span><br><span class="line">ps.println(line);</span><br><span class="line">socket.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>建立Socket连接</p><p> 客户端Socket指定host和port，服务器Socket使用给定的ServerSocket绑定port即可再调用accept函数，当客户端运行时，会找到指定的host:port，建立和服务器的连接</p></li><li><p>通信</p><p>服务器的输入流就是客户端的输出流，反之亦然。<br>在服务器和客户端都写一个BufferedReader（简称br）用来输入，和一个PrintStream（简称ps）用来输出。我客户端要发一个字符串，就用ps.println输出；服务器要接收就用br.readLine接收（接收就是输入流）；然后我服务器逆序一下字符串用ps输出，客户端用br再接收就是逆序的字符串了。</p></li></ol><table><thead><tr><th style="text-align:center">客户端</th><th style="text-align:center"></th><th style="text-align:center">服务器</th></tr></thead><tbody><tr><td style="text-align:center">ps输出</td><td style="text-align:center">-&gt;</td><td style="text-align:center">br接收</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">reverse字符串</td></tr><tr><td style="text-align:center">br接收</td><td style="text-align:center">&lt;-</td><td style="text-align:center">ps输出</td></tr></tbody></table><ul><li>有一个误区就是ps的println不是系统的输出，而是把这一行放到服务器和客户端的交流通道里，客户端println输出，服务器就可以用输入的方式读取了，反之亦然</li></ul><hr><h2 id="任务二-UDP实现简单计算通信"><a href="#任务二-UDP实现简单计算通信" class="headerlink" title="任务二 UDP实现简单计算通信"></a>任务二 UDP实现简单计算通信</h2><blockquote><p>使用UDP完成简单计算，比如客户端输入3*4，服务端输出12；客户端输入9/3，服务端输出3</p></blockquote><h3 id="UDPclient-java"><a href="#UDPclient-java" class="headerlink" title="UDPclient.java"></a>UDPclient.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPclient</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compute</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">String pattern = <span class="string">"(\\d*)([\\+\\-\\*\\/])(\\d*)"</span>;</span><br><span class="line">Pattern r = Pattern.compile(pattern);</span><br><span class="line">Matcher m = r.matcher(s);</span><br><span class="line"><span class="keyword">int</span> consequence = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(m.find())&#123;   <span class="comment">// necessary!</span></span><br><span class="line"><span class="keyword">int</span> leftInt = Integer.parseInt(m.group(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">char</span> operator = m.group(<span class="number">2</span>).charAt(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> rightInt = Integer.parseInt(m.group(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(operator) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">            consequence = leftInt + rightInt;</span><br><span class="line">            <span class="keyword">break</span>;   <span class="comment">// important!</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">consequence = leftInt - rightInt;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">consequence = leftInt * rightInt;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">consequence = leftInt / rightInt;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> consequence;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">//            byte[] bytes = sc.nextLine().getBytes();</span></span><br><span class="line">    String test =sc.nextLine();</span><br><span class="line">    <span class="keyword">int</span> result1 = compute(test);</span><br><span class="line">        System.out.println((<span class="keyword">int</span>) result1);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = (<span class="string">""</span>+result1).getBytes();</span><br><span class="line">    </span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(bytes, bytes.length);</span><br><span class="line">        packet.setAddress(InetAddress.getByName(<span class="string">"127.0.0.1"</span>));</span><br><span class="line">        packet.setPort(<span class="number">55555</span>);</span><br><span class="line">        socket.send(packet);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UDPserver-java"><a href="#UDPserver-java" class="headerlink" title="UDPserver.java"></a>UDPserver.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPserver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">55555</span>);</span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buf, buf.length);</span><br><span class="line">            socket.receive(packet);</span><br><span class="line">            <span class="keyword">byte</span>[] data = packet.getData();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(data, <span class="number">0</span>, data.length));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我在客户端计算了result，因为UDP传递的是数据包，我们把然后把这个result存放在byte数组中，再放到数据包中，用客户端socket的send发送，就可以用服务器端socket的receive接收了。可以看出，我server不用开，client也能发送，就是永远送不到server了，这就是丢包的原理。TCP则是要先建立连接，就保证了数据是能送到位的。其它UDP和TCP的区别：</p><p>1、基于连接与无连接；</p><p>2、对系统资源的要求（TCP较多，UDP少）；</p><p>3、UDP程序结构较简单；</p><p>4、流模式与数据报模式 ；</p><p>5、TCP保证数据正确性，UDP可能丢包；</p><p>6、TCP保证数据顺序，UDP不保证。</p><p><a href="https://zhuanlan.zhihu.com/p/24860273" target="_blank" rel="noopener">参考来源</a></p><hr><h2 id="任务三-多线程实现多客户端通信"><a href="#任务三-多线程实现多客户端通信" class="headerlink" title="任务三 多线程实现多客户端通信"></a>任务三 多线程实现多客户端通信</h2><blockquote><p>建立25个线程，把它建立连接的时间戳、发送信息的时间戳和2秒后断开的时间戳信息，发给服务器显示。</p></blockquote><h3 id="Server-java"><a href="#Server-java" class="headerlink" title="Server.java"></a>Server.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">ServerSocket serve = <span class="keyword">new</span> ServerSocket(<span class="number">54322</span>);</span><br><span class="line">System.out.println(<span class="string">"Server is on and binded to 54322 port"</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">final</span> Socket socket = serve.accept();</span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line"></span><br><span class="line">System.out.println(br.readLine()); <span class="comment">// receive the timestamp info of</span></span><br><span class="line"><span class="comment">// connection and sending infomation</span></span><br><span class="line"></span><br><span class="line">System.out.println(br.readLine()); <span class="comment">// receive the timestamp info of</span></span><br><span class="line"><span class="comment">// disconnection</span></span><br><span class="line">socket.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MutipleClients-java"><a href="#MutipleClients-java" class="headerlink" title="MutipleClients.java"></a>MutipleClients.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MutipleClients</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">25</span>; i++) &#123;</span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">54322</span>);</span><br><span class="line">String Stamp1 = <span class="keyword">new</span> Timestamp(System.currentTimeMillis()).toString();</span><br><span class="line"></span><br><span class="line">Thread t = Thread.currentThread();</span><br><span class="line"></span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">String Stamp2 = <span class="keyword">new</span> Timestamp(System.currentTimeMillis()).toString();</span><br><span class="line"></span><br><span class="line">ps.println(<span class="string">"Client "</span> + t.getId() + <span class="string">" connected at "</span> + Stamp1 + <span class="string">" and sent timestamp "</span> + Stamp2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">String Stamp3 = <span class="keyword">new</span> Timestamp(System.currentTimeMillis()).toString();</span><br><span class="line">ps.println(<span class="string">"Client "</span> + t.getId() + <span class="string">" disconnected at "</span> + Stamp3);</span><br><span class="line">socket.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一个服务器与25个客户端进行连接，需要用while(True)使之一直处于accept状态。</p></blockquote><blockquote><p>服务器要接收两行信息，第一行客户端发来(println)的连接与发送信息时间戳，第二行是过一段时间客户端发来的结束时间戳。</p></blockquote><hr><h2 id="任务四-RMI实现远程方法调用"><a href="#任务四-RMI实现远程方法调用" class="headerlink" title="任务四 RMI实现远程方法调用"></a>任务四 RMI实现远程方法调用</h2><blockquote><p>前面我们看到的都是在客户端处理好数据送给服务器，让服务器进行输出。那有什么办法在服务器上定义一些接口，然后在本地调用呢？</p></blockquote><p>这就是RMI(remote method invocation)。本地调用方法时实质上是传给服务器该方法的引用，让服务器调用该方法，然后return给本地结果。本地有stub，是远程对象在本地的代理(proxy),类似于RPC系统中的clinet stub。</p><blockquote><p>RMI的实现首先要发现远程对象，那就必须要开启注册表(RTegistry)，什么是注册表？</p></blockquote><p>拿DNS来类比最为方便，DNS相当于一种注册表。它建立了IP地址和域名的对应，IP就是对远程对象的引用，域名就是远程对象的标识符。格式类似于 <code>rmi://host:port/name</code>。<code>host</code>指明注册表运行的注解，<code>port</code>表明接收调用的端口，<code>name</code>是一个标识该对象的简单名称。<br>下面代码用LocateRegistry.createRegistry方法确定了注册表。再进行bind或rebind操作就可以连接了。</p><h3 id="远程接口"><a href="#远程接口" class="headerlink" title="远程接口"></a>远程接口</h3><blockquote><p>IHello.java </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define remote interface</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IHello</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helloWorld</span><span class="params">()</span><span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><blockquote><p>Hello.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define the implementation class</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">IHello</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">Hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helloWorld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello!"</span>);</span><br><span class="line"><span class="keyword">return</span> ++index;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><blockquote><p>HelloServer.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">IHello rhello = <span class="keyword">new</span> Hello();</span><br><span class="line">Registry registry = LocateRegistry.createRegistry(<span class="number">8888</span>);</span><br><span class="line">registry.bind(<span class="string">"test"</span>,rhello);  <span class="comment">// in client side rmi://localhost:8888/test</span></span><br><span class="line">System.out.println(<span class="string">"Remote Hello Object is bound succesfully!"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><blockquote><p>HelloClient.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloClient</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line">IHello rhello = (IHello) Naming.lookup(<span class="string">"rmi://192.168.31.102:8888/test"</span>);</span><br><span class="line">System.out.println(rhello.helloWorld());</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学校 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SWEII_TEST</title>
      <link href="/blog/2019/05/17/SWEII-TEST/"/>
      <url>/blog/2019/05/17/SWEII-TEST/</url>
      
        <content type="html"><![CDATA[<h3 id="4-types-of-coverage-in-testing"><a href="#4-types-of-coverage-in-testing" class="headerlink" title="4 types of coverage in testing"></a>4 types of coverage in testing</h3><a id="more"></a><p><img src="/blog/blog/2019/05/17/SWEII-TEST/1.jpg" alt="1"></p><hr><p><img src="/blog/blog/2019/05/17/SWEII-TEST/2.jpg" alt="2"></p><p>branch coverage&gt;statement coverage because it can examine empty else statement</p><hr><p><img src="/blog/blog/2019/05/17/SWEII-TEST/3.jpg" alt="3"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学校 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DSP_ConsistentModel_Ex</title>
      <link href="/blog/2019/05/17/DSP_ConsistenctModel/"/>
      <url>/blog/2019/05/17/DSP_ConsistenctModel/</url>
      
        <content type="html"><![CDATA[<h1 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h1><a id="more"></a><h1 id="P17"><a href="#P17" class="headerlink" title="P17"></a>P17</h1><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">VC</th><th style="text-align:center">LA</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td style="text-align:center">(1,0,0,0)</td><td style="text-align:center">1.1</td></tr><tr><td style="text-align:center">b</td><td style="text-align:center">(2,1,0,0)</td><td style="text-align:center">2.1</td></tr><tr><td style="text-align:center">c</td><td style="text-align:center">(3,1,0,0)</td><td style="text-align:center">3.1</td></tr><tr><td style="text-align:center">d</td><td style="text-align:center">(4,3,2,0)</td><td style="text-align:center">6.1</td></tr><tr><td style="text-align:center">e</td><td style="text-align:center">(5,5,2,2)</td><td style="text-align:center">7.1</td></tr><tr><td style="text-align:center">f</td><td style="text-align:center">(6,5,4,2)</td><td style="text-align:center">8.1</td></tr><tr><td style="text-align:center">g</td><td style="text-align:center">(7,5,4,2)</td><td style="text-align:center">9.1</td></tr><tr><td style="text-align:center">h</td><td style="text-align:center">(0,1,0,0)</td><td style="text-align:center">1.2</td></tr><tr><td style="text-align:center">i</td><td style="text-align:center">(1,2,1,0)</td><td style="text-align:center">3.2</td></tr><tr><td style="text-align:center">j</td><td style="text-align:center">(1,3,1,0)</td><td style="text-align:center">4.2</td></tr><tr><td style="text-align:center">k</td><td style="text-align:center">(1,4,1,2)</td><td style="text-align:center">5.2</td></tr><tr><td style="text-align:center">l</td><td style="text-align:center">(1,5,1,2)</td><td style="text-align:center">6.2</td></tr><tr><td style="text-align:center">m</td><td style="text-align:center">(4,6,2,4)</td><td style="text-align:center">9.2</td></tr><tr><td style="text-align:center">n</td><td style="text-align:center">(7,7,4,4)</td><td style="text-align:center">10.2</td></tr><tr><td style="text-align:center">o</td><td style="text-align:center">(1,0,1,0)</td><td style="text-align:center">2.3</td></tr><tr><td style="text-align:center">p</td><td style="text-align:center">(1,3,2,0)</td><td style="text-align:center">5.3</td></tr><tr><td style="text-align:center">q</td><td style="text-align:center">(3,3,3,0)</td><td style="text-align:center">6.3</td></tr><tr><td style="text-align:center">r</td><td style="text-align:center">(3,3,4,0)</td><td style="text-align:center">7.3</td></tr><tr><td style="text-align:center">s</td><td style="text-align:center">(1,0,0,1)</td><td style="text-align:center">2.4</td></tr><tr><td style="text-align:center">t</td><td style="text-align:center">(1,0,0,2)</td><td style="text-align:center">3.4</td></tr><tr><td style="text-align:center">u</td><td style="text-align:center">(4,3,2,3)</td><td style="text-align:center">7.4</td></tr><tr><td style="text-align:center">v</td><td style="text-align:center">(4,3,2,4)</td><td style="text-align:center">8.4</td></tr></tbody></table><blockquote><p>Total/Partial order</p></blockquote><ul><li>add process num the timestamp belongs</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Equicalence Partitioning Class</title>
      <link href="/blog/2019/05/02/EC/"/>
      <url>/blog/2019/05/02/EC/</url>
      
        <content type="html"><![CDATA[<p>在软件工程中，常常遇到测试数据不完全而不能有效地测试出bug的过程，这个时候需要对所有输出进行划分，同时在边界需要格外注意，多测试几组边界值。</p><ul><li>empty digits</li><li>characters</li></ul><ul><li>六位id的可写成 id = {num|num = (\d){6,6}}</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>ds5</title>
      <link href="/blog/2019/04/26/ds5/"/>
      <url>/blog/2019/04/26/ds5/</url>
      
        <content type="html"><![CDATA[<h1 id="4-26笔记"><a href="#4-26笔记" class="headerlink" title="4-26笔记"></a>4-26笔记</h1><a id="more"></a><h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><blockquote><p>fat client</p><ul><li>microsoft excel</li></ul></blockquote><blockquote><p>thin client</p><ul><li>automatioc flight check-in machine </li></ul></blockquote><h2 id="18"><a href="#18" class="headerlink" title="18"></a>18</h2><p>which is on client and which on server</p><h2 id="27"><a href="#27" class="headerlink" title="27"></a>27</h2><p>localhost：在计算机网络中，localhost（意为“本地主机”，指“这台计算机”）是给回路网络接口（loopback）的一个标准主机名，相对应的IP地址为127.0.0.1（IPv4）和[::1]（IPv6）。<br>127.0.0.1是回送地址，指本地机。<br>127.0.0.1是用来检测网络的自己的IP.就是说任何一台电脑来说,不管是否连接到INTERNET上,127.0.0.1对于自己来说都是自己.就是说,每台电脑都是由4位的256进制数组成的.<br>而192.168.1.102现在是本机，但本机也可以设置成其他ip地址，但127.0.0.1一定是指本机。</p><h2 id="JAVA-client-server-简单例子"><a href="#JAVA-client-server-简单例子" class="headerlink" title="JAVA client-server 简单例子"></a>JAVA client-server 简单例子</h2><h3 id="Socketclient-java"><a href="#Socketclient-java" class="headerlink" title="Socketclient.java"></a>Socketclient.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketClient</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> UnknownHostException, IOException </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">54321</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// get input stream</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// get output stream</span></span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line"><span class="comment">// write string into server</span></span><br><span class="line">ps.println(sc.nextLine());</span><br><span class="line"></span><br><span class="line"><span class="comment">// print the reversed string from server</span></span><br><span class="line">System.out.println(br.readLine());</span><br><span class="line"></span><br><span class="line">socket.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">-</span><br></pre></td></tr></table></figure><h3 id="SocketServer-java"><a href="#SocketServer-java" class="headerlink" title="SocketServer.java"></a>SocketServer.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketServer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">54321</span>);</span><br><span class="line">System.out.println(<span class="string">"Server is on, binded to 54321 port"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">final</span> Socket socket = server.accept();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// get the input stream</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">String line = br.readLine();</span><br><span class="line">line = <span class="keyword">new</span> StringBuilder(line).reverse().toString();</span><br><span class="line">ps.println(line);</span><br><span class="line">socket.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学校 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java基础</title>
      <link href="/blog/2019/04/22/java%E5%9F%BA%E7%A1%80/"/>
      <url>/blog/2019/04/22/java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA-入门到放弃"><a href="#JAVA-入门到放弃" class="headerlink" title="JAVA 入门到放弃"></a>JAVA 入门到放弃</h1><a id="more"></a><h2 id="Access-modifiers-specifiers-in-java"><a href="#Access-modifiers-specifiers-in-java" class="headerlink" title="Access modifiers(specifiers) in java"></a>Access modifiers(specifiers) in java</h2><hr><h3 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h3><ul><li>基类的 protected 成员是包内可见的，并且对子类可见；</li><li>若子类与基类不在同一包中，那么在子类中，子类实例可以访问其从基类继承而来的protected方法，而不能访问基类实例的protected方法。</li></ul><p><a href="https://blog.csdn.net/justloveyou_/article/details/61672133" target="_blank" rel="noopener">detail</a></p><hr><h3 id="overload"><a href="#overload" class="headerlink" title="overload"></a>overload</h3><p>each overloaded method must take a unique list of the argument types</p><hr><h3 id="override"><a href="#override" class="headerlink" title="override"></a>override</h3><p>（1）重写方法必须和被重写方法具有相同的参数列表（包括顺序及个数还有类型），返回类型必须和被重写方法的返回类型相同或者是返回类型的子类型。</p><p>（2）重写方法的访问控制修饰符不能比被重写方法更严格（比如一个在父类中声明为public的方法重写成一个protected的方法）。</p><p>（3）只有实例方法才能被重写，超类中的static和final方法不能被重写。</p><p>（4）重写方法不能抛出新的检查异常，或者是抛出比被重写方法声明的检查异常更广泛的检查异常。</p><p>（5）注意一种特殊情况：如果超类的方法版本中声明了检查异常，但重写的子类方法中没有声明，这时如果使用多态的方式进行调用，那么编译器认为你调用的是声明了异常的方法。</p><p>（6）尽管多态是在编译时确定对象的类型，但在编译时，还是根据父类的方法声明进行程序检查。因此，如果子类中定义的方法，在父类中没有定义，则会出项编译错误。</p><hr><h3 id="upcast"><a href="#upcast" class="headerlink" title="upcast"></a>upcast</h3><p>the act of converting a subclass reference into a baseclass reference</p><p>缺点：使用向上转型时不能调用子类特有的方法了</p><p>优点：一个父类有多个子类时，一个子类重写了许多父类的方法，可以声明一个public static函数统一对<br>每个属于父类的子类进行操作，节省代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spycsh</span></span><br><span class="line"><span class="comment"> * 2019-04-28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String carDescription = <span class="string">"Car"</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"父类run方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"父类speed方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> carDescription;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Benz</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Benz:run方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Benz:speed方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMW</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"BMW:run方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"BMW:speed方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Porsche</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String carDescription = <span class="string">"Porsche is the best!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Porche:run方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Porche:speed方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Porche:price方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> carDescription;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpcastEX</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> car</span></span><br><span class="line"><span class="comment"> *  !upcast</span></span><br><span class="line"><span class="comment"> *  without upcast you need to define show method for each car brand</span></span><br><span class="line"><span class="comment"> *  save code amount</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">car.run();</span><br><span class="line">car.speed();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showAll</span><span class="params">(Car[] e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(Car i:e) &#123;</span><br><span class="line">show(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Car[] carFleet = &#123;</span><br><span class="line"><span class="keyword">new</span> Benz(),</span><br><span class="line"><span class="keyword">new</span> BMW(),</span><br><span class="line"><span class="keyword">new</span> Porsche()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">showAll(carFleet);</span><br><span class="line"></span><br><span class="line">Car porsche911 = <span class="keyword">new</span> Porsche();</span><br><span class="line"><span class="comment">//porsche911.price();  // ERROR</span></span><br><span class="line"><span class="comment">// !cannot be implemented because of upcasting!</span></span><br><span class="line"><span class="comment">// baseclass don`t define price()!</span></span><br><span class="line">        </span><br><span class="line">                System.out.println(<span class="string">"test getDescription:"</span>);</span><br><span class="line"><span class="comment">// show that although upcasting, field are accessed</span></span><br><span class="line"><span class="comment">// in subclass, not baseclass.</span></span><br><span class="line">System.out.println(porsche911.getDescription());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>OUTPUT</p></blockquote><p>Benz:run方法</p><p>Benz:speed方法</p><p>BMW:run方法</p><p>BMW:speed方法</p><p>Porche:run方法</p><p>Porche:speed方法</p><p>test getDescription:</p><p>Porsche is the best!</p><hr><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>static修饰方法 静态方法 属于类的方法 即访问它不需要实例对象就能访问</p><hr><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><h4 id="static-final修饰data"><a href="#static-final修饰data" class="headerlink" title="static, final修饰data"></a>static, final修饰data</h4><blockquote><p>static 强调只有一份，final 说明是一个常量，final定义的基本类型(primitive)的值是不可改变的，但是fianl定义的引用对象的值是可以改变的</p></blockquote><p>只申明final，每次new产生不同的对象<br>static, final一起使用时，只有一块存储地址<br>申明static final，每次new产生相同对象</p><h4 id="final修饰methods"><a href="#final修饰methods" class="headerlink" title="final修饰methods"></a>final修饰methods</h4><blockquote><p>把方法锁定，确保在继承中使用方法行为不变，并且不会被覆盖<br>其二是效率，如果一个方法指明为final，就是同意编译器将针对该方法的所有调用都转为内嵌调用。 转为内嵌调用的目的是节省开销，因为编译器发现一个final方法调用命令时，会跳过程序代码这种正常方式而执行方法调用机制（将参数压入栈，跳至方法代码处并执行，然后跳回并清理栈中的参数，处理返回值），并且以方法体中的实际代码的副本来替代方法调用。但是如果一个方法很大，程序很膨胀，就会看不到内嵌带来的任何性能的提高。</p></blockquote><h4 id="final修饰类"><a href="#final修饰类" class="headerlink" title="final修饰类"></a>final修饰类</h4><blockquote><p>当某个类的整体定义为final时，表明该类不能被继承，方法不能被覆盖，且final类中的所有方法都隐式指定为是final的，方法声明为final后还可以有效地“关闭”动态绑定。</p></blockquote><hr><h3 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h3><!-- ![0](补天/collections.png) --><p><img src="https://github.com/Spycsh/blog/blob/master/images/%E8%A1%A5%E5%A4%A9/collections.png?raw=true"></p><hr><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><!-- ![1](补天/synchronize.png) --><p><img src="https://github.com/Spycsh/blog/blob/master/images/%E8%A1%A5%E5%A4%A9/synchronize.png?raw=true"></p><h3 id="修饰代码块，其他试图访问该对象的线程阻塞"><a href="#修饰代码块，其他试图访问该对象的线程阻塞" class="headerlink" title="修饰代码块，其他试图访问该对象的线程阻塞"></a>修饰代码块，其他试图访问该对象的线程阻塞</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="comment">// 同步代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象作为锁"><a href="#对象作为锁" class="headerlink" title="对象作为锁"></a>对象作为锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (account) &#123;</span><br><span class="line"><span class="comment">// 同步代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="没有明确的对象作为锁"><a href="#没有明确的对象作为锁" class="headerlink" title="没有明确的对象作为锁"></a>没有明确的对象作为锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">byte</span>[] lock = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];  <span class="comment">// 特殊的instance变量</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">synchronized</span>(lock) &#123;</span><br><span class="line">         <span class="comment">// todo 同步代码块</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/luoweifu/article/details/46613015" target="_blank" rel="noopener">参考资料</a></p><p><a href="https://www.cnblogs.com/moongeek/p/7631447.html" target="_blank" rel="noopener">消费者-生产者例子</a></p><hr><h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h2><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用匿名内部类  </span></span><br><span class="line">btn.setOnAction(<span class="keyword">new</span> EventHandler&lt;ActionEvent&gt;() &#123;  </span><br><span class="line">          <span class="meta">@Override</span>  </span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(ActionEvent event)</span> </span>&#123;  </span><br><span class="line">              System.out.println(<span class="string">"Hello World!"</span>);   </span><br><span class="line">          &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line">   </span><br><span class="line"><span class="comment">// 或者使用 lambda expression  </span></span><br><span class="line">btn.setOnAction(event -&gt; System.out.println(<span class="string">"Hello World!"</span>));</span><br></pre></td></tr></table></figure><h3 id="排序，线程，集合用法"><a href="#排序，线程，集合用法" class="headerlink" title="排序，线程，集合用法"></a>排序，线程，集合用法</h3><p><a href="https://www.cnblogs.com/franson-2016/p/5593080.html" target="_blank" rel="noopener">参考资料</a></p><hr><h3 id="LinkedList-和-ArrayList-区别"><a href="#LinkedList-和-ArrayList-区别" class="headerlink" title="LinkedList 和 ArrayList 区别"></a>LinkedList 和 ArrayList 区别</h3><p>LinkedList插入元素（任意位置只要断开链接再与新元素链接即可）很快，但访问中间元素需要从头或从尾开始遍历，很慢。<br>ArrayList插入元素很慢，它需要更新一遍数组，但访问元素只需要给出索引，相对较快。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>ds4</title>
      <link href="/blog/2019/04/12/ds4/"/>
      <url>/blog/2019/04/12/ds4/</url>
      
        <content type="html"><![CDATA[<h1 id="2019-04-12-笔记"><a href="#2019-04-12-笔记" class="headerlink" title="2019-04-12 笔记"></a>2019-04-12 笔记</h1><a id="more"></a><p><br><br><div class="row">    <embed src="DistSys4.pdf" width="100%" height="550" type="application/pdf"></div><br><br></p><h1 id="File-IO-operation"><a href="#File-IO-operation" class="headerlink" title="File IO operation"></a>File IO operation</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spycsh ●int countLines(): count line amount of file ●void print():</span></span><br><span class="line"><span class="comment"> *         print file on command line ●void copy(String filename): copy file</span></span><br><span class="line"><span class="comment"> *         content to the file ‘filename’ ●void delete(): delete the file ●void</span></span><br><span class="line"><span class="comment"> *         printDirectory(): prints the file directory ●List&lt;String&gt;</span></span><br><span class="line"><span class="comment"> *         getOtherFiles(): returns list of other files in same directory as</span></span><br><span class="line"><span class="comment"> *         file Addtionally, create a test class which demonstrates the</span></span><br><span class="line"><span class="comment"> *         functionality of your IOFile class!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileIo</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">FileIo(String fileName) &#123;</span><br><span class="line"><span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countLines</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line"><span class="keyword">int</span> lineNum = <span class="number">1</span>;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="keyword">this</span>.fileName);</span><br><span class="line">FileReader fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line"><span class="keyword">char</span>[] a = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">500</span>];</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">fr.read(a);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> c : a) &#123;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'\n'</span>)</span><br><span class="line">lineNum += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lineNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="keyword">this</span>.fileName);</span><br><span class="line">FileReader fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line"><span class="keyword">char</span>[] a = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">500</span>];</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">fr.read(a);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> c : a) &#123;</span><br><span class="line">System.out.print(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// create a new destination file with the filename</span></span><br><span class="line">File copyfile = <span class="keyword">new</span> File(filename);</span><br><span class="line">copyfile.createNewFile();</span><br><span class="line">FileWriter fw = <span class="keyword">new</span> FileWriter(copyfile);</span><br><span class="line"><span class="comment">// Read the source file</span></span><br><span class="line">File sourcefile = <span class="keyword">new</span> File(<span class="keyword">this</span>.fileName);</span><br><span class="line">FileReader fr = <span class="keyword">new</span> FileReader(sourcefile);</span><br><span class="line"><span class="keyword">char</span>[] a = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">500</span>];</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">fr.read(a);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> c : a) &#123;</span><br><span class="line">fw.write(c);</span><br><span class="line">&#125;</span><br><span class="line">fr.close();</span><br><span class="line">fw.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="keyword">this</span>.fileName);</span><br><span class="line">file.delete();</span><br><span class="line"><span class="keyword">if</span> (file.exists() == <span class="keyword">true</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"delete fail!"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"delete success!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDirectory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="keyword">this</span>.fileName);</span><br><span class="line">System.out.println(file.getParent());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;String&gt; <span class="title">getOtherFiles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; anotherFile = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">// first we should get the directory</span></span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="keyword">this</span>.fileName);</span><br><span class="line">String directoryStr = file.getParent();</span><br><span class="line"></span><br><span class="line">File directory = <span class="keyword">new</span> File(directoryStr);</span><br><span class="line"></span><br><span class="line">String[] allfile = directory.list();</span><br><span class="line"><span class="keyword">for</span> (String f : allfile) &#123;</span><br><span class="line"><span class="comment">// filter given file</span></span><br><span class="line"><span class="comment">// We should use equals rather than ==</span></span><br><span class="line"><span class="comment">// because we just need to filter</span></span><br><span class="line"><span class="comment">// by comparing content</span></span><br><span class="line"><span class="keyword">if</span> (!f.equals(file.getName()))</span><br><span class="line">anotherFile.add(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> anotherFile;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学校 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SWE</title>
      <link href="/blog/2019/04/11/SWE/"/>
      <url>/blog/2019/04/11/SWE/</url>
      
        <content type="html"><![CDATA[<h1 id="2019-04-09-笔记"><a href="#2019-04-09-笔记" class="headerlink" title="2019-04-09 笔记"></a>2019-04-09 笔记</h1><a id="more"></a><p><br><br><div class="row">    <embed src="SEII3UsabilityEngineeringProject.pdf" width="100%" height="550" type="application/pdf"></div><br><br></p><h1 id="14"><a href="#14" class="headerlink" title="14"></a>14</h1><ul><li>Social acceptability: base on culture and region</li></ul><h1 id="SWING"><a href="#SWING" class="headerlink" title="SWING"></a>SWING</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Button;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.CheckBox;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spycsh</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitHodgepodge</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">JFrame f = <span class="keyword">new</span> JFrame();</span><br><span class="line">f.setSize(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line">f.setTitle(<span class="string">"FruitOrder"</span>);</span><br><span class="line"></span><br><span class="line">JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; allFruitList = <span class="keyword">new</span> HashSet&lt;String&gt;(); <span class="comment">// display all fruit choosed</span></span><br><span class="line"></span><br><span class="line">f.getContentPane().setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line"><span class="comment">//f.add("Nor", new Button("Nor"));</span></span><br><span class="line"></span><br><span class="line">LinkedList&lt;String&gt; boxList = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">Collections.addAll(boxList, <span class="string">"apple banana kiwi orange melon grape"</span>.split(<span class="string">" "</span>));</span><br><span class="line"></span><br><span class="line">JCheckBox[] cbs = <span class="keyword">new</span> JCheckBox[boxList.size()];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; boxList.size(); i++) &#123;</span><br><span class="line">JCheckBox cb = cbs[i] = <span class="keyword">new</span> JCheckBox(boxList.get(i));</span><br><span class="line"></span><br><span class="line">cb.addChangeListener(<span class="keyword">new</span> ChangeListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(ChangeEvent e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get the event source( checkbox itself)</span></span><br><span class="line">JCheckBox checkBox = (JCheckBox) e.getSource();</span><br><span class="line">System.out.println(checkBox.getText() + <span class="string">" 是否选中: "</span> + checkBox.isSelected());</span><br><span class="line"><span class="keyword">if</span> (checkBox.isSelected())</span><br><span class="line">allFruitList.add(checkBox.getText());</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">allFruitList.remove(checkBox.getText());</span><br><span class="line">System.out.println(allFruitList);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">panel.add(cb);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">JButton btn = <span class="keyword">new</span> JButton();</span><br><span class="line">btn.setText(<span class="string">"Display the order!"</span>);</span><br><span class="line">btn.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">JOptionPane testOpt = <span class="keyword">new</span> JOptionPane();</span><br><span class="line">testOpt.showMessageDialog(<span class="keyword">new</span> JFrame(), <span class="string">"Your oder:"</span> + <span class="string">"\n"</span> + allFruitList);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">panel.add(btn);</span><br><span class="line"></span><br><span class="line">f.setContentPane(panel); <span class="comment">//</span></span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JAVAFX"><a href="#JAVAFX" class="headerlink" title="JAVAFX"></a>JAVAFX</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> application;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spycsh</span></span><br><span class="line"><span class="comment"> * Main window: user can choose from 6 different fruits</span></span><br><span class="line"><span class="comment"> * After confirming the choice of fruits another window will pop up and tell the user the choice of fruits</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.BorderPane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.scene.Group;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.CheckBox;</span><br><span class="line"><span class="keyword">import</span> javafx.beans.value.ChangeListener;</span><br><span class="line"><span class="keyword">import</span> javafx.beans.value.ObservableValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.GridPane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Button;</span><br><span class="line"><span class="keyword">import</span> javafx.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> javafx.event.EventHandler;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.text.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitHodgepodge</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Stage primaryStage)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BorderPane root = <span class="keyword">new</span> BorderPane();</span><br><span class="line"></span><br><span class="line">GridPane gp = <span class="keyword">new</span> GridPane();</span><br><span class="line">Scene scene = <span class="keyword">new</span> Scene(gp, <span class="number">500</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">LinkedList&lt;String&gt; boxList = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">Collections.addAll(boxList, <span class="string">"apple banana kiwi orange melon grape"</span>.split(<span class="string">" "</span>));</span><br><span class="line"></span><br><span class="line">CheckBox[] cbs = <span class="keyword">new</span> CheckBox[boxList.size()];</span><br><span class="line">LinkedList&lt;String&gt; allFruitList = <span class="keyword">new</span> LinkedList&lt;String&gt;(); <span class="comment">// display all fruit choosed</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// final CheckBox cb;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; boxList.size(); i++) &#123;</span><br><span class="line"><span class="comment">//            cbs[i] = boxList.poll();</span></span><br><span class="line">CheckBox cb = cbs[i] = <span class="keyword">new</span> CheckBox(boxList.get(i));</span><br><span class="line"></span><br><span class="line"><span class="comment">//            final CheckBox cb0 = new CheckBox("checkBox");</span></span><br><span class="line"><span class="comment">//            final CheckBox cb1 = new CheckBox("aa");</span></span><br><span class="line"></span><br><span class="line">cb.selectedProperty().addListener(<span class="keyword">new</span> ChangeListener&lt;Boolean&gt;() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changed</span><span class="params">(ObservableValue&lt;? extends Boolean&gt; ov, Boolean old_val, Boolean new_val)</span> </span>&#123;</span><br><span class="line"><span class="comment">//            System.out.println(cb.isSelected());&#125;</span></span><br><span class="line"><span class="keyword">if</span> (new_val) &#123;</span><br><span class="line">allFruitList.offer(cb.getText());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">allFruitList.remove(cb.getText());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(allFruitList);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">gp.add(cb, <span class="number">0</span>, i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Button btn = <span class="keyword">new</span> Button();</span><br><span class="line">btn.setText(<span class="string">"Display the order!"</span>);</span><br><span class="line">btn.setOnAction(<span class="keyword">new</span> EventHandler&lt;ActionEvent&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(ActionEvent event)</span> </span>&#123;</span><br><span class="line">Group root = <span class="keyword">new</span> Group();</span><br><span class="line">Scene scene = <span class="keyword">new</span> Scene(root, <span class="number">300</span>, <span class="number">250</span>);</span><br><span class="line"><span class="comment">//Stage stg = new Stage();</span></span><br><span class="line"><span class="comment">//System.out.println((String)allFruitList.toString());</span></span><br><span class="line"><span class="comment">//Pattern pattern = Pattern.compile("'(\\D+)'");</span></span><br><span class="line"><span class="comment">//String i = (String)allFruitList.toString();</span></span><br><span class="line"><span class="comment">//Matcher m = pattern.matcher(i);</span></span><br><span class="line"><span class="comment">//if (m.find())&#123;</span></span><br><span class="line"><span class="comment">//Text text = new Text(100, 100, m.group(1));</span></span><br><span class="line"><span class="comment">//root.getChildren().add(text);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//String[] arr = allFruitList.toString().split("'");</span></span><br><span class="line">System.out.println();</span><br><span class="line">String orderString = <span class="keyword">new</span> String();</span><br><span class="line"><span class="keyword">for</span> (String s : allFruitList) &#123;</span><br><span class="line">orderString += s + <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">Text text = <span class="keyword">new</span> Text(<span class="number">100</span>, <span class="number">100</span>, <span class="string">"final order:"</span> + <span class="string">"\n"</span> + orderString);</span><br><span class="line">root.getChildren().add(text);</span><br><span class="line">primaryStage.setScene(scene);</span><br><span class="line">primaryStage.show();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gp.add(btn, <span class="number">10</span>, <span class="number">0</span>); <span class="comment">// place the button</span></span><br><span class="line"></span><br><span class="line">scene.getStylesheets().add(getClass().getResource(<span class="string">"application.css"</span>).toExternalForm());</span><br><span class="line"></span><br><span class="line">primaryStage.setScene(scene);</span><br><span class="line">primaryStage.show();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">launch(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学校 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ds3h</title>
      <link href="/blog/2019/04/09/ds3h/"/>
      <url>/blog/2019/04/09/ds3h/</url>
      
        <content type="html"><![CDATA[<h1 id="2019-04-09-笔记"><a href="#2019-04-09-笔记" class="headerlink" title="2019-04-09 笔记"></a>2019-04-09 笔记</h1><a id="more"></a><p><br><br><div class="row">    <embed src="my_ds01_Introduction.pdf" width="100%" height="550" type="application/pdf"></div><br><br></p><h2 id="P16"><a href="#P16" class="headerlink" title="P16"></a>P16</h2><blockquote><p>What does a ds do?</p></blockquote><ul><li>share hardwares, software and data</li><li>let computers coordinate and synchronize</li><li>offer users an integrated computing facility not limited by location</li></ul><h2 id="P17"><a href="#P17" class="headerlink" title="P17"></a>P17</h2><blockquote><p>What is the essetial part?</p></blockquote><ul><li>auto scaling &amp; load balance</li><li>城市规划例子,when a computer is broken, it will be slower for the system implementation because of the boundary computation which counts on the coordinations one and another computers, so as for synchronization the system have to wait for the slowest computer, with heavier load than others, to process.</li></ul><h2 id="P18"><a href="#P18" class="headerlink" title="P18"></a>P18</h2><ul><li><p>(b) filters the redundant info and ensure the useful info procured to minimum.</p></li><li><p>(b) will have a higher speed of response.</p></li></ul><h2 id="P26"><a href="#P26" class="headerlink" title="P26"></a>P26</h2><blockquote><p>What is Mobility Transparency?</p></blockquote><ul><li>eg. Stream serialize deserialize</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学校 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>eigen-everthing</title>
      <link href="/blog/2019/04/08/eigen-everthing/"/>
      <url>/blog/2019/04/08/eigen-everthing/</url>
      
        <content type="html"><![CDATA[<h2 id="brief-introduction-of-eigenvalue-and-eigenvector-in-linear-algebra"><a href="#brief-introduction-of-eigenvalue-and-eigenvector-in-linear-algebra" class="headerlink" title="brief introduction of eigenvalue and eigenvector in linear algebra"></a>brief introduction of eigenvalue and eigenvector in linear algebra</h2><a id="more"></a><!-- ![0](eigen-everthing/0.jpg) --><p><img src="https://github.com/Spycsh/blog/blob/master/images/eigen-everthing/0.jpg?raw=true"></p><ul><li><p>determinant 行列式</p></li><li><p>eigenvalue特征值/eigenvector特征向量/eigenspace特征空间(all of the eigenvectors that correspond the eigrnvalue)</p></li><li><p>null space</p></li><li><p>nontrival</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ds2</title>
      <link href="/blog/2019/04/05/ds2/"/>
      <url>/blog/2019/04/05/ds2/</url>
      
        <content type="html"><![CDATA[<h1 id="2019-04-05-笔记"><a href="#2019-04-05-笔记" class="headerlink" title="2019-04-05 笔记"></a>2019-04-05 笔记</h1><a id="more"></a><p><br><br><div class="row">    <embed src="DistSys-2-2019.pdf" width="100%" height="550" type="application/pdf"></div><br><br></p><!-- name the pdf should not comprise space! --><ul><li>make every attribute private and Use getter and setter to access them </li></ul><h2 id="Communication-of-DS"><a href="#Communication-of-DS" class="headerlink" title="Communication of DS"></a>Communication of DS</h2><ul><li><p>synchronous: The sender may block activity until acknowledgement from receiver</p></li><li><p>big-endian大端法 small-endian小端法</p></li><li><p>ASCII, Unicode</p></li><li><p>external data representation and marshalling</p></li></ul><blockquote><p>alternative method</p></blockquote><h2 id="Streams"><a href="#Streams" class="headerlink" title="Streams"></a>Streams</h2><h3 id="note"><a href="#note" class="headerlink" title="note"></a>note</h3><ul><li>transforming in bytes and characters</li></ul><blockquote><p>encoded in unicode, must be 2 bytes not 1</p></blockquote><p>class Employee implements Serializable(In China)<br>-&gt; Seralization-&gt;deserialization-&gt;class Employee(In luebeck)</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>说明：建立一个Student类，把它用Stream的方式serialize再deserialize,<br>从而实现信息的传输。</p><p><img src="https://github.com/Spycsh/blog/blob/master/images/ds2/1.jpg?raw=true"></p><h4 id="定义Student类"><a href="#定义Student类" class="headerlink" title="定义Student类"></a>定义Student类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> studentNumber;</span><br><span class="line"><span class="keyword">private</span> String degreeCourse;</span><br><span class="line"></span><br><span class="line">Student(<span class="keyword">int</span> studentNumber, String degreeCourse) &#123;</span><br><span class="line"><span class="keyword">this</span>.studentNumber = studentNumber;</span><br><span class="line"><span class="keyword">this</span>.degreeCourse = degreeCourse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"studentNumber:"</span> + studentNumber + <span class="string">" "</span> + <span class="string">"degreeCourse:"</span> + degreeCourse;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="serialize过程"><a href="#serialize过程" class="headerlink" title="serialize过程"></a>serialize过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSerializing</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"test"</span>);</span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line"></span><br><span class="line">Student chen = <span class="keyword">new</span> Student(<span class="number">12</span>, <span class="string">"ITB"</span>);</span><br><span class="line">oos.writeObject(chen);</span><br><span class="line">oos.close();</span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="deserialize过程"><a href="#deserialize过程" class="headerlink" title="deserialize过程"></a>deserialize过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDeserialize</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">FileInputStream fos = <span class="keyword">new</span> FileInputStream(<span class="string">"test"</span>);</span><br><span class="line">ObjectInputStream oos = <span class="keyword">new</span> ObjectInputStream(fos);</span><br><span class="line">Student aStudent = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">aStudent = (Student) oos.readObject();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(aStudent.toString());</span><br><span class="line">oos.close();</span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>test文件中显示乱码，是serialize后的字符流<br>deserialize后通过自己定义的toString打印可以输出原来的信息</p><h4 id="疑难"><a href="#疑难" class="headerlink" title="疑难"></a>疑难</h4><ul><li>test文件建在项目文件夹而不是src文件夹下</li><li><blockquote><p>使用ObjectInputStream反序列化的时候，ObjeectInputStream会先读取文件中的serialVersionUID，然后与本地的class文件的serialVersionUID<br>进行对比，如果这两个id不一致，反序列则失败</p></blockquote></li></ul><p>因此在Student class中定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br></pre></td></tr></table></figure><p>即可</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.cnblogs.com/fnz0/p/5410856.html" target="_blank" rel="noopener">Source</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学校 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Eclipse 高效代码</title>
      <link href="/blog/2019/04/04/Eclipse%E7%AE%80%E6%B4%81%E4%BB%A3%E7%A0%81/"/>
      <url>/blog/2019/04/04/Eclipse%E7%AE%80%E6%B4%81%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Eclipse-use-amp-code-convention"><a href="#Eclipse-use-amp-code-convention" class="headerlink" title="Eclipse use &amp; code convention"></a>Eclipse use &amp; code convention</h1><a id="more"></a><h2 id="Eclipse-use"><a href="#Eclipse-use" class="headerlink" title="Eclipse use"></a>Eclipse use</h2><h3 id="项目导出压缩包"><a href="#项目导出压缩包" class="headerlink" title="项目导出压缩包"></a>项目导出压缩包</h3><p>File-&gt;Export-&gt;General-&gt;选择要压缩的类型</p><h3 id="修改缩进等格式-CTRL-SHIFT-F"><a href="#修改缩进等格式-CTRL-SHIFT-F" class="headerlink" title="修改缩进等格式(CTRL+SHIFT+F)"></a>修改缩进等格式(CTRL+SHIFT+F)</h3><p>选中代码-&gt;Source-&gt;Format</p><h3 id="添加javadoc注释（ALT-SHIFT-J"><a href="#添加javadoc注释（ALT-SHIFT-J" class="headerlink" title="添加javadoc注释（ALT+SHIFT+J)"></a>添加javadoc注释（ALT+SHIFT+J)</h3><p>选中元素-&gt;Source-&gt;Generate Element Comment</p><h3 id="改名-ALT-SHIFT-R"><a href="#改名-ALT-SHIFT-R" class="headerlink" title="改名(ALT+SHIFT+R)"></a>改名(ALT+SHIFT+R)</h3><p>选中需要改名的元素-&gt;右键Refactor-&gt;Rename<br>.将会修改文件中所有有这个名字的元素 </p><h3 id="生成javadoc"><a href="#生成javadoc" class="headerlink" title="生成javadoc"></a>生成javadoc</h3><h2 id="code-convention"><a href="#code-convention" class="headerlink" title="code convention"></a>code convention</h2><p><a href="https://www.oracle.com/technetwork/java/codeconventions-150003.pdf" target="_blank" rel="noopener">java code convention</a></p><blockquote><ul><li>Javadoc comment<blockquote><ul><li>Header/Classes</li><li>Functions</li></ul></blockquote></li><li>Name<blockquote><ul><li>Package: student</li><li>Class&amp;Inteface: Student</li><li>variable&amp;method: inputFileSize</li><li>constant:MAXWEIGHT</li></ul></blockquote></li><li>Layout/indentation</li><li>Space</li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Information about application for master degree</title>
      <link href="/blog/2019/03/19/Master/"/>
      <url>/blog/2019/03/19/Master/</url>
      
        <content type="html"><![CDATA[<h1 id="德电160硕士申请"><a href="#德电160硕士申请" class="headerlink" title="德电160硕士申请"></a>德电160硕士申请</h1><a id="more"></a><h2 id="德国"><a href="#德国" class="headerlink" title="德国"></a>德国</h2><h3 id="信息表"><a href="#信息表" class="headerlink" title="信息表"></a>信息表</h3><table><thead><tr><th style="text-align:center">大学名</th><th style="text-align:center">相关专业名称</th><th style="text-align:center">地点</th><th style="text-align:center">绩点要求</th><th style="text-align:center">托福/GRE要求</th><th style="text-align:center">申请截止日期</th><th style="text-align:center">评价</th></tr></thead><tbody><tr><td style="text-align:center"><a href="http://www.rwth-aachen.de/cms/root/Studium/Vor-dem-Studium/Zugangsvoraussetzungen/~ddxf/Zugangsvoraussetzungen-fuer-den-Master/lidx/1/" target="_blank" rel="noopener">亚琛工业大学</a></td><td style="text-align:center"><a href="http://www.rwth-aachen.de/go/id/bowk?lidx=1#aaaaaaaaaaabowl" target="_blank" rel="noopener">Media Infomatics（多媒体信息）</a></td><td style="text-align:center">波恩&amp;亚琛</td><td style="text-align:center"></td><td style="text-align:center">托福90</td><td style="text-align:center">3.1</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://www.rwth-aachen.de/go/id/bngt?lidx=1#aaaaaaaaaaabngu" target="_blank" rel="noopener">EE,IT,CE</a></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">托福90 GREverbal超过%15，quantitive超过%75</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="http://www.e-technik.tu-dortmund.de/cms1/de/Lehre_Studium/Studienangebot/Master_A_R/Master_A_R_en/Application_Bewerbung/index.html" target="_blank" rel="noopener">Dortmund 大学</a></td><td style="text-align:center">机器人自动化</td><td style="text-align:center">Dortmund</td><td style="text-align:center"></td><td style="text-align:center">80</td><td style="text-align:center">3.31</td><td style="text-align:center">机器人研究方面很强</td></tr><tr><td style="text-align:center">慕尼黑工业大学</td><td style="text-align:center">ECE</td><td style="text-align:center">慕尼黑</td><td style="text-align:center">3.5+</td><td style="text-align:center">88</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">斯图加特大学</td><td style="text-align:center">infomation technology <a href="https://www.infotech.uni-stuttgart.de/application/index.html" target="_blank" rel="noopener">官网</a> <a href="https://www.daad.de/deutschland/studienangebote/international-programmes/en/detail/3677/" target="_blank" rel="noopener">DAAD网址</a></td><td style="text-align:center">Stuttgart</td><td style="text-align:center">70%ofbest-on-scale, e.g.70%/100%; 2.8/4; 2.5/1.0 (for German Marks)</td><td style="text-align:center">托福80</td><td style="text-align:center">2.15</td><td style="text-align:center">EU citizens do not pay tuition, whereas non-EU citizens pay a tuition of 1,500 EUR per semester.（有学费要求）</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">Computer Science <a href="https://www.informatik.uni-stuttgart.de/studium/interessierte/msc-studiengaenge/msc-computer-science/admission/index.html" target="_blank" rel="noopener">官网</a> <a href="https://www.daad.de/deutschland/studienangebote/international-programmes/en/detail/4439/#tab_overview" target="_blank" rel="noopener">DAAD网址</a></td><td style="text-align:center"></td><td style="text-align:center">无</td><td style="text-align:center">托福80</td><td style="text-align:center">2.15（winter semester） 6.15(summer semester)</td><td style="text-align:center">Bachelor’s degree with a programme duration of at least six semesters in computer science, software engineering, or in a closely related subject(专业匹配度可能较低)EU citizens do not pay tuition, whereas non-EU citizens pay a tuition of 1,500 EUR per semester.（有学费要求）</td></tr><tr><td style="text-align:center">Saarland University萨尔大学</td><td style="text-align:center">Saarbrücken Graduate School of Computer Science</td><td style="text-align:center">Saarbrücken</td><td style="text-align:center">75%以上</td><td style="text-align:center">推荐GRE，托福95/120</td><td style="text-align:center">11/15；根据专业</td><td style="text-align:center">不用学费，强在：马普所，视觉信息但毕业很难，挂科率极高</td></tr><tr><td style="text-align:center">Saarland University萨尔大学<a href="https://www.daad.de/deutschland/studienangebote/international-programmes/en/result/?q=Saarland&amp;degree%5B%5D=&amp;lang%5B%5D=2&amp;fos=&amp;crossFac=&amp;cert=&amp;admReq=&amp;scholarshipLC=&amp;scholarshipSC=&amp;langDeAvailable=&amp;langEnAvailable=&amp;lvlEn%5B%5D=&amp;cit%5B%5D=&amp;tyi%5B%5D=&amp;ins%5B%5D=&amp;fee=&amp;bgn%5B%5D=&amp;dur%5B%5D=&amp;sort=4&amp;subjects%5B%5D=&amp;limit=10&amp;offset=10&amp;display=list" target="_blank" rel="noopener">DAAD网址</a></td><td style="text-align:center">Visual Computing (MSc)</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Saarland University萨尔大学</td><td style="text-align:center">Embedded Systems (MSc)</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Saarland University萨尔大学</td><td style="text-align:center">Mathematics and Computer Science (MSc)</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Saarland University萨尔大学</td><td style="text-align:center">Computer Science (MSc)</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">KIT</td><td style="text-align:center">EEM,FE,MPD,MSEM,POM,ISEM</td><td style="text-align:center">Karlsruhe</td><td style="text-align:center"></td><td style="text-align:center">托福90</td><td style="text-align:center">1/15</td><td style="text-align:center">30000欧</td></tr></tbody></table><h3 id="基本简介"><a href="#基本简介" class="headerlink" title="基本简介"></a>基本简介</h3><h4 id="学校概览"><a href="#学校概览" class="headerlink" title="学校概览"></a>学校概览</h4><!-- ![0](Master/德国学校.jpg) --><p><img src="https://github.com/Spycsh/blog/blob/master/images/Master/%E5%BE%B7%E5%9B%BD%E5%AD%A6%E6%A0%A1.jpg?raw=true"></p><h4 id="11所精英大学"><a href="#11所精英大学" class="headerlink" title="11所精英大学"></a>11所精英大学</h4><blockquote><p>理工类3所（慕尼黑工业大学、德累斯顿工业大学、亚琛工业大学），文理类8所<br>（海德堡大学、 柏林自由大学、柏林洪堡大学、慕尼黑大学、图宾根大学、康斯坦茨大学、科隆大学、不莱梅大学）</p></blockquote><!-- ![1](Master/精英大学.png) --><p><img src="https://github.com/Spycsh/blog/blob/master/images/Master/%E7%B2%BE%E8%8B%B1%E5%A4%A7%E5%AD%A6.png?raw=true"></p><blockquote><p>大学名称对应</p></blockquote><!-- ![2](Master/name.png) --><p><img src="https://github.com/Spycsh/blog/blob/master/images/Master/name.png?raw=true"></p><h4 id="TU9"><a href="#TU9" class="headerlink" title="TU9"></a>TU9</h4><blockquote><p>九所德国大学，包括亚琛工业大学RWTH Aachen, 柏林工业大学TU Berlin, 不伦瑞克工业大学TU Braunschweig, 达姆施达特工业大学TU Darmstadt,<br> 德累斯顿工业大学TU Dresden, 莱布尼茨-汉诺威大学Leibniz Universität Hannover,<br>  卡尔斯鲁厄理工学院Karlsruher Institut für Technologie, 慕尼黑工业大学TU München,<br>   斯图加特大学Universität Stuttgart。九所大学都是1900年之前成立的理工高校。<br>   TU9联盟主席Ernst Schmachtenberg博士教授指出，”TU9理工高校联盟就是科研实力的代名词。“</p></blockquote><h4 id="U15"><a href="#U15" class="headerlink" title="U15"></a>U15</h4><blockquote><p>U15大学联盟是德国的大型高校、研究型高校联盟，成立于2012年10月12日。联盟成立宗旨为改善德国科研和教育的架构。占德国高校总数13%的十五所高校，承担了37%的第三方资助、60%的医科资助、43%的博士授予，并获得了43%的莱布尼茨奖。目前联盟主席为海德堡大学校长爱特尔(Bernd Eitel)。<br>联盟成员,柏林自由大学,海德堡大学,柏林洪堡大学,波恩大学,法兰克福大学,弗莱堡大学,哥廷根大学,汉堡大学,科隆大学,莱比锡大学,美因茨大学,慕尼黑大学,明斯特大学,图宾根大学,维尔茨堡大学.</p></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.daad.de/deutschland/studienangebote/international-programmes/en/result/?crossFac=&amp;cert=&amp;admReq=&amp;scholarshipLC=&amp;scholarshipSC=&amp;degree%5B%5D=&amp;fos=&amp;langDeAvailable=&amp;langEnAvailable=&amp;lang%5B%5D=&amp;cit%5B%5D=&amp;tyi%5B%5D=&amp;ins%5B%5D=&amp;dur%5B%5D=&amp;sort=4&amp;subjects%5B%5D=&amp;q=&amp;limit=10&amp;offset=&amp;display=list" target="_blank" rel="noopener">DAAD查找路径</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>少年的诗</title>
      <link href="/blog/2018/12/13/%E5%B0%91%E5%B9%B4%E7%9A%84%E8%AF%97/"/>
      <url>/blog/2018/12/13/%E5%B0%91%E5%B9%B4%E7%9A%84%E8%AF%97/</url>
      
        <content type="html"><![CDATA[<blockquote><center>三峡江声流笔底, 六朝帆影落樽前<br><center>胸中机杼，笔底波澜<br><center>写一点诗，总是好的</center></center></center></blockquote><a id="more"></a><h1 id="《侠的诗》"><a href="#《侠的诗》" class="headerlink" title=" 《侠的诗》 "></a><center> 《侠的诗》 </center></h1><center>“傲指弹云分入酒，青冠流古照秋霜”<center>太平无侠士<center>那就写一点诗<center>放浪侠气</center><h2 id="「侠」"><a href="#「侠」" class="headerlink" title=" 「侠」"></a><center> 「侠」</center></h2><center>辞京飘迹楚山茫，</center><br><center>谑眼穿尘淡冕光。</center><br><center>傲指弹云分入酒，</center><br><center>青冠流古照秋霜。</center><h1 id="《少年游》"><a href="#《少年游》" class="headerlink" title=" 《少年游》 "></a><center> 《少年游》 </center></h1><center>“花有重开日，人无再少年”<center>最好的时光<center>总是少年时<center>那走遍的江河</center><h2 id="「入山」"><a href="#「入山」" class="headerlink" title=" 「入山」"></a><center> 「入山」</center></h2><center>山深纵马伫难前，</center><br><center>步下飞光百丈渊。</center><br><center>雾卷云廊封道尽，</center><br><center>雨开峰骨作桥源。</center><br><center>悠笛风远惊人迹，</center><br><center>长海际回忆陌年。</center><br><center>绝处寻松掬水月，</center><br><center>春秋一脉本多缘。</center><h2 id="「古原雨」"><a href="#「古原雨」" class="headerlink" title=" 「古原雨」"></a><center> 「古原雨」</center></h2><center>故迹青鸦驻，三江入古原。</center><br><center>立堤涛水逝，临野聚峰眠。</center><br><center>塔外清魂雨，烟间断梦田。</center><br><center>萧霜凋旧木，归马闭门前。</center><h2 id="「题赛里木湖」"><a href="#「题赛里木湖」" class="headerlink" title=" 「题赛里木湖」"></a><center> 「题赛里木湖」</center></h2><center>深云压海境，微雨落晶珠。</center><br><center>几骑寻闲客，风波自在途。</center><h1 id="《韵之心》"><a href="#《韵之心》" class="headerlink" title=" 《韵之心》 "></a><center> 《韵之心》 </center></h1><center>古有琴谱阳关三叠<br><center>“劝君更进一杯酒，西出阳关无故人”<br><center>古有诗歌驻马衔杯<br><center>“圣代即今多雨露，暂时分手莫踌躇”</center><h2 id="「缘深缘浅，留念诸君」"><a href="#「缘深缘浅，留念诸君」" class="headerlink" title=" 「缘深缘浅，留念诸君」"></a><center> 「缘深缘浅，留念诸君」</center></h2><center>何泣春江归晚照？松风水落对槐花。</center><br><center>遗朝柳折留寻念，此坊歌倾续梦茶。</center><br><center>解带吹心风作客，流光转忆泪分霞。</center><br><center>云终不见诸君影，碧海行帆懒问涯。</center><h2 id="「岳麓•祭•忆君之风忆水长」"><a href="#「岳麓•祭•忆君之风忆水长」" class="headerlink" title=" 「岳麓•祭•忆君之风忆水长」 "></a><center> 「岳麓•祭•忆君之风忆水长」 </center></h2><center>望尽湘江暮，亭间墨客愁。</center><br><center>满林兼叶落，独木与谁谋！</center><br><center>老雁飞斜镜，青衫立冷丘。</center><br><center>出钩疑钓叟，惟是月如舟。</center><h1 id="《家国情》"><a href="#《家国情》" class="headerlink" title=" 《家国情》 "></a><center> 《家国情》 </center></h1><center>“王师北定中原日”<center>太平年间<center>曾经的荣辱仿佛被渐渐淡化了<center>而那血脉奔腾的黄河长江<center>却依然肃穆</center><h2 id="「记南京大屠杀」"><a href="#「记南京大屠杀」" class="headerlink" title=" 「记南京大屠杀」 "></a><center> 「记南京大屠杀」 </center></h2><center>寇兵侵戮昔悲史，</center><br><center>瑟瑟汗青警自鸣。</center><br><center>国父陵前国尽复，</center><br><center>雨花台上雨堪惊！</center><br><center>三江拾恨祭英骨，</center><br><center>亿气同途筑远程。</center><br><center>勿任危心流海去，</center><br><center>涯间舟载惜天明。</center></center></center></center></center></center></center></center></center></center></center></center></center></center>]]></content>
      
      
      
    </entry>
    
  
  
</search>
