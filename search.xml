<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>SVM公式推导和原理解析</title>
      <link href="/blog/2020/12/16/SVM%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC%E5%92%8C%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
      <url>/blog/2020/12/16/SVM%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC%E5%92%8C%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="SVM公式推导和原理解析"><a href="#SVM公式推导和原理解析" class="headerlink" title="SVM公式推导和原理解析"></a>SVM公式推导和原理解析</h1><a id="more"></a><p><img src="/blog/blog/2020/12/16/SVM公式推导和原理解析/1.jpg" alt="1"></p><p><img src="/blog/blog/2020/12/16/SVM公式推导和原理解析/2.jpg" alt="2"></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>多分类AUC计算</title>
      <link href="/blog/2020/11/07/%E5%A4%9A%E5%88%86%E7%B1%BBAUC%E8%AE%A1%E7%AE%97/"/>
      <url>/blog/2020/11/07/%E5%A4%9A%E5%88%86%E7%B1%BBAUC%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>一般涉及到的是binary classification的AUC计算,这里给出的计算方法即可用于binary也可用于多分类问题。</p><a id="more"></a><p>input: 给定的dataframe, 实际预测的correctlabels<br>output: AUC 面积</p><p>举个例子，给定的dataframe是</p><table><thead><tr><th>d</th><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>0</td><td>0.50</td><td>0.50</td><td>0.00</td></tr><tr><td>1</td><td>0.50</td><td>0.25</td><td>0.25</td></tr><tr><td>2</td><td>0.50</td><td>0.25</td><td>0.25</td></tr><tr><td>3</td><td>0.25</td><td>0.50</td><td>0.25</td></tr><tr><td>4</td><td>0.25</td><td>0.25</td><td>0.50</td></tr></tbody></table><p>A,B,C代表三个类，其中的数字代表着预测该类的概率  </p><p>而corrrectlabels也即实际预测的结果是[“B”,”A”,”B”,”B”,”C”]<br>这两者作为input可以计算output的AUC面积</p><p>以下是求面积的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_pos_neg_instance_scores</span><span class="params">(prediction_column, correct_labels, column_name)</span>:</span></span><br><span class="line">    prediction_column_array = np.array(prediction_column)</span><br><span class="line">    binary_AUC = [column_name == i <span class="keyword">for</span> i <span class="keyword">in</span> correct_labels] </span><br><span class="line">    print(<span class="string">'binary_AUC='</span>, binary_AUC)</span><br><span class="line">    <span class="comment"># positive_instance_scores =&gt; Col-Name (predicted class) matches with the correct class</span></span><br><span class="line">    positive_instance_scores = prediction_column_array[binary_AUC]</span><br><span class="line">    <span class="comment"># negative_instance_scores =&gt; Col-Name (predicted class) DOES NOT match with the correct class</span></span><br><span class="line">    negative_instance_scores = prediction_column_array[~np.array(binary_AUC)]</span><br><span class="line">    print(positive_instance_scores)</span><br><span class="line">    print(negative_instance_scores)</span><br><span class="line">    <span class="keyword">return</span> positive_instance_scores, negative_instance_scores</span><br><span class="line"></span><br><span class="line"><span class="comment"># fpr=False_Positive_Rate</span></span><br><span class="line"><span class="comment"># tpr=True_Positive_Rate</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tpr_fpr</span><span class="params">(prediction_column, correct_labels, column_name)</span>:</span></span><br><span class="line">    positive_instance_scores, negative_instance_scores = find_pos_neg_instance_scores(prediction_column, correct_labels, column_name)</span><br><span class="line"><span class="comment">#     print(positive_instance_scores)</span></span><br><span class="line"><span class="comment">#     print(negative_instance_scores)</span></span><br><span class="line">    scores_extended = [<span class="number">0</span>]</span><br><span class="line">    scores_extended += sorted(prediction_column)</span><br><span class="line">    scores_extended += [<span class="number">1</span>]</span><br><span class="line">    print(<span class="string">'scores_extended='</span>,scores_extended)</span><br><span class="line">    dict_tpr_fpr = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> predicted_score <span class="keyword">in</span> scores_extended:</span><br><span class="line">        <span class="keyword">if</span>(len(negative_instance_scores)==<span class="number">0</span>):</span><br><span class="line">            count_false_pos_instances = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count_false_pos_instances = np.sum(negative_instance_scores &gt;= predicted_score)/len(negative_instance_scores)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(len(positive_instance_scores)==<span class="number">0</span>):</span><br><span class="line">            count_true_pos_instances = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count_true_pos_instances = np.sum(positive_instance_scores &gt;= predicted_score)/len(positive_instance_scores)</span><br><span class="line">            </span><br><span class="line">        <span class="comment">#dict_tpr_fpr[predicted_score] = [count_false_pos_instances, count_true_pos_instances]</span></span><br><span class="line">        dict_tpr_fpr[predicted_score] = [count_true_pos_instances, count_false_pos_instances]</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">'dict_tpr_fpr='</span>,dict_tpr_fpr)</span><br><span class="line">    list_reversed_tpr_fpr = [i <span class="keyword">for</span> i <span class="keyword">in</span> reversed(list(dict_tpr_fpr.values()))]</span><br><span class="line">    print(<span class="string">'list_reversed_tpr_fpr='</span>, list_reversed_tpr_fpr)</span><br><span class="line">    <span class="keyword">return</span> list_reversed_tpr_fpr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_AUC</span><span class="params">(list_reversed_tpr_fpr)</span>:</span></span><br><span class="line">    <span class="comment"># AUC = Area under ROC curve</span></span><br><span class="line">    AUC = <span class="number">0</span></span><br><span class="line">    n_tpr_fpr = len(list_reversed_tpr_fpr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n_tpr_fpr - <span class="number">1</span>):        </span><br><span class="line">        <span class="keyword">if</span>(list_reversed_tpr_fpr[i][<span class="number">1</span>] != list_reversed_tpr_fpr[i + <span class="number">1</span>][<span class="number">1</span>]):</span><br><span class="line">            <span class="comment"># if fpr is changing but tpr is not changing then the area is a square=a*b=(tpr[i+1]-0)*(fpr[i+1]-fpr[i])</span></span><br><span class="line">            <span class="keyword">if</span>(list_reversed_tpr_fpr[i][<span class="number">0</span>] == list_reversed_tpr_fpr[i + <span class="number">1</span>][<span class="number">0</span>]):</span><br><span class="line">                AUC += list_reversed_tpr_fpr[i + <span class="number">1</span>][<span class="number">0</span>]*(list_reversed_tpr_fpr[i + <span class="number">1</span>][<span class="number">1</span>] - list_reversed_tpr_fpr[i][<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># if both are changing then the area is a trapezoid=(a+b)*h/2=(tpr[i]+tpr[i+1])*(fpr[i+1]-fpr[i])/2</span></span><br><span class="line">                AUC += (list_reversed_tpr_fpr[i + <span class="number">1</span>][<span class="number">0</span>] + list_reversed_tpr_fpr[i][<span class="number">0</span>])*(list_reversed_tpr_fpr[i + <span class="number">1</span>][<span class="number">1</span>] - list_reversed_tpr_fpr[i][<span class="number">1</span>])/<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> AUC</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auc</span><span class="params">(df, correctlabels)</span>:</span></span><br><span class="line">    AUC = <span class="number">0</span></span><br><span class="line">    class_frequency = dict()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> correctlabels:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> class_frequency:</span><br><span class="line">            class_frequency[i] = (<span class="number">1</span>/len(correctlabels))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            class_frequency[i] += (<span class="number">1</span>/len(correctlabels))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> df.columns:</span><br><span class="line">        prediction_vector = df[col]</span><br><span class="line">        list_reversed_tpr_fpr = get_tpr_fpr(prediction_vector, correctlabels, col)</span><br><span class="line">        area_col = calculate_AUC(list_reversed_tpr_fpr)</span><br><span class="line">        AUC += class_frequency[col] * area_col</span><br><span class="line">    <span class="keyword">return</span> AUC</span><br></pre></td></tr></table></figure><p>测试代码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">predictions = pd.DataFrame(&#123;<span class="string">"A"</span>:[<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>],<span class="string">"B"</span>:[<span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>,<span class="number">0.25</span>],<span class="string">"C"</span>:[<span class="number">0.0</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.25</span>,<span class="number">0.5</span>]&#125;)</span><br><span class="line"></span><br><span class="line">correctlabels = [<span class="string">"B"</span>,<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">"AUC: &#123;&#125;"</span>.format(auc(predictions,correctlabels)))</span><br></pre></td></tr></table></figure></p><p>步骤说明：<br>第一步即调用auc方法计算class_frequency，即利用frequency作为<strong>权重</strong>将所有类的AUC相加。(Calculate the weighted AUC by summing the individual AUCs weighted by the relative<br>frequency of each class (as estimated from the correct labels)  </p><p>接下来就是计算每个类的AUC了,实际上是每个类的binary AUC, 也即对于这个类的FPR和TPR点所围面积的和 <a href="https://zh.wikipedia.org/wiki/ROC%E6%9B%B2%E7%BA%BF" target="_blank" rel="noopener">概念链接</a>。 </p><p>因此，首先我们必须计算TPR和FPR点的坐标，也就是<code>get_tpr_fpr</code>函数，先找到其中判断对positive与错negative的scores（<code>find_pos_neg_instance_scores</code>函数），再对prediction_column（这里需要在首尾加一个0和一个1，好帮助后面的面积计算）中的每个prediction_score，判断它和判断negative 或positive instance的score的关系。得到count_false_pos_instances和count_true_pos_instances的两句实际上就是FPR（在所有实际为阴性的样本中，被错误地判断为阳性之比率FPR=FP/(FP+TN)）和TPR（在所有实际为阴性的样本中，被错误地判断为阳性之比率TPR=TP/(TP+FN)）的计算过程。 </p><p>这一步之后再进行个从小到大的排序，其实就得到了所有的score对应的TPR和FPR pair 也即点坐标，只要画出点坐标连接后下方在坐标轴上的面积（以TPR为纵轴，FPR为横轴），就可以得到AUC的面积了。而这一步则用<code>calculate_AUC</code>函数自动计算得到。</p><p>得到了每一个类的AUC，再做一个weight sum就是最后的多分类AUC面积。</p><!-- 例子的一些关键点的print结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">binary_AUC= [False, True, False, False, False]</span><br><span class="line">positive_instance_scores= [0.5]</span><br><span class="line">negative_instance_scores= [0.5  0.5  0.25 0.25]</span><br><span class="line">scores_extended= [0, 0.25, 0.25, 0.5, 0.5, 0.5, 1]</span><br><span class="line">dict_tpr_fpr= &#123;0: [1.0, 1.0], 0.25: [1.0, 1.0], 0.5: [1.0, 0.5], 1: [0.0, 0.0]&#125;</span><br><span class="line">list_reversed_tpr_fpr= [[0.0, 0.0], [1.0, 0.5], [1.0, 1.0], [1.0, 1.0]]</span><br><span class="line">col=A__area_col=0.75</span><br><span class="line">binary_AUC= [True, False, True, True, False]</span><br><span class="line">positive_instance_scores= [0.5  0.25 0.5 ]</span><br><span class="line">negative_instance_scores= [0.25 0.25]</span><br><span class="line">scores_extended= [0, 0.25, 0.25, 0.25, 0.5, 0.5, 1]</span><br><span class="line">dict_tpr_fpr= &#123;0: [1.0, 1.0], 0.25: [1.0, 1.0], 0.5: [0.6666666666666666, 0.0], 1: [0.0, 0.0]&#125;</span><br><span class="line">list_reversed_tpr_fpr= [[0.0, 0.0], [0.6666666666666666, 0.0], [1.0, 1.0], [1.0, 1.0]]</span><br><span class="line">col=B__area_col=0.8333333333333333</span><br><span class="line">binary_AUC= [False, False, False, False, True]</span><br><span class="line">positive_instance_scores= [0.5]</span><br><span class="line">negative_instance_scores= [0.   0.25 0.25 0.25]</span><br><span class="line">scores_extended= [0, 0.0, 0.25, 0.25, 0.25, 0.5, 1]</span><br><span class="line">dict_tpr_fpr= &#123;0: [1.0, 1.0], 0.25: [1.0, 0.75], 0.5: [1.0, 0.0], 1: [0.0, 0.0]&#125;</span><br><span class="line">list_reversed_tpr_fpr= [[0.0, 0.0], [1.0, 0.0], [1.0, 0.75], [1.0, 1.0]]</span><br><span class="line">col=C__area_col=1.0</span><br><span class="line">AUC: 0.8500000000000001</span><br><span class="line">``` --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">更简单的多分类方法（概率方法）：</span><br><span class="line">```python</span><br><span class="line">def auc(df,correctlabels):</span><br><span class="line">    new_df=df.copy()</span><br><span class="line">    lens=len(correctlabels)</span><br><span class="line">    cols=new_df.columns.tolist()</span><br><span class="line">    if len(cols)&lt;3: #binary ;only Pos and Neg</span><br><span class="line">        pos=[ i for i in range(lens)  if correctlabels[i]==cols[0]]</span><br><span class="line">        neg=[i for i in range(lens)  if correctlabels[i]!=cols[0]]                    </span><br><span class="line">        print(pos,neg)</span><br><span class="line">        one=new_df[cols[0]]</span><br><span class="line">        auc = 0</span><br><span class="line">        for i in pos:</span><br><span class="line">            for j in neg:</span><br><span class="line">                if one[i] &gt; one[j]:</span><br><span class="line">                    auc += 1</span><br><span class="line">                elif one[i] == one[j]:</span><br><span class="line">                    auc += 0.5</span><br><span class="line"></span><br><span class="line">        return auc / (len(pos)*len(neg))</span><br><span class="line">    else:      # CLASS &gt;=3   Pos / non-Pos</span><br><span class="line">        aucs=[]</span><br><span class="line">        for col in cols:</span><br><span class="line">            pos=[ i for i in range(lens)  if correctlabels[i]==col]</span><br><span class="line">            nonpos=[i for i in range(lens)  if correctlabels[i]!=col]                      </span><br><span class="line">            print(pos,nonpos)</span><br><span class="line">            one=new_df[col]</span><br><span class="line">            auc = 0</span><br><span class="line">            for i in pos:</span><br><span class="line">                for j in nonpos:</span><br><span class="line">                    if one[i] &gt; one[j]:</span><br><span class="line">                        auc += 1</span><br><span class="line">                    elif one[i] == one[j]:</span><br><span class="line">                        auc += 0.5</span><br><span class="line">            auc=auc/(len(pos)*len(nonpos))</span><br><span class="line">            aucs.append(auc)</span><br><span class="line">        weights=[correctlabels.count(col)/len(correctlabels) for col in cols ]</span><br><span class="line">        print(weights)</span><br><span class="line">        print(aucs)</span><br><span class="line"></span><br><span class="line">        weights=np.array(weights)</span><br><span class="line">        aucs=np.array(aucs)</span><br><span class="line">        avg_auc=np.sum(aucs*weights)</span><br><span class="line">        return avg_auc</span><br><span class="line"></span><br><span class="line"># test</span><br><span class="line">predictions = pd.DataFrame(&#123;&quot;A&quot;:[0.5,0.5,0.5,0.25,0.25],&quot;B&quot;:[0.5,0.25,0.25,0.5,0.25],&quot;C&quot;:[0.0,0.25,0.25,0.25,0.5]&#125;)</span><br><span class="line"></span><br><span class="line">correctlabels = [&quot;B&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;C&quot;]</span><br><span class="line"></span><br><span class="line">print(&quot;AUC: &#123;&#125;&quot;.format(auc(predictions,correctlabels)))</span><br></pre></td></tr></table></figure><p>简单的二分类AUC计算<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_auc</span><span class="params">(prob, labels)</span>:</span></span><br><span class="line">    f = list(zip(prob, labels))</span><br><span class="line">    rank = [values2 <span class="keyword">for</span> values1, values2 <span class="keyword">in</span> sorted(f, key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])]</span><br><span class="line">    rankList = [i + <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(rank)) <span class="keyword">if</span> rank[i] == <span class="number">1</span>]</span><br><span class="line">    posNum = <span class="number">0</span></span><br><span class="line">    negNum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(labels)):</span><br><span class="line">        <span class="keyword">if</span> (labels[i] == <span class="number">1</span>):</span><br><span class="line">            posNum += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            negNum += <span class="number">1</span></span><br><span class="line">    auc = (sum(rankList) - (posNum * (posNum + <span class="number">1</span>)) / <span class="number">2</span>) / (posNum * negNum)</span><br><span class="line">    <span class="keyword">return</span> auc</span><br><span class="line"></span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">model = BernoulliNB()</span><br><span class="line">model.fit(x_train, y_train)</span><br><span class="line">prediction = model.predict_proba(x_val)</span><br><span class="line">auc = cal_auc(prediction[:, <span class="number">1</span>], np.array(y_val))</span><br></pre></td></tr></table></figure></p>-->]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>computer network</title>
      <link href="/blog/2020/08/03/computer-network/"/>
      <url>/blog/2020/08/03/computer-network/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络知识点"><a href="#计算机网络知识点" class="headerlink" title="计算机网络知识点"></a>计算机网络知识点</h1><a id="more"></a><p>用户态（应用层HTTP,FTP,DNS,HTTPS)<br>核心态(传输层tcp, 网络层ip, 链路层)</p><p>二、链路层</p><p>功能：将上层数据封装成帧，用MAC地址访问媒介，错误检测与修正</p><ul><li><p>以太网帧格式<br>7字节前导码（同步）<br>1字节帧开始符<br>6子节MAC目标地址<br>6子节MAC源地址<br>一个4子节标签（可选）<br>2字节以太类型（0x0800 IPv4; 0x0806 ARP)<br>负载46-1500字节<br>CRC冗余校验<br>帧间距12字节<br><img src="https://raw.githubusercontent.com/Spycsh/blog/master/2020/08/03/computer-network/EthernetFrame.jpg" alt="1"></p></li><li><p>MTU（Maximum transmission Unit) 数据链路层最大数据包大小，单位：字节。即无需进一步分片就能穿过这条“路径”的最大传输单元的最大值。如果不要分片，设置数据报的DF位（Don’t fragment），路径上任何需要将分组进行分片的设备都会将这种数据报丢弃并返回一个“数据报过大”的ICMP响应到源地址。</p></li></ul><ul><li><p>arp协议 address resolution protocol 实现ip地址到MAC地址的映射，即询问目标IP地址对应的MAC地址，然后放入ARP缓存表。<br>原理：把带有目标ip地址的arp请求广播到局域网上所有主机，并接受响应获取mac地址。存入arp缓存表一段时间。<br><img src="https://raw.githubusercontent.com/Spycsh/blog/master/2020/08/03/computer-network/arp报文格式.png" alt="2"><br>目的MAC地址：占6字节，表示接收方设备的硬件地址，在请求报文中该字段值全为0，即00-00-00-00-00-00，表示任意地址，因为现在不知道这个MAC地址。</p></li><li><p>基于功能来考虑，ARP是链路层协议；基于分层/包封装来考虑，ARP是网络层协议（2字节以太类型（0x0800 IPv4; 0x0806 ARP)）</p></li></ul><p>三、网络层<br>功能：1、路由选择（规划路线）<br>2、存储、交换、转发（路由器通过路由表转发包，如果接收速度大于转发速度就缓存）3、拥塞控制 4、呼叫准入（所有路由器的许可）</p><ul><li><p>ip首部格式：<br>如图第二行，16位序列号：如有分片，下一个序列号与上一个相同，若无分片，下一个序列号等于上一个加一。<br>3三个bit位：第一位保留，未使用。第二位是DF（Don’t Fragment），如果为1，表示未发生分片。第三位是MF（More Fragment），如果为1，表示发生了分片，并且除了分片出的最后一个报文中此标志为0，其余报文中此标志均为1。<br>13位片位移：分片相对于原始ip数据报开始处的偏移。</p></li><li><p>8位生存时间TTL（time to live), 防止数据报兜圈子，不断减去在路由器间传递的时间，直到零就丢弃数据报，不再转发。</p></li><li>16位首部检验和<br><img src="https://raw.githubusercontent.com/Spycsh/blog/master/2020/08/03/computer-network/ip报文格式.png" alt="3"></li></ul><blockquote><p>掌握IP分片<br>一个长4000B的IP数据报，数据部分3980B,到达了一个路由，需要转发到一个MTU为1500B的链路上，这样就得分片了。分片数目是3片。每个片都是一个数据报。假设标识是777，那么数据报分片结果是：<br>分片一：标识：777，MF=1，DF=0,片偏移=0，有效数据：1480B(编号0~1479)<br>分片二：标识：777，MF=1,DF=0,片偏移=185，185<em>8=1480，有效数据：1480B(编号1480~2959)<br>分片三：标识：777，MF=0,DF=0,片偏移370，370</em>8=2960，有效数据：1020B(编号2960~3979)</p></blockquote><ul><li>IP路由表<br><img src="https://raw.githubusercontent.com/Spycsh/blog/master/2020/08/03/computer-network/IP分组转发流程.jpg" alt="4"></li></ul><p>分组转发流程</p><ol><li>从数据报首部提取主机的IP地址D，得到目的网络地址N（子网掩码存储在路由表中，与IP地址D进行逻辑与即可得到N）</li><li>若N是与此路由器直接相连的某个网络地址，直接交付</li><li>若路由表中有目的地址为D的特定主机路由/到达网络N的路由，则把数据报传送给表中指明的下一跳路由</li><li>若路由表中有一个默认路由，则把数据报传送给路由表所指明的默认路由器</li><li>报告转发分组出错</li></ol><ul><li><p>IP内部网关协议RIP<br>RIP 按固定的时间间隔仅和相邻路由器交换自己的路由表，经过若干次交换之后，所有路由器最终会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器地址。<br><img src="https://raw.githubusercontent.com/Spycsh/blog/master/2020/08/03/computer-network/RIP路由表建立.jpg" alt="5"></p></li><li><p>ICMP查询2种+差错5种<br><img src="/blog/blog/2020/08/03/computer-network/ICMP报文类型.png" alt=""></p></li></ul><p>四、传输层<br>UDP协议：特点，首部字段</p><p>TCP协议：特点+首部字段+可靠机制<br>首部（校验和。。。）</p><p>连接基础</p><ul><li><p>三次握手</p><!-- ![5](computer-network/TCP三次握手.png) --><p>目的：为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。主要防止资源的浪费。</p></li><li><p>四次挥手（为什么）</p><!-- ![6](computer-network/TCP四次挥手.png) --><p>关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，我们也未必全部数据都发送给对方了，所以我们不可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，我们的ACK和FIN一般都会分开发送。</p></li></ul><p>、同时打开、同时关闭、半关闭</p><p>服务器第一次收到客户端的 SYN 之后，就会处于 SYN_RCVD 状态，此时双方还没有完全建立其连接，服务器会把此种状态下请求连接放在一个队列里，我们把这种队列称之为<code>半连接队列</code>。<br>当然还有一个<code>全连接队列</code>，就是已经完成三次握手，建立起连接的就会放在全连接队列中。如果队列满了就有可能会出现丢包现象。<a href="https://juejin.im/post/6844903958624878606" target="_blank" rel="noopener">来源链接</a></p><p><img src="https://raw.githubusercontent.com/Spycsh/blog/master/2020/08/03/computer-network/tcp-ip-handshark.png" alt="7"></p><p>tcp流量控制机制：<br>滑窗、<br><img src="https://raw.githubusercontent.com/Spycsh/blog/master/2020/08/03/computer-network/滑窗.jpg" alt="8"></p><ul><li>在未收到ACK确认之间都必须暂时保留在发送窗口内，以便超时重传使用</li></ul><p>慢启动、拥塞避免、快速重传、快速恢复<br>超时重传</p><p>伪包头</p><p>五、应用层<br>域名解析<br>DNS协议名字空间、DNS指针查询（反向查找或逆向解析）、DNS缓存</p><blockquote><p>DNS查询过程实例<br>1）客户端将<a href="http://www.redhat.com的查询提交给本地DNS服务器（递归查询）。" target="_blank" rel="noopener">www.redhat.com的查询提交给本地DNS服务器（递归查询）。</a><br>2）本地DNS服务器检查区域数据库，由于该服务器没有redhat.com的授权，它将查询传递到根服务器（“.”DNS服务器），请求解析主机名称。根名称服务器把“com”DNS服务器IP地址返回给本地DNS服务器（迭代查询）。<br>3）本地DNS服务器将请求发给“com”DNS服务器，该服务器根据请求将“redhat.com”DNS服务器IP地址返回给本地DNS服务器（迭代查询）。<br>4）本地DNS服务器向“redhat.com”DNS服务器发送请求，由于该服务器具有“<a href="http://www.redhat.com”记录，它将www.redhat.com的IP地址返回给本地DNS服务器。" target="_blank" rel="noopener">www.redhat.com”记录，它将www.redhat.com的IP地址返回给本地DNS服务器。</a><br>5）本地DNS服务器将<a href="http://www.redhat.com的IP地址发送给客户端。" target="_blank" rel="noopener">www.redhat.com的IP地址发送给客户端。</a></p></blockquote><p>FTP数据流、控制流：<br>端口20用于在客户端和服务器之间传输数据流，而端口21用于传输控制流</p><p>两种工作模式：PASV+PORT</p><blockquote><p>   1、主动FTP：<br>命令连接：客户端 &gt;1024端口 -&gt; 服务器 21端口<br>数据连接：客户端 &gt;1024端口 <- 服务器="" 20端口="" 2、被动ftp：="" 命令连接：客户端="">1024端口 -&gt; 服务器 21端口 </-></p></blockquote><p>数据连接：客户端 &gt;1024端口 -&gt; 服务器 &gt;1024端口</p><p>我自己的理解是主动模式的话，客户端随意起一个大于1024端口去连服务器的21端口，然后告诉服务器我已经准备好数据连接了，你过来连我的数据端口吧，然后服务器用自己的20端口去连客户端的端口，注意此时客户端其实为了响应，是随意启用了一个自己不用的端口，即大于1024的端口。</p><p>被动模式：从头到尾都是客户端去连服务器，服务器一直处于响应状态。客户端打开两个大于1024的端口，然后第一个端口去连服务器的21号端口，告诉服务器：“你准备好了吗？我要向你传输数据了。然后服务器说我好了，客户端用自己事先开好的第二个端口去连接服务器，注意此时服务器的数据端口已经不是20了，服务器为了响应请求，随机开了一个大于1024端口<br>(<a href="https://blog.51cto.com/9237101/1911032" target="_blank" rel="noopener">https://blog.51cto.com/9237101/1911032</a>)</p><p>FTP指令和响应码<br>FTP断电续传、匿名ftp</p><p>HTTP<br>报文格式：请求报文、响应报文、请求头各种字段、响应头各种字段<br>http状态码</p><p>HTTPS<br>详细握手<br>摘要算法、数字签名、数字证书</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>go基础</title>
      <link href="/blog/2020/07/21/go%E5%9F%BA%E7%A1%80/"/>
      <url>/blog/2020/07/21/go%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="go-programming-基础"><a href="#go-programming-基础" class="headerlink" title="go programming 基础"></a>go programming 基础</h1><a id="more"></a><h2 id="Why-go"><a href="#Why-go" class="headerlink" title="Why go"></a>Why go</h2><p>1.Code run fast<br>2.Garbage collection<br>3.Simpler objects<br>4.Concurrency is efficient</p><p>Software Translation</p><ul><li>machine language: CPU instructions represented in binary</li><li>Assembly language: CPU ~ with mnemonics (easier to read)</li><li>High level language</li></ul><p>Compilation<br>Translate instructions while code is executed</p><ul><li>C++, C, Java (compiler) Translation occurs once</li><li>Java(compiled to bytecode then be interpreted), Python (interpreter) Translation occurs every execution</li></ul><h2 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h2><p>Go is weakly OOP language</p><p>Go use structs instead of class</p><ul><li>No contructor, generics and inheritance</li></ul><h2 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h2><p>Performance Limits:<br>Moore’s Law<br>More transistors used to lead to higher clock frequencies<br>Power/temperature constraints</p><p>Parallelism<br>GPU thounsands of cores</p><ul><li>Concurrency is the management of multiple tasks at the same time</li><li>Key requirement for large systems</li><li>Concurrent programming enables parallelism<br>-&gt; Management of task execution<br>-&gt; Communication between tasks<br>-&gt; Synchronization between tasks</li></ul><p>Go includes concurrency primitives<br><code>Goroutines</code> represent concurrent tasks<br><code>Channels</code> are used to communicate between tasks<br><code>Select</code> enables task sysnchronization<br>Concurrency primitives are efficient and easy to use</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Package Main<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Printf(<span class="string">"hellow world\n"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Commands:</p><ul><li><code>go build</code> - compiles the program to .exe file</li><li><code>go doc</code> print documentation</li><li><code>go fmt</code> format indentation</li><li><code>go get</code> package</li><li><code>go run</code></li><li><code>go test</code></li></ul><h2 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h2><p>var x int = 100<br>var x, y int = 100</p><p>var x = 100 (auto infer)</p><p>x := 100</p><p>Define and alias for a type<br>type Celsius float64<br>type IDnum int</p><h2 id="Pointer"><a href="#Pointer" class="headerlink" title="Pointer"></a>Pointer</h2><p>A pointer is an address to data in memory</p><p><code>&amp;</code> returns the address of a variable/function</p><p><code>*</code> operator returns the data at the address<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> y <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> ip *<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">ip = &amp;x</span><br><span class="line">y = *ip</span><br></pre></td></tr></table></figure></p><p>New</p><ul><li>new() function creates a variable and returns a pointer to the variable<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ptr := <span class="built_in">new</span>(<span class="keyword">int</span>)</span><br><span class="line">*ptr = <span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"Hi %s"</span>, x)</span><br></pre></td></tr></table></figure><p>x = int32(y)</p><h2 id="String-Package"><a href="#String-Package" class="headerlink" title="String Package"></a>String Package</h2><p>CompareTo(a, b)</p><p>Contains(s, substr)</p><p>HasPrefix(s, prefix)</p><p>Index(s, substr)</p><p>Replace(s, old, new, n)</p><p>ToLower(s)</p><p>TrimSpace(s)</p><p>returns a new string</p><h2 id="Strconv-Package"><a href="#Strconv-Package" class="headerlink" title="Strconv Package"></a>Strconv Package</h2><p>Atoi(s) -converts string s to int</p><p>Itoa(s) -convert int to string</p><p>FormatFloat(f, fmt,prec, bitSize) - convert flot to string</p><p>ParseFloat(s, bitSize) - Converts a string to a floating point number</p><h2 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h2><ul><li>Expression whose value is known at compile time</li><li>Type is inferred from righthand side (boolean, string number)<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">1.3</span></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">    y=<span class="number">4</span></span><br><span class="line">    z=<span class="string">"Hi"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><p>iota (like enumerate)</p><ul><li>generate a set of related but distinct constants</li><li>Ofter represents a property which has several distinct values<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Grades <span class="keyword">int</span></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">    A Grade = <span class="literal">iota</span>  <span class="comment">// 0</span></span><br><span class="line">    B               <span class="comment">// 1</span></span><br><span class="line">    C               <span class="comment">// 2</span></span><br><span class="line">    D</span><br><span class="line">    F</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Allergen <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    IgEggs Allergen = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span> <span class="comment">// 1 &lt;&lt; 0 which is 00000001</span></span><br><span class="line">    IgChocolate                         <span class="comment">// 1 &lt;&lt; 1 which is 00000010</span></span><br><span class="line">    IgNuts                              <span class="comment">// 1 &lt;&lt; 2 which is 00000100</span></span><br><span class="line">    IgStrawberries                      <span class="comment">// 1 &lt;&lt; 3 which is 00001000</span></span><br><span class="line">    IgShellfish                         <span class="comment">// 1 &lt;&lt; 4 which is 00010000</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Control-flow"><a href="#Control-flow" class="headerlink" title="Control flow"></a>Control flow</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x &gt; <span class="number">5</span>&#123;</span><br><span class="line">    fmt.Printf(<span class="string">"aa"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> x&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        fmt.Printf(<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        fmt.Printf(<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Printf(<span class="string">"nocase"</span>) <span class="comment">// auto break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Scan"><a href="#Scan" class="headerlink" title="Scan"></a>Scan</h2><ul><li>Scan reads user input</li><li>Takes a pointer as an argument</li><li>Typed data is written to pointer</li><li>Returns number of scanned item</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> appleNum <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"Number of apples?"</span>)</span><br><span class="line">num, err := fmt.scan(&amp;appleNum)</span><br><span class="line">fmt.Printf(appleNum)</span><br></pre></td></tr></table></figure><h2 id="Composite-Data-types"><a href="#Composite-Data-types" class="headerlink" title="Composite Data types"></a>Composite Data types</h2><h3 id="Arrays-fixed-length"><a href="#Arrays-fixed-length" class="headerlink" title="Arrays: fixed length"></a>Arrays: fixed length</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x [<span class="number">5</span>]<span class="keyword">int</span></span><br><span class="line">x[<span class="number">0</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x [<span class="number">5</span>]<span class="keyword">int</span> = [<span class="number">5</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">x:=[...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125; <span class="comment">// infers size from number of initializers</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> x&#123;</span><br><span class="line">    fmt.Printf(<span class="string">"ind %d, val %d"</span>, i, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Slices"><a href="#Slices" class="headerlink" title="Slices"></a>Slices</h3><ul><li>A “window” on an underlying array</li><li><p>Variable size, up to the whole array</p></li><li><p><code>Pointer</code> indicates the start of the slice</p></li><li><code>Length</code></li><li><code>Capacity</code> is the max number of elts(elements)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr := [...]<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>&#125;</span><br><span class="line">s1:=arr[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">s2:=arr[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">fmt.Printf(<span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s))<span class="comment">// 3 7</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sli := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; <span class="comment">// this is a slice because no ... or number in the bracket</span></span><br></pre></td></tr></table></figure><h3 id="init-a-slice-directly"><a href="#init-a-slice-directly" class="headerlink" title="init a slice directly"></a>init a slice directly</h3><ul><li><p><code>make()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sli := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>)   <span class="comment">// 10 is the length</span></span><br><span class="line"></span><br><span class="line">sli := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>, <span class="number">15</span>) <span class="comment">// 15 is the capacity</span></span><br></pre></td></tr></table></figure></li><li><p><code>append()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sli = <span class="built_in">append</span>(sli, <span class="number">100</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h2><ul><li>Implementation of a hash map</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> idMap <span class="keyword">map</span>[<span class="keyword">string</span>][<span class="keyword">int</span>]</span><br><span class="line">idMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">idMap := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line">    <span class="string">"joe"</span>: <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">idMap[<span class="string">"joe"</span>] = <span class="number">456</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">delete</span>(idMap, <span class="string">"joe"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">id, p := idMap[<span class="string">"joe"</span>]   <span class="comment">// id is value, p is True/False the key in the map</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>(idMap)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, val := <span class="keyword">range</span> idMap&#123;</span><br><span class="line">    fmt.Println(key, val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="structs"><a href="#structs" class="headerlink" title="structs"></a>structs</h2><p>Person Struct<br>Name, Address, phone</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="keyword">struct</span> Person&#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    addr <span class="keyword">string</span></span><br><span class="line">    phone <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 Person</span><br><span class="line"></span><br><span class="line"><span class="comment">// dot notation to access struct fields</span></span><br><span class="line">p1.name = <span class="string">"joe"</span></span><br><span class="line">x1 = p1.addr</span><br><span class="line"></span><br><span class="line"><span class="comment">// init a struct</span></span><br><span class="line">p1 := <span class="built_in">new</span>(Person)</span><br><span class="line"></span><br><span class="line">p1 := Person(name: <span class="string">"joe"</span>, addr: <span class="string">"a st."</span>, phone: <span class="string">"123"</span>)</span><br></pre></td></tr></table></figure><h2 id="Protocols-and-Format"><a href="#Protocols-and-Format" class="headerlink" title="Protocols and Format"></a>Protocols and Format</h2><ul><li>Request for Comments (RFC)</li><li>Definition of Internet protocols and format<br>e.g.</li></ul><ul><li>HTML Hypertext Markup Language</li><li>URI Uniform Resource Identifier</li><li>HTTP Hypertext Transfer Protocol</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"net/http"</span></span><br><span class="line">http.Get(www.baidu.com)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"net"</span></span><br><span class="line">net.Dial(<span class="string">"tcp"</span>, <span class="string">"uci.edu:80"</span>)   <span class="comment">//make a tcp connect with the url</span></span><br></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>JavaScript Object Notation</p><ul><li><p>Go struct<br>p1 := Person(name:”joe”, addr: “a st.”)</p></li><li><p>equivalent JSON object<br>{“name”:”jow, “addr”:”a st.”}</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p1 := Person(name:<span class="string">"joe"</span>, addr:<span class="string">"aaa"</span>)</span><br><span class="line">barr, err:=json.Marshal(p1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 Person</span><br><span class="line">err := json.Unmarshal(barr, &amp;p2)</span><br></pre></td></tr></table></figure><ul><li><code>Marshal()</code> returns JSON representation as []byte</li><li><code>Unmarschal()</code> pointer passed to GO object and object must fit JSON  []byte </li></ul><h2 id="Files-Read-Write"><a href="#Files-Read-Write" class="headerlink" title="Files (Read, Write)"></a>Files (Read, Write)</h2><ul><li>Linear access, not random access</li></ul><p>Open, Read, write close seek(move read/write head)</p><p><code>ioutil File Read</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dat, e := ioutil.ReadFile(<span class="string">"test.txt"</span>)   <span class="comment">// content, error</span></span><br><span class="line"><span class="comment">// Explicit open/close are not needed</span></span><br><span class="line"><span class="comment">// Large files cause a problem (in RAM)</span></span><br><span class="line"></span><br><span class="line">dat = <span class="string">"JoJO"</span></span><br><span class="line">err:= ioutil.WriteFile(<span class="string">"out.txt"</span>, dat, <span class="number">0777</span>)    <span class="comment">// permission</span></span><br></pre></td></tr></table></figure><p><code>os.Open()</code></p><p><code>os.Close()</code></p><p><code>os.Read()</code> reads from a file into byte[]</p><p><code>os.Write()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f, err := os.Open(<span class="string">"dt.txt"</span>)</span><br><span class="line">barr :=<span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">10</span>) <span class="comment">// read 10 byte</span></span><br><span class="line">nb, err := f.Read(barr)</span><br><span class="line">f.Close()</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f, err := os.Create(<span class="string">"outfile.txt"</span>)</span><br><span class="line"></span><br><span class="line">barr:=[]<span class="keyword">byte</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">nb,err:=f.Write(barr)   <span class="comment">// write any unicode sequence</span></span><br><span class="line">nb,err:=f.WriteString(<span class="string">"Hi"</span>)</span><br></pre></td></tr></table></figure><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Printf(<span class="string">"Helllo, world."</span>)    <span class="comment">// main function called automatically</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Abstraction is hiding details that are less important</li></ul><h2 id="Call-by-Reference"><a href="#Call-by-Reference" class="headerlink" title="Call by Reference"></a>Call by Reference</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(y *<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    *y = *y + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    x:=<span class="number">2</span></span><br><span class="line">    foo(&amp;x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pros: copying time(no need to pass a whole array)<br>cons: data encapsulation</p><h2 id="Passing-Array-Arguments"><a href="#Passing-Array-Arguments" class="headerlink" title="Passing Array Arguments"></a>Passing Array Arguments</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(x [3]<span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a:=[<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">    fmt.Print(foo(a))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// modify by passing array pointers (messy and unnecessary)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(x *[3]<span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line">    (*x)[<span class="number">0</span>] = (*x)[<span class="number">0</span>] + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a:=[<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">    foo(&amp;a)</span><br><span class="line">    fmt.Print(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// using slices in go!!!</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(sli [])</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    sli[<span class="number">0</span>] = sli[<span class="number">0</span>] +<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;   <span class="comment">// no size</span></span><br><span class="line">    foo(a)</span><br><span class="line">    fmt.Print(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="First-Class-Values"><a href="#First-Class-Values" class="headerlink" title="First-Class Values"></a>First-Class Values</h2><ul><li>Functions can be treated like other types</li></ul><ul><li>Variables can be declared as a func</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funcVar <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">incFn</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    funcVar = incFn</span><br><span class="line">    fmt.Print(funcVar(<span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Functions as Arguments</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">applyIt</span><span class="params">(afunct <span class="keyword">func</span>(<span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">val</span> <span class="title">int</span>) <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> afunct(val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Anonymous Functions</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">applyIt</span><span class="params">(afunct <span class="keyword">func</span>(<span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">val</span> <span class="title">int</span>) <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> afunct(val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    v:= applyIt(<span class="function"><span class="keyword">func</span> <span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;<span class="keyword">return</span> x+<span class="number">1</span>&#125;, <span class="number">2</span>)</span><br><span class="line">    fmt.Println(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Function Defines a Function<br>ex: compute the distance between a point to a origin (variable)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MakeDistOrigin</span><span class="params">(o_x, o_y <span class="keyword">float64</span>)</span>  // 参数类型</span></span><br><span class="line"><span class="function">                <span class="title">func</span><span class="params">(<span class="keyword">float64</span>, <span class="keyword">float64</span>)</span> <span class="title">float64</span></span>&#123; <span class="comment">// 返回类型是一个函数</span></span><br><span class="line">    fn := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">float64</span>)</span> <span class="title">float64</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> math.Sqrt(math.Pow(x-o_x, <span class="number">2</span>) + math.Pow(y-o_y, <span class="number">2</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Dist1 := MakeDistOrigin(<span class="number">0</span>,<span class="number">0</span>)    <span class="comment">// return a function which can compute the distance from given point to (0,0)</span></span><br><span class="line">    Dist2 := MakeDistOrigin(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">    fmt.Println(Dist1(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">    fmt.Println(Dist2(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>environment along with a function</li></ul><h2 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h2><ul><li>function + its environment</li><li>when functions are passed/ returned, their environment comes with them</li></ul><p>in the previous example<br>o_x, o_y are the environment</p><p>闭包的好处</p><ol><li>希望一个变量长期保存内存中</li><li>避免全局变量污染</li><li>私有成员的存在。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拍卖</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeComparePrice</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123; <span class="comment">// 返回类型是一个函数,指定这个函数的参数类型和返回类型</span></span><br><span class="line">    o_price := <span class="number">5.0</span> <span class="comment">// := 是申明新的变量并赋值</span></span><br><span class="line">    fn := <span class="function"><span class="keyword">func</span><span class="params">(price <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> o_price &lt; price &#123;</span><br><span class="line">            o_price = price <span class="comment">// =是改变原来的o_price,这里不能使用o_price := price这样就是新的一个o_price</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o_price</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    comparePrice := makeComparePrice()</span><br><span class="line">    fmt.Println(comparePrice(<span class="number">4</span>))    <span class="comment">// 5</span></span><br><span class="line">    fmt.Println(comparePrice(<span class="number">6</span>))    <span class="comment">// 6</span></span><br><span class="line">    fmt.Println(comparePrice(<span class="number">980.424</span>))  <span class="comment">// 980.424</span></span><br><span class="line">    fmt.Println(comparePrice(<span class="number">1.23</span>))     <span class="comment">// 980.424</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Variadic-and-Deferred"><a href="#Variadic-and-Deferred" class="headerlink" title="Variadic and Deferred"></a>Variadic and Deferred</h2><ul><li>variable argument number</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getMax</span><span class="params">(val ...<span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    maxV := <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> vals&#123;</span><br><span class="line">        <span class="keyword">if</span> v&gt;maxV&#123;</span><br><span class="line">            maxV = V</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxV</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(getMax(<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>))</span><br><span class="line">    vslice := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>&#125;</span><br><span class="line">    fmt.Println(getMax(vslice...))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>defer <code>calling</code> function</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    i:=<span class="number">1</span></span><br><span class="line">    <span class="keyword">defer</span> fmt.Prinln(i+<span class="number">1</span>)   <span class="comment">// 2</span></span><br><span class="line">    i++</span><br><span class="line">    fmt.Println(<span class="string">"Hello"</span>!)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Classes-and-Encapsulation"><a href="#Classes-and-Encapsulation" class="headerlink" title="Classes and Encapsulation"></a>Classes and Encapsulation</h2><p><code>Encapsulation</code></p><ul><li>data can be protected from the programmer</li><li>data can be accessed by only methods</li></ul><p>Associating Methods with Data</p><ul><li><p>Method has a <code>receiver type</code> that it is associated with</p></li><li><p>Use dot notation to call the method</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInt <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mi MyInt)</span> <span class="title">Double</span><span class="params">()</span> <span class="title">int</span></span>&#123;   <span class="comment">// MyInt is the receiver type, this type has a method named Double(), we can call it by dot notation</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">int</span>(mi*<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    v:=MyInt(<span class="number">3</span>)</span><br><span class="line">    fmt.Println(v.Double())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>use struct<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Point type</span></span><br><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span>&#123;</span><br><span class="line">    x <span class="keyword">float64</span></span><br><span class="line">    y <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为Point类定义一个方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Point)</span> <span class="title">DistToOrig</span><span class="params">()</span></span>&#123;</span><br><span class="line">    t := math.Pow(p.x, <span class="number">2</span>) + math.Pow(p.y,<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> math.Sqrt(t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p1 := Point(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">    fmt.Println(p1.DistToOrig())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Controlling-Access"><a href="#Controlling-Access" class="headerlink" title="Controlling Access"></a>Controlling Access</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> data</span><br><span class="line"><span class="keyword">var</span> x <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrintX</span><span class="params">()</span></span>&#123;fmt.Println(x)&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"data"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    data.PrintX()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Controlling-Access-to-Structs"><a href="#Controlling-Access-to-Structs" class="headerlink" title="Controlling Access to Structs"></a>Controlling Access to Structs</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> data</span><br><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span>&#123;</span><br><span class="line">    x <span class="keyword">float64</span></span><br><span class="line">    y <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Point)</span> <span class="title">InitMe</span><span class="params">(xn, yn <span class="keyword">float64</span>)</span></span>&#123;</span><br><span class="line">    p.x = xn</span><br><span class="line">    p.y = yn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Point)</span> <span class="title">Scale</span><span class="params">(v <span class="keyword">float64</span>)</span></span>&#123;</span><br><span class="line">    p.x = p.x* v</span><br><span class="line">    p.y = p.y* v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p data.Point</span><br><span class="line">    p.InitMe(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">    p.Scale(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wrong, just the copy, do not change x coord at all</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    p1 := Point(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    p1.OffsetX(<span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// large receiver!!</span></span><br><span class="line"><span class="keyword">type</span> Image [<span class="number">100</span>][<span class="number">100</span>] <span class="keyword">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    i1:= GrabImage()</span><br><span class="line">    il.BlurImage()  <span class="comment">// 10000 ints copied to BlurImage()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(p *Point)</span> <span class="title">Offset</span><span class="params">(v <span class="keyword">float64</span>)</span></span>&#123;</span><br><span class="line">    p.x = p.x + v</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h2><ul><li>Ability for an object to have different forms depending on the context</li></ul><p>Overriding<br>Subclass redefines a method inherited from the superclass</p><p>-polumorphic</p><p>Interfaces</p><ul><li>Name, parameters, return values</li><li>Implementation is NOT defined</li></ul><p>Satisfying an Interface<br>implement all the methods(similar to inheritance with overriding)</p><p>additional functions permitted</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Shape2D <span class="keyword">interface</span>&#123;</span><br><span class="line">    Area() <span class="keyword">float64</span></span><br><span class="line">    Perimeter() <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Triangle&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(t Triangle)</span> <span class="title">Area</span><span class="params">()</span> <span class="title">float64</span></span>&#123;...&#125;    <span class="comment">// match to the func in Shape2D interface automatically</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(t Triangle)</span> <span class="title">Perimeter</span> <span class="title">float64</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure><h2 id="Concrete-vs-Interface-Types"><a href="#Concrete-vs-Interface-Types" class="headerlink" title="Concrete vs Interface Types"></a>Concrete vs Interface Types</h2><p>(data &amp; methods) vs (methods)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Speaker <span class="keyword">interface</span> &#123;Speak()&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;name <span class="keyword">string</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现Speaker里的Speak函数，无需指定Speaker名。有一个associated type是实现类型Dog</span></span><br><span class="line"><span class="comment">// x相当于Dog实现了Speaker的Speak函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Dog)</span> <span class="title">Speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(d.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s1 Speaker</span><br><span class="line">    <span class="keyword">var</span> d1 Dog&#123;<span class="string">"Brian"</span>&#125;</span><br><span class="line"></span><br><span class="line">    s1 = d1</span><br><span class="line">    s1.Speak()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>// var d1 *Dog       //legal, d1 has no concrete value, ca still call the Speak()<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d*Dog)</span> <span class="title">Speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> d == <span class="literal">nil</span>&#123;</span><br><span class="line">        fmt.Println(<span class="string">"&lt;noise&gt;"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        fmt.Println(d.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s1 Speaker</span><br><span class="line"><span class="keyword">var</span> d1 *Dog</span><br><span class="line">s1 = d1</span><br><span class="line">s1.Speak()</span><br></pre></td></tr></table></figure></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 任意实现Shape2D的图形都可以用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FitInYard</span><span class="params">(s Shape2D)</span> <span class="title">bool</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.Area()&gt;<span class="number">100</span> &amp;&amp; s.Perimeter()&gt;<span class="number">100</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> False</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不同图Type不同功能</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DrawRect</span><span class="params">(r Rectangle)</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DrawTriangle</span><span class="params">(t Triangle)</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DrawShape</span><span class="params">(s Shape2D)</span> <span class="title">bool</span></span>&#123;</span><br><span class="line">    <span class="comment">// rect, ok:= s.(Rectangle)</span></span><br><span class="line">    <span class="comment">// if ok&#123;</span></span><br><span class="line">    <span class="comment">//     DrawRect(rect)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// tri, ok:= s.(Triangle)</span></span><br><span class="line">    <span class="comment">// if ok&#123;</span></span><br><span class="line">    <span class="comment">//     DrawTriangle(tri)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">switch</span>:=sh:=s.(<span class="keyword">type</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> Rectangle:</span><br><span class="line">            DrawRect(sh)</span><br><span class="line">        <span class="keyword">case</span> Triangle:</span><br><span class="line">            DrawTriangle(tri)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Error-Interface"><a href="#Error-Interface" class="headerlink" title="Error Interface"></a>Error Interface</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span>&#123;</span><br><span class="line">    Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handling Errors</span></span><br><span class="line">f, err := os.Open(<span class="string">"/harris/test.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Why-use-concurrency"><a href="#Why-use-concurrency" class="headerlink" title="Why use concurrency"></a>Why use concurrency</h2><ul><li><p>Parallel Execution<br>Two programs execute in parallel if they execute at exactly the same time. (At time t, an instruction is being performed for both P! and P2) CPU1, CPU2</p></li><li><p>Von Neumann Bottleneck<br>a limitation on throughput on personal computer<br>With the processing becoming faster for processors, the memory transfer rates meet a limitation.</p></li></ul><p>To solve that:<br>Cache, Prefetching, Multithreading, DDR SDRAM</p><p>P = alpha * CFV^2</p><p>alpha is percent of time switching<br>C is capacitance<br>F is the clock frequency<br>V is voltage swing</p><p>Other concurrent tasks can operate while one task is waiting</p><h2 id="Processes-vs-Threads"><a href="#Processes-vs-Threads" class="headerlink" title="Processes vs. Threads"></a>Processes vs. Threads</h2><ul><li>Threads share some context</li><li>Many threads can exist in one process</li></ul><h2 id="Goroutines"><a href="#Goroutines" class="headerlink" title="Goroutines"></a>Goroutines</h2><ul><li>Like a thread in Go</li><li>Many Goroutines execute within a single OS thread</li></ul><p>switch the go routines like threads</p><h2 id="Interleaving"><a href="#Interleaving" class="headerlink" title="Interleaving"></a>Interleaving</h2><ul><li>Order of execution within a task is unknown</li><li>Order of execution <code>between</code> concurrent tasks is unknown</li><li>Interleaving of instructions between tasks is unknown</li></ul><p><code>Web</code><br>Threads are largely independent but not completely independent (some communication between)<br>Web server, one thread per client</p><p><code>Image processing</code><br>blur the pixels<br>1 thread per pixel block (GPU does)</p><p>some pixel values are shared between the neighbors</p><h2 id="Create-a-Goroutine"><a href="#Create-a-Goroutine" class="headerlink" title="Create a Goroutine"></a>Create a Goroutine</h2><ul><li>One goroutine is created automatically to execute the main()</li><li>Other goroutines are created using the go keyword</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">go</span> foo()    <span class="comment">// 使用go关键词, Main goroutine 不会block</span></span><br><span class="line">a = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>when the main goroutine end, all other goroutines will exit</p><h2 id="Exit-goroutines"><a href="#Exit-goroutines" class="headerlink" title="Exit goroutines"></a>Exit goroutines</h2><p>Early Exit<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">go</span> fmt.Printf(<span class="string">"New routine"</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"Main routine"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>Only “Main routine” is printed because Main finished before the new goroutine started.</li></ul><h2 id="Delayed-Exit"><a href="#Delayed-Exit" class="headerlink" title="Delayed Exit"></a>Delayed Exit</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">go</span> fmt.Printf(<span class="string">"New routine"</span>)</span><br><span class="line">    time.Sleep(<span class="number">100</span> * time.Millisecond)  <span class="comment">// Adding a delay to wait is bad because assumptions may be wrong</span></span><br><span class="line">    fmt.Printf(<span class="string">"Main routine"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Synchronization"><a href="#Synchronization" class="headerlink" title="Synchronization"></a>Synchronization</h2><ul><li><p>Using global events whose execution is viewed by all threads, simultaneously</p></li><li><p>GLOBAL EVENT is viewed by all tasks at the same time</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line">x = x+<span class="number">1</span></span><br><span class="line">GLOBAL EVENT</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> GLOBAL EVENT <span class="comment">// x has been updated</span></span><br><span class="line">    <span class="built_in">print</span> x</span><br></pre></td></tr></table></figure><p>Wait groups</p><ul><li>Sync package contains functions to synchronize between goroutines</li><li><code>sync.WaitGroup</code> forces a goroutine to wait for other goroutines</li><li>contains an internal counter</li></ul><ul><li>increment counter for each goroutine to wait for</li><li>decrement counter when each goroutine completes</li><li>Waiting goroutine cannot continue until counter is 0</li></ul><p>Using waitgroup</p><p>Add() increments the counter<br>Done() decrements the counter<br>Wait() blocks until counter == 0</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> foo(&amp;wg)</span><br><span class="line">wg.Wait() <span class="comment">// wait on one thread</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在foo里</span></span><br><span class="line">wg.Done()</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(wg *sync.WaitGroup)</span></span>&#123;</span><br><span class="line">    fmt.Printf(<span class="string">"New routine"</span>)</span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    wg.Add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> foo (&amp;wg)    <span class="comment">// 传递引用，免得copy一大堆过去</span></span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Printf(<span class="string">"Main routine"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Channels"><a href="#Channels" class="headerlink" title="Channels"></a>Channels</h2><ul><li>Transfer data between goroutines</li><li>Channels are typed</li><li>Use make() to create a channel<br>c:=make(chan int)</li><li>send and receive data usign the &lt;-</li><li>Send data on a channel<br>c&lt;-3</li><li>receive data from a channel<br>x := &lt;- c</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prod</span><span class="params">(v1 <span class="keyword">int</span>, v2 <span class="keyword">int</span>, c <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    c &lt;- v1 * v2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">go</span> prod(<span class="number">1</span>, <span class="number">2</span>, c)</span><br><span class="line">    <span class="keyword">go</span> prod(<span class="number">3</span>, <span class="number">4</span>, c)    <span class="comment">// In the same channel c</span></span><br><span class="line">    a:= &lt;-c</span><br><span class="line">    b:=&lt;-c</span><br><span class="line">    fmt.Println(a*b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>cache 是为了弥补高速设备和低速设备的鸿沟而引入的中间层，最终起到<strong>加快访问速度</strong>的作用。</li><li>而 buffer 的主要目的进行流量整形，把突发的大数量较小规模的 I/O 整理成平稳的小数量较大规模的 I/O，以<strong>减少响应次数</strong></li></ul><p>Unbuffered Channel cannot hold datta in transit<br>Sendind blocks until data is received<br>Receiving blocks until data is sent</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Task <span class="number">1</span></span><br><span class="line">c &lt;- <span class="number">3</span>  <span class="comment">// no buffer, has to wait for task 2 to receive</span></span><br><span class="line"></span><br><span class="line">One hour later</span><br><span class="line"></span><br><span class="line">Task <span class="number">2</span></span><br><span class="line">x := &lt;- c  <span class="comment">// wait task 1 to send</span></span><br></pre></td></tr></table></figure><p>So a <code>Wait()</code> should be here</p><h2 id="Channel-Capacity"><a href="#Channel-Capacity" class="headerlink" title="Channel Capacity"></a>Channel Capacity</h2><ul><li>channels can obtain a limited number of objects</li><li>Capacity is the number of objects it can hold in transit</li></ul><p>c:=make(chan int, 3)</p><ul><li>Sending only blocks if buffer is full</li><li>receiving only blocks if buffer is empty </li></ul><p>生产者线程-&gt;有限的缓冲区-&gt;消费者线程</p><ul><li>在缓冲区为空时，消费者不能再消费</li><li>缓冲区满时，生产者不能再进行生产</li></ul><h2 id="Iterate-through-a-channel"><a href="#Iterate-through-a-channel" class="headerlink" title="Iterate through a channel"></a>Iterate through a channel</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i:= <span class="keyword">range</span> c&#123;    <span class="comment">// i is the read value</span></span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>iterates when sender calls close(c)</li></ul><h2 id="Receiving-from-Multiple-Goroutines"><a href="#Receiving-from-Multiple-Goroutines" class="headerlink" title="Receiving from Multiple Goroutines"></a>Receiving from Multiple Goroutines</h2><ul><li>Multiple channels may be used to receive from multiple sources</li></ul><h2 id="Select-Statement"><a href="#Select-Statement" class="headerlink" title="Select Statement"></a>Select Statement</h2><ul><li><p>May have a choice of which data to use<br>-First come First served</p></li><li><p>use the select statement to wait on the first data from a set of channels</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只选第一个</span></span><br><span class="line"><span class="keyword">select</span>&#123;</span><br><span class="line">    <span class="keyword">case</span> a = &lt;- c1:</span><br><span class="line">        fmt.Println(a)</span><br><span class="line">    <span class="keyword">case</span> b = &lt;- c2:</span><br><span class="line">        fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>&#123;</span><br><span class="line">    <span class="keyword">case</span> a = &lt;- inchan:</span><br><span class="line">        fmt.Println(<span class="string">"Received a"</span>)</span><br><span class="line">    <span class="keyword">case</span> b = &lt;- outchan:</span><br><span class="line">        fmt.Println(<span class="string">"Send b"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Select with an Abort Channel</p><p>Producer-consumer<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>&#123;    <span class="comment">//infinite for loop keep receiving</span></span><br><span class="line">    <span class="keyword">select</span>&#123;</span><br><span class="line">        <span class="keyword">case</span> a &lt;- c:</span><br><span class="line">            fmt.Println(a)  <span class="comment">// keep receivinf and processing</span></span><br><span class="line">        <span class="keyword">case</span> &lt;-abort:       <span class="comment">// abort channel maybe enter quit, 如果有东西到abort channel上了，就会return</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>&#123;</span><br><span class="line">    <span class="keyword">case</span> a=&lt;-c1:</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    <span class="keyword">case</span> b=&lt;-c2:</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    <span class="keyword">default</span>:    <span class="comment">// default case do not block</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mutual-Exclusion"><a href="#Mutual-Exclusion" class="headerlink" title="Mutual Exclusion"></a>Mutual Exclusion</h2><p>Two goroutines write to a shared variable can interfere with each other.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// not corrent!!</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    wg.Add(<span class="number">2</span>)   <span class="comment">// create 2 goroutines</span></span><br><span class="line">    <span class="keyword">go</span> inc()</span><br><span class="line">    <span class="keyword">go</span> inc()</span><br><span class="line">    wg.Wait()   <span class="comment">// wait for the two routines</span></span><br><span class="line">    fmt.Println(i)  <span class="comment">// i should equal 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>seems no problem and i should equal 2??</p><p><strong>Granularity of Concurrency</strong><br>i = i+1 might be three machine instructions<br>read i<br>increment<br>write i</p><p>Interleaving machine instructions<br>|Task 1|Task2|i|<br>|—|—|—|<br>|read i||0|<br>||read i|0|<br>|inc||1|<br>|write i||1|<br>||inc|1|<br>||write i|1|</p><p>Correct Sharing</p><ul><li>Don’t let 2 goroutines write to a shared variable at the same time</li><li>Mutual Exclusion</li></ul><p>Sync.Mutex</p><ul><li>A Mutex ensures mutual exclusion</li><li>uses a binary semaphore</li><li>Flag up - shared variable is in use</li><li><p>Flag down - shared variable is available</p></li><li><p><code>Lock()</code> method puts the flag up - shared variale i use</p></li><li><code>Unlock()</code> method puts the flag down<br>When Unlock() is called, a Lock() can be proceed</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> mut sync.Mutex</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mut.Lock()</span><br><span class="line">    i = i+<span class="number">1</span></span><br><span class="line">    mut.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Synchronous-Initialization"><a href="#Synchronous-Initialization" class="headerlink" title="Synchronous Initialization"></a>Synchronous Initialization</h2><p>Initialization must happen once and before everything else<br>Sync.Once</p><ul><li>Has one method, <code>once.Do(f)</code></li><li>Function f is executed only one time even if it is ccalled in multiple gotoutines</li><li>All calls to once.Do() block until the first returns</li></ul><ul><li>Ensures that init executes first</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">go</span> dostuff()</span><br><span class="line">    <span class="keyword">go</span> dostuff()</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> on sync.Once</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Pringln(<span class="string">"Init"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dostuff</span><span class="params">()</span></span>&#123;</span><br><span class="line">    on.Do(setup)</span><br><span class="line">    fmt.Println(<span class="string">"hello"</span>)</span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//result</span></span><br><span class="line"><span class="comment">// Init</span></span><br><span class="line"><span class="comment">// hello</span></span><br><span class="line"><span class="comment">// hello</span></span><br></pre></td></tr></table></figure><h2 id="Deadlock-example"><a href="#Deadlock-example" class="headerlink" title="Deadlock example"></a>Deadlock example</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dostuff</span><span class="params">(c1 <span class="keyword">chan</span> <span class="keyword">int</span>, c2 <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    &lt;- c1</span><br><span class="line">    c2 &lt;- <span class="number">1</span></span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">go</span> dostuff(ch1, ch2)</span><br><span class="line">    <span class="keyword">go</span> dostuff(ch2, ch1)</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Golang detects when all goroutine are deadlocks, but cannot detect subset of goroutines are deadlocks</p><h2 id="Dining-Philosophers-Problem"><a href="#Dining-Philosophers-Problem" class="headerlink" title="Dining Philosophers Problem"></a>Dining Philosophers Problem</h2><p>Each chopstick is a mutex<br>Each philosopher is associated with a goroutine and two chopsticks</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ChopS <span class="keyword">struct</span>&#123; sync.Mutex&#125;</span><br><span class="line"><span class="keyword">type</span> Philo <span class="keyword">struct</span>&#123;</span><br><span class="line">    leftCS, rightCS *ChopS</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Philo)</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>&#123;</span><br><span class="line">        <span class="comment">// All people will lock the chopstick on their left side firstly</span></span><br><span class="line">        p.leftCS.Lock()</span><br><span class="line">        p.rightCS.Lock()</span><br><span class="line"></span><br><span class="line">        fmt.Println(<span class="string">"eating"</span>)</span><br><span class="line"></span><br><span class="line">        p.rightCS.UnLock()</span><br><span class="line">        p.leftCS.UnLock()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// init</span></span><br><span class="line">CSticks := <span class="built_in">make</span>([]*ChopS, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++&#123;</span><br><span class="line">    CStick[i] = <span class="built_in">new</span>(ChopS)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">philos := <span class="built_in">make</span>([]*Philo, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++&#123;</span><br><span class="line">    philos[i] = &amp;Philo&#123;CSticks[i], CSticks[(i+<span class="number">1</span>)%<span class="number">5</span>]&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// start eating</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++&#123;</span><br><span class="line">    <span class="keyword">go</span> philos[i].eat()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个人拿最小的<br>Solution<br>change to &amp;Philo{CSticks[min(i, (i+1)%5)], CSticks[max(i, (i+1)%5)]}</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Internet programming</title>
      <link href="/blog/2019/10/14/Internet-programming/"/>
      <url>/blog/2019/10/14/Internet-programming/</url>
      
        <content type="html"><![CDATA[<h1 id="Internet-programming-笔记"><a href="#Internet-programming-笔记" class="headerlink" title="Internet programming 笔记"></a>Internet programming 笔记</h1><a id="more"></a><h2 id="note1"><a href="#note1" class="headerlink" title="note1"></a>note1</h2><p><code>http</code>: hypertext transfer protocol, the underlying protocol used by the WWW and this protocol defines how messages are formatted and transmitted,</p><p>and what actions Web servers and browsers should take in response to various commands.</p><p><code>https</code>: http over secure</p><p><code>session</code>: a temporary and interactive information interchange between two or more communicating devices or between computer and user.</p><p><code>Internet</code> vs <code>WWW</code> : Internet is a global network comprised of computers( conceptualized during 1969, APRA), World Wide Web is a collection of web pages following Http that can be accessed via the Internet from any part of the world.</p><p><code>Cookie</code>: a small piece of data sent from a website and stored on the user’s computer by the user’s web browser. It can record user’s browsing activity and remember stateful information and arbitrary information that user entered into form fields.</p><p><code>JSP</code>: JSP stands for Java Server Pages, which helps developers to create dynamically web pages based on HTML, XML, or other types.</p><p><code>Servlets</code>: are Java programs that are already compiled which also creates dynamic web content.</p><p><code>HTML</code>: HyperText Markup Language, the authoring language used to create documents on the World Wide Web</p><p><code>javascript</code>: make web pages dynamic and interactive by implementing client-side scripts.</p><p><code>css</code>: Cascading Style Sheets is a language that describes the style of an HTML document.</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Screen Design</title>
      <link href="/blog/2019/05/22/ScreenDesign/"/>
      <url>/blog/2019/05/22/ScreenDesign/</url>
      
        <content type="html"><![CDATA[<h1 id="A-brief-introduction-of-Screen-Design"><a href="#A-brief-introduction-of-Screen-Design" class="headerlink" title="A brief introduction of Screen Design"></a>A brief introduction of Screen Design</h1><blockquote><p>Design, 50% instinct, 50% hard work.</p></blockquote><a id="more"></a><h2 id="Gestalt-pyschology"><a href="#Gestalt-pyschology" class="headerlink" title="Gestalt pyschology"></a>Gestalt pyschology</h2><blockquote><p>The whole(unity) is greater than the sum of its parts.(Aristotle)</p></blockquote><p><br><br><div class="row">    <embed src="Handout01-GestaltPsychology.pdf" width="100%" height="550" type="application/pdf"></div><br><br></p><h2 id="Composition-Symmetry-and-Balance"><a href="#Composition-Symmetry-and-Balance" class="headerlink" title="Composition, Symmetry and Balance"></a>Composition, Symmetry and Balance</h2><blockquote><p>Pictures need a frame for their composition. Youe must know where is the end of the picture and where begins reality.</p></blockquote><ul><li><code>Composition with perspective</code></li><li>not in the middle</li><li>Symmetry in the composition and in the meaning</li><li>Golden section</li></ul><p><br><br><div class="row">    <embed src="Handout03_Composition.pdf" width="100%" height="550" type="application/pdf"></div><br><br></p><h2 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h2><blockquote><p>color palettes</p></blockquote><p><br><br><div class="row">    <embed src="Handout04_Color.pdf" width="100%" height="550" type="application/pdf"></div><br><br></p><h2 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h2><p><br><br><div class="row">    <embed src="Handout05_Grid.pdf" width="100%" height="550" type="application/pdf"></div><br><br></p><h2 id="Logo"><a href="#Logo" class="headerlink" title="Logo"></a>Logo</h2><ul><li>from <code>tangram</code> 七巧板 to logotype</li><li><code>pictogram</code> 象形符号</li></ul><p><br><br><div class="row">    <embed src="06_Logo.pdf" width="100%" height="550" type="application/pdf"></div><br><br></p><h2 id="Typography"><a href="#Typography" class="headerlink" title="Typography"></a>Typography</h2><ul><li>Leading</li><li>captical letter</li><li>typographie</li></ul><p><br><br><div class="row">    <embed src="Handout07_Typography.pdf" width="100%" height="550" type="application/pdf"></div><br><br></p><h2 id="Design-Thinking"><a href="#Design-Thinking" class="headerlink" title="Design Thinking"></a>Design Thinking</h2><p><br><br><div class="row">    <embed src="08_DesignThinking.pdf" width="100%" height="550" type="application/pdf"></div><br><br></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>DSP_SwarmIntelligence</title>
      <link href="/blog/2019/05/21/DSP-SwarmIntelligence/"/>
      <url>/blog/2019/05/21/DSP-SwarmIntelligence/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Swarm intelligence (SI) is the collective behavior of decentralized, self-organized systems, natural or artificial. The concept is employed in work on artificial intelligence. The expression was introduced by Gerardo Beni and Jing Wang in 1989, in the context of cellular robotic systems</p></blockquote><a id="more"></a><blockquote><p>How can we implement the coordination among the groups?</p></blockquote><p>flask-&gt;waterholr-&gt;on and another</p><p>predator-&gt;flask split-&gt; </p><ol start="2"><li>knowledge accumulated to concesus</li></ol><p>penguin<br>-40 together to brook the temperature<br>huddle tiny streps away<br>shift and rotate fro, back to front<br>not let the </p><p>overheat-&gt;breakdown</p><p>step by step huddle after huddle</p><p>mayfly</p><p>flock of fish collide with predator </p><blockquote><p>pheromone 信息素</p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>java网络编程</title>
      <link href="/blog/2019/05/18/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/blog/2019/05/18/java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="java网络编程"><a href="#java网络编程" class="headerlink" title="java网络编程"></a>java网络编程</h1><a id="more"></a><h2 id="任务一-TCP实现逆序字符串输出"><a href="#任务一-TCP实现逆序字符串输出" class="headerlink" title="任务一 TCP实现逆序字符串输出"></a>任务一 TCP实现逆序字符串输出</h2><blockquote><p>客户端想要发一行字符行给服务器端然后得到一个逆序的字符行。</p></blockquote><h3 id="SocketClient-java"><a href="#SocketClient-java" class="headerlink" title="SocketClient.java"></a>SocketClient.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketClient</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> UnknownHostException, IOException </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">54321</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// get input stream</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// get output stream</span></span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line"><span class="comment">// write string into server</span></span><br><span class="line">ps.println(sc.nextLine());</span><br><span class="line"></span><br><span class="line"><span class="comment">// print the reversed string from server</span></span><br><span class="line">System.out.println(br.readLine());</span><br><span class="line"></span><br><span class="line">socket.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SocketServer-java"><a href="#SocketServer-java" class="headerlink" title="SocketServer.java"></a>SocketServer.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketServer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">54321</span>);</span><br><span class="line">System.out.println(<span class="string">"Server is on, binded to 54321 port"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">final</span> Socket socket = server.accept();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// get the input stream</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">String line = br.readLine();</span><br><span class="line">line = <span class="keyword">new</span> StringBuilder(line).reverse().toString();</span><br><span class="line">ps.println(line);</span><br><span class="line">socket.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>建立Socket连接</p><p> 客户端Socket指定host和port，服务器Socket使用给定的ServerSocket绑定port即可再调用accept函数，当客户端运行时，会找到指定的host:port，建立和服务器的连接</p></li><li><p>通信</p><p>服务器的输入流就是客户端的输出流，反之亦然。<br>在服务器和客户端都写一个BufferedReader（简称br）用来输入，和一个PrintStream（简称ps）用来输出。我客户端要发一个字符串，就用ps.println输出；服务器要接收就用br.readLine接收（接收就是输入流）；然后我服务器逆序一下字符串用ps输出，客户端用br再接收就是逆序的字符串了。</p></li></ol><table><thead><tr><th style="text-align:center">客户端</th><th style="text-align:center"></th><th style="text-align:center">服务器</th></tr></thead><tbody><tr><td style="text-align:center">ps输出</td><td style="text-align:center">-&gt;</td><td style="text-align:center">br接收</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">reverse字符串</td></tr><tr><td style="text-align:center">br接收</td><td style="text-align:center">&lt;-</td><td style="text-align:center">ps输出</td></tr></tbody></table><ul><li>有一个误区就是ps的println不是系统的输出，而是把这一行放到服务器和客户端的交流通道里，客户端println输出，服务器就可以用输入的方式读取了，反之亦然</li></ul><hr><h2 id="任务二-UDP实现简单计算通信"><a href="#任务二-UDP实现简单计算通信" class="headerlink" title="任务二 UDP实现简单计算通信"></a>任务二 UDP实现简单计算通信</h2><blockquote><p>使用UDP完成简单计算，比如客户端输入3*4，服务端输出12；客户端输入9/3，服务端输出3</p></blockquote><h3 id="UDPclient-java"><a href="#UDPclient-java" class="headerlink" title="UDPclient.java"></a>UDPclient.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPclient</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compute</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">String pattern = <span class="string">"(\\d*)([\\+\\-\\*\\/])(\\d*)"</span>;</span><br><span class="line">Pattern r = Pattern.compile(pattern);</span><br><span class="line">Matcher m = r.matcher(s);</span><br><span class="line"><span class="keyword">int</span> consequence = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(m.find())&#123;   <span class="comment">// necessary!</span></span><br><span class="line"><span class="keyword">int</span> leftInt = Integer.parseInt(m.group(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">char</span> operator = m.group(<span class="number">2</span>).charAt(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> rightInt = Integer.parseInt(m.group(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(operator) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">            consequence = leftInt + rightInt;</span><br><span class="line">            <span class="keyword">break</span>;   <span class="comment">// important!</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">consequence = leftInt - rightInt;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">consequence = leftInt * rightInt;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">consequence = leftInt / rightInt;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> consequence;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">//            byte[] bytes = sc.nextLine().getBytes();</span></span><br><span class="line">    String test =sc.nextLine();</span><br><span class="line">    <span class="keyword">int</span> result1 = compute(test);</span><br><span class="line">        System.out.println((<span class="keyword">int</span>) result1);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = (<span class="string">""</span>+result1).getBytes();</span><br><span class="line">    </span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(bytes, bytes.length);</span><br><span class="line">        packet.setAddress(InetAddress.getByName(<span class="string">"127.0.0.1"</span>));</span><br><span class="line">        packet.setPort(<span class="number">55555</span>);</span><br><span class="line">        socket.send(packet);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UDPserver-java"><a href="#UDPserver-java" class="headerlink" title="UDPserver.java"></a>UDPserver.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPserver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">55555</span>);</span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buf, buf.length);</span><br><span class="line">            socket.receive(packet);</span><br><span class="line">            <span class="keyword">byte</span>[] data = packet.getData();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(data, <span class="number">0</span>, data.length));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我在客户端计算了result，因为UDP传递的是数据包，我们把然后把这个result存放在byte数组中，再放到数据包中，用客户端socket的send发送，就可以用服务器端socket的receive接收了。可以看出，我server不用开，client也能发送，就是永远送不到server了，这就是丢包的原理。TCP则是要先建立连接，就保证了数据是能送到位的。其它UDP和TCP的区别：</p><p>1、基于连接与无连接；</p><p>2、对系统资源的要求（TCP较多，UDP少）；</p><p>3、UDP程序结构较简单；</p><p>4、流模式与数据报模式 ；</p><p>5、TCP保证数据正确性，UDP可能丢包；</p><p>6、TCP保证数据顺序，UDP不保证。</p><p><a href="https://zhuanlan.zhihu.com/p/24860273" target="_blank" rel="noopener">参考来源</a></p><hr><h2 id="任务三-多线程实现多客户端通信"><a href="#任务三-多线程实现多客户端通信" class="headerlink" title="任务三 多线程实现多客户端通信"></a>任务三 多线程实现多客户端通信</h2><blockquote><p>建立25个线程，把它建立连接的时间戳、发送信息的时间戳和2秒后断开的时间戳信息，发给服务器显示。</p></blockquote><h3 id="Server-java"><a href="#Server-java" class="headerlink" title="Server.java"></a>Server.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">ServerSocket serve = <span class="keyword">new</span> ServerSocket(<span class="number">54322</span>);</span><br><span class="line">System.out.println(<span class="string">"Server is on and binded to 54322 port"</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">final</span> Socket socket = serve.accept();</span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line"></span><br><span class="line">System.out.println(br.readLine()); <span class="comment">// receive the timestamp info of</span></span><br><span class="line"><span class="comment">// connection and sending infomation</span></span><br><span class="line"></span><br><span class="line">System.out.println(br.readLine()); <span class="comment">// receive the timestamp info of</span></span><br><span class="line"><span class="comment">// disconnection</span></span><br><span class="line">socket.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MutipleClients-java"><a href="#MutipleClients-java" class="headerlink" title="MutipleClients.java"></a>MutipleClients.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MutipleClients</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">25</span>; i++) &#123;</span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">54322</span>);</span><br><span class="line">String Stamp1 = <span class="keyword">new</span> Timestamp(System.currentTimeMillis()).toString();</span><br><span class="line"></span><br><span class="line">Thread t = Thread.currentThread();</span><br><span class="line"></span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">String Stamp2 = <span class="keyword">new</span> Timestamp(System.currentTimeMillis()).toString();</span><br><span class="line"></span><br><span class="line">ps.println(<span class="string">"Client "</span> + t.getId() + <span class="string">" connected at "</span> + Stamp1 + <span class="string">" and sent timestamp "</span> + Stamp2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">String Stamp3 = <span class="keyword">new</span> Timestamp(System.currentTimeMillis()).toString();</span><br><span class="line">ps.println(<span class="string">"Client "</span> + t.getId() + <span class="string">" disconnected at "</span> + Stamp3);</span><br><span class="line">socket.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一个服务器与25个客户端进行连接，需要用while(True)使之一直处于accept状态。</p></blockquote><blockquote><p>服务器要接收两行信息，第一行客户端发来(println)的连接与发送信息时间戳，第二行是过一段时间客户端发来的结束时间戳。</p></blockquote><hr><h2 id="任务四-RMI实现远程方法调用"><a href="#任务四-RMI实现远程方法调用" class="headerlink" title="任务四 RMI实现远程方法调用"></a>任务四 RMI实现远程方法调用</h2><blockquote><p>前面我们看到的都是在客户端处理好数据送给服务器，让服务器进行输出。那有什么办法在服务器上定义一些接口，然后在本地调用呢？</p></blockquote><p>这就是RMI(remote method invocation)。本地调用方法时实质上是传给服务器该方法的引用，让服务器调用该方法，然后return给本地结果。本地有stub，是远程对象在本地的代理(proxy),类似于RPC系统中的clinet stub。</p><blockquote><p>RMI的实现首先要发现远程对象，那就必须要开启注册表(RTegistry)，什么是注册表？</p></blockquote><p>拿DNS来类比最为方便，DNS相当于一种注册表。它建立了IP地址和域名的对应，IP就是对远程对象的引用，域名就是远程对象的标识符。格式类似于 <code>rmi://host:port/name</code>。<code>host</code>指明注册表运行的注解，<code>port</code>表明接收调用的端口，<code>name</code>是一个标识该对象的简单名称。<br>下面代码用LocateRegistry.createRegistry方法确定了注册表。再进行bind或rebind操作就可以连接了。</p><h3 id="远程接口"><a href="#远程接口" class="headerlink" title="远程接口"></a>远程接口</h3><blockquote><p>IHello.java </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define remote interface</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IHello</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helloWorld</span><span class="params">()</span><span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><blockquote><p>Hello.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define the implementation class</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">IHello</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">Hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helloWorld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello!"</span>);</span><br><span class="line"><span class="keyword">return</span> ++index;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><blockquote><p>HelloServer.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">IHello rhello = <span class="keyword">new</span> Hello();</span><br><span class="line">Registry registry = LocateRegistry.createRegistry(<span class="number">8888</span>);</span><br><span class="line">registry.bind(<span class="string">"test"</span>,rhello);  <span class="comment">// in client side rmi://localhost:8888/test</span></span><br><span class="line">System.out.println(<span class="string">"Remote Hello Object is bound succesfully!"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><blockquote><p>HelloClient.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloClient</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line">IHello rhello = (IHello) Naming.lookup(<span class="string">"rmi://192.168.31.102:8888/test"</span>);</span><br><span class="line">System.out.println(rhello.helloWorld());</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学校 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SWEII_TEST</title>
      <link href="/blog/2019/05/17/SWEII-TEST/"/>
      <url>/blog/2019/05/17/SWEII-TEST/</url>
      
        <content type="html"><![CDATA[<h3 id="4-types-of-coverage-in-testing"><a href="#4-types-of-coverage-in-testing" class="headerlink" title="4 types of coverage in testing"></a>4 types of coverage in testing</h3><a id="more"></a><p><img src="/blog/blog/2019/05/17/SWEII-TEST/1.jpg" alt="1"></p><hr><p><img src="/blog/blog/2019/05/17/SWEII-TEST/2.jpg" alt="2"></p><p>branch coverage&gt;statement coverage because it can examine empty else statement</p><hr><p><img src="/blog/blog/2019/05/17/SWEII-TEST/3.jpg" alt="3"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学校 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DSP_ConsistentModel_Ex</title>
      <link href="/blog/2019/05/17/DSP_ConsistenctModel/"/>
      <url>/blog/2019/05/17/DSP_ConsistenctModel/</url>
      
        <content type="html"><![CDATA[<h1 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h1><a id="more"></a><h1 id="P17"><a href="#P17" class="headerlink" title="P17"></a>P17</h1><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">VC</th><th style="text-align:center">LA</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td style="text-align:center">(1,0,0,0)</td><td style="text-align:center">1.1</td></tr><tr><td style="text-align:center">b</td><td style="text-align:center">(2,1,0,0)</td><td style="text-align:center">2.1</td></tr><tr><td style="text-align:center">c</td><td style="text-align:center">(3,1,0,0)</td><td style="text-align:center">3.1</td></tr><tr><td style="text-align:center">d</td><td style="text-align:center">(4,3,2,0)</td><td style="text-align:center">6.1</td></tr><tr><td style="text-align:center">e</td><td style="text-align:center">(5,5,2,2)</td><td style="text-align:center">7.1</td></tr><tr><td style="text-align:center">f</td><td style="text-align:center">(6,5,4,2)</td><td style="text-align:center">8.1</td></tr><tr><td style="text-align:center">g</td><td style="text-align:center">(7,5,4,2)</td><td style="text-align:center">9.1</td></tr><tr><td style="text-align:center">h</td><td style="text-align:center">(0,1,0,0)</td><td style="text-align:center">1.2</td></tr><tr><td style="text-align:center">i</td><td style="text-align:center">(1,2,1,0)</td><td style="text-align:center">3.2</td></tr><tr><td style="text-align:center">j</td><td style="text-align:center">(1,3,1,0)</td><td style="text-align:center">4.2</td></tr><tr><td style="text-align:center">k</td><td style="text-align:center">(1,4,1,2)</td><td style="text-align:center">5.2</td></tr><tr><td style="text-align:center">l</td><td style="text-align:center">(1,5,1,2)</td><td style="text-align:center">6.2</td></tr><tr><td style="text-align:center">m</td><td style="text-align:center">(4,6,2,4)</td><td style="text-align:center">9.2</td></tr><tr><td style="text-align:center">n</td><td style="text-align:center">(7,7,4,4)</td><td style="text-align:center">10.2</td></tr><tr><td style="text-align:center">o</td><td style="text-align:center">(1,0,1,0)</td><td style="text-align:center">2.3</td></tr><tr><td style="text-align:center">p</td><td style="text-align:center">(1,3,2,0)</td><td style="text-align:center">5.3</td></tr><tr><td style="text-align:center">q</td><td style="text-align:center">(3,3,3,0)</td><td style="text-align:center">6.3</td></tr><tr><td style="text-align:center">r</td><td style="text-align:center">(3,3,4,0)</td><td style="text-align:center">7.3</td></tr><tr><td style="text-align:center">s</td><td style="text-align:center">(1,0,0,1)</td><td style="text-align:center">2.4</td></tr><tr><td style="text-align:center">t</td><td style="text-align:center">(1,0,0,2)</td><td style="text-align:center">3.4</td></tr><tr><td style="text-align:center">u</td><td style="text-align:center">(4,3,2,3)</td><td style="text-align:center">7.4</td></tr><tr><td style="text-align:center">v</td><td style="text-align:center">(4,3,2,4)</td><td style="text-align:center">8.4</td></tr></tbody></table><blockquote><p>Total/Partial order</p></blockquote><ul><li>add process num the timestamp belongs</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Equicalence Partitioning Class</title>
      <link href="/blog/2019/05/02/EC/"/>
      <url>/blog/2019/05/02/EC/</url>
      
        <content type="html"><![CDATA[<p>在软件工程中，常常遇到测试数据不完全而不能有效地测试出bug的过程，这个时候需要对所有输出进行划分，同时在边界需要格外注意，多测试几组边界值。</p><ul><li>empty digits</li><li>characters</li></ul><ul><li>六位id的可写成 id = {num|num = (\d){6,6}}</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>ds5</title>
      <link href="/blog/2019/04/26/ds5/"/>
      <url>/blog/2019/04/26/ds5/</url>
      
        <content type="html"><![CDATA[<h1 id="4-26笔记"><a href="#4-26笔记" class="headerlink" title="4-26笔记"></a>4-26笔记</h1><a id="more"></a><h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><blockquote><p>fat client</p><ul><li>microsoft excel</li></ul></blockquote><blockquote><p>thin client</p><ul><li>automatioc flight check-in machine </li></ul></blockquote><h2 id="18"><a href="#18" class="headerlink" title="18"></a>18</h2><p>which is on client and which on server</p><h2 id="27"><a href="#27" class="headerlink" title="27"></a>27</h2><p>localhost：在计算机网络中，localhost（意为“本地主机”，指“这台计算机”）是给回路网络接口（loopback）的一个标准主机名，相对应的IP地址为127.0.0.1（IPv4）和[::1]（IPv6）。<br>127.0.0.1是回送地址，指本地机。<br>127.0.0.1是用来检测网络的自己的IP.就是说任何一台电脑来说,不管是否连接到INTERNET上,127.0.0.1对于自己来说都是自己.就是说,每台电脑都是由4位的256进制数组成的.<br>而192.168.1.102现在是本机，但本机也可以设置成其他ip地址，但127.0.0.1一定是指本机。</p><h2 id="JAVA-client-server-简单例子"><a href="#JAVA-client-server-简单例子" class="headerlink" title="JAVA client-server 简单例子"></a>JAVA client-server 简单例子</h2><h3 id="Socketclient-java"><a href="#Socketclient-java" class="headerlink" title="Socketclient.java"></a>Socketclient.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketClient</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> UnknownHostException, IOException </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">54321</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// get input stream</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// get output stream</span></span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line"><span class="comment">// write string into server</span></span><br><span class="line">ps.println(sc.nextLine());</span><br><span class="line"></span><br><span class="line"><span class="comment">// print the reversed string from server</span></span><br><span class="line">System.out.println(br.readLine());</span><br><span class="line"></span><br><span class="line">socket.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">-</span><br></pre></td></tr></table></figure><h3 id="SocketServer-java"><a href="#SocketServer-java" class="headerlink" title="SocketServer.java"></a>SocketServer.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketServer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">54321</span>);</span><br><span class="line">System.out.println(<span class="string">"Server is on, binded to 54321 port"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">final</span> Socket socket = server.accept();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// get the input stream</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">String line = br.readLine();</span><br><span class="line">line = <span class="keyword">new</span> StringBuilder(line).reverse().toString();</span><br><span class="line">ps.println(line);</span><br><span class="line">socket.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学校 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java基础</title>
      <link href="/blog/2019/04/22/java%E5%9F%BA%E7%A1%80/"/>
      <url>/blog/2019/04/22/java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA-入门到放弃"><a href="#JAVA-入门到放弃" class="headerlink" title="JAVA 入门到放弃"></a>JAVA 入门到放弃</h1><a id="more"></a><h2 id="Access-modifiers-specifiers-in-java"><a href="#Access-modifiers-specifiers-in-java" class="headerlink" title="Access modifiers(specifiers) in java"></a>Access modifiers(specifiers) in java</h2><hr><h3 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h3><ul><li>基类的 protected 成员是包内可见的，并且对子类可见；</li><li>若子类与基类不在同一包中，那么在子类中，子类实例可以访问其从基类继承而来的protected方法，而不能访问基类实例的protected方法。</li></ul><p><a href="https://blog.csdn.net/justloveyou_/article/details/61672133" target="_blank" rel="noopener">detail</a></p><hr><h3 id="overload"><a href="#overload" class="headerlink" title="overload"></a>overload</h3><p>each overloaded method must take a unique list of the argument types</p><hr><h3 id="override"><a href="#override" class="headerlink" title="override"></a>override</h3><p>（1）重写方法必须和被重写方法具有相同的参数列表（包括顺序及个数还有类型），返回类型必须和被重写方法的返回类型相同或者是返回类型的子类型。</p><p>（2）重写方法的访问控制修饰符不能比被重写方法更严格（比如一个在父类中声明为public的方法重写成一个protected的方法）。</p><p>（3）只有实例方法才能被重写，超类中的static和final方法不能被重写。</p><p>（4）重写方法不能抛出新的检查异常，或者是抛出比被重写方法声明的检查异常更广泛的检查异常。</p><p>（5）注意一种特殊情况：如果超类的方法版本中声明了检查异常，但重写的子类方法中没有声明，这时如果使用多态的方式进行调用，那么编译器认为你调用的是声明了异常的方法。</p><p>（6）尽管多态是在编译时确定对象的类型，但在编译时，还是根据父类的方法声明进行程序检查。因此，如果子类中定义的方法，在父类中没有定义，则会出项编译错误。</p><hr><h3 id="upcast"><a href="#upcast" class="headerlink" title="upcast"></a>upcast</h3><p>the act of converting a subclass reference into a baseclass reference</p><p>缺点：使用向上转型时不能调用子类特有的方法了</p><p>优点：一个父类有多个子类时，一个子类重写了许多父类的方法，可以声明一个public static函数统一对<br>每个属于父类的子类进行操作，节省代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spycsh</span></span><br><span class="line"><span class="comment"> * 2019-04-28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String carDescription = <span class="string">"Car"</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"父类run方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"父类speed方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> carDescription;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Benz</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Benz:run方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Benz:speed方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMW</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"BMW:run方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"BMW:speed方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Porsche</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String carDescription = <span class="string">"Porsche is the best!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Porche:run方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Porche:speed方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Porche:price方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> carDescription;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpcastEX</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> car</span></span><br><span class="line"><span class="comment"> *  !upcast</span></span><br><span class="line"><span class="comment"> *  without upcast you need to define show method for each car brand</span></span><br><span class="line"><span class="comment"> *  save code amount</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">car.run();</span><br><span class="line">car.speed();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showAll</span><span class="params">(Car[] e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(Car i:e) &#123;</span><br><span class="line">show(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Car[] carFleet = &#123;</span><br><span class="line"><span class="keyword">new</span> Benz(),</span><br><span class="line"><span class="keyword">new</span> BMW(),</span><br><span class="line"><span class="keyword">new</span> Porsche()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">showAll(carFleet);</span><br><span class="line"></span><br><span class="line">Car porsche911 = <span class="keyword">new</span> Porsche();</span><br><span class="line"><span class="comment">//porsche911.price();  // ERROR</span></span><br><span class="line"><span class="comment">// !cannot be implemented because of upcasting!</span></span><br><span class="line"><span class="comment">// baseclass don`t define price()!</span></span><br><span class="line">        </span><br><span class="line">                System.out.println(<span class="string">"test getDescription:"</span>);</span><br><span class="line"><span class="comment">// show that although upcasting, field are accessed</span></span><br><span class="line"><span class="comment">// in subclass, not baseclass.</span></span><br><span class="line">System.out.println(porsche911.getDescription());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>OUTPUT</p></blockquote><p>Benz:run方法</p><p>Benz:speed方法</p><p>BMW:run方法</p><p>BMW:speed方法</p><p>Porche:run方法</p><p>Porche:speed方法</p><p>test getDescription:</p><p>Porsche is the best!</p><hr><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>static修饰方法 静态方法 属于类的方法 即访问它不需要实例对象就能访问</p><hr><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><h4 id="static-final修饰data"><a href="#static-final修饰data" class="headerlink" title="static, final修饰data"></a>static, final修饰data</h4><blockquote><p>static 强调只有一份，final 说明是一个常量，final定义的基本类型(primitive)的值是不可改变的，但是fianl定义的引用对象的值是可以改变的</p></blockquote><p>只申明final，每次new产生不同的对象<br>static, final一起使用时，只有一块存储地址<br>申明static final，每次new产生相同对象</p><h4 id="final修饰methods"><a href="#final修饰methods" class="headerlink" title="final修饰methods"></a>final修饰methods</h4><blockquote><p>把方法锁定，确保在继承中使用方法行为不变，并且不会被覆盖<br>其二是效率，如果一个方法指明为final，就是同意编译器将针对该方法的所有调用都转为内嵌调用。 转为内嵌调用的目的是节省开销，因为编译器发现一个final方法调用命令时，会跳过程序代码这种正常方式而执行方法调用机制（将参数压入栈，跳至方法代码处并执行，然后跳回并清理栈中的参数，处理返回值），并且以方法体中的实际代码的副本来替代方法调用。但是如果一个方法很大，程序很膨胀，就会看不到内嵌带来的任何性能的提高。</p></blockquote><h4 id="final修饰类"><a href="#final修饰类" class="headerlink" title="final修饰类"></a>final修饰类</h4><blockquote><p>当某个类的整体定义为final时，表明该类不能被继承，方法不能被覆盖，且final类中的所有方法都隐式指定为是final的，方法声明为final后还可以有效地“关闭”动态绑定。</p></blockquote><hr><h3 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h3><!-- ![0](补天/collections.png) --><p><img src="https://github.com/Spycsh/blog/blob/master/images/%E8%A1%A5%E5%A4%A9/collections.png?raw=true"></p><hr><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><!-- ![1](补天/synchronize.png) --><p><img src="https://github.com/Spycsh/blog/blob/master/images/%E8%A1%A5%E5%A4%A9/synchronize.png?raw=true"></p><h3 id="修饰代码块，其他试图访问该对象的线程阻塞"><a href="#修饰代码块，其他试图访问该对象的线程阻塞" class="headerlink" title="修饰代码块，其他试图访问该对象的线程阻塞"></a>修饰代码块，其他试图访问该对象的线程阻塞</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="comment">// 同步代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象作为锁"><a href="#对象作为锁" class="headerlink" title="对象作为锁"></a>对象作为锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (account) &#123;</span><br><span class="line"><span class="comment">// 同步代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="没有明确的对象作为锁"><a href="#没有明确的对象作为锁" class="headerlink" title="没有明确的对象作为锁"></a>没有明确的对象作为锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">byte</span>[] lock = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];  <span class="comment">// 特殊的instance变量</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">synchronized</span>(lock) &#123;</span><br><span class="line">         <span class="comment">// todo 同步代码块</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/luoweifu/article/details/46613015" target="_blank" rel="noopener">参考资料</a></p><p><a href="https://www.cnblogs.com/moongeek/p/7631447.html" target="_blank" rel="noopener">消费者-生产者例子</a></p><hr><h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h2><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用匿名内部类  </span></span><br><span class="line">btn.setOnAction(<span class="keyword">new</span> EventHandler&lt;ActionEvent&gt;() &#123;  </span><br><span class="line">          <span class="meta">@Override</span>  </span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(ActionEvent event)</span> </span>&#123;  </span><br><span class="line">              System.out.println(<span class="string">"Hello World!"</span>);   </span><br><span class="line">          &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line">   </span><br><span class="line"><span class="comment">// 或者使用 lambda expression  </span></span><br><span class="line">btn.setOnAction(event -&gt; System.out.println(<span class="string">"Hello World!"</span>));</span><br></pre></td></tr></table></figure><h3 id="排序，线程，集合用法"><a href="#排序，线程，集合用法" class="headerlink" title="排序，线程，集合用法"></a>排序，线程，集合用法</h3><p><a href="https://www.cnblogs.com/franson-2016/p/5593080.html" target="_blank" rel="noopener">参考资料</a></p><hr><h3 id="LinkedList-和-ArrayList-区别"><a href="#LinkedList-和-ArrayList-区别" class="headerlink" title="LinkedList 和 ArrayList 区别"></a>LinkedList 和 ArrayList 区别</h3><p>LinkedList插入元素（任意位置只要断开链接再与新元素链接即可）很快，但访问中间元素需要从头或从尾开始遍历，很慢。<br>ArrayList插入元素很慢，它需要更新一遍数组，但访问元素只需要给出索引，相对较快。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>ds4</title>
      <link href="/blog/2019/04/12/ds4/"/>
      <url>/blog/2019/04/12/ds4/</url>
      
        <content type="html"><![CDATA[<h1 id="2019-04-12-笔记"><a href="#2019-04-12-笔记" class="headerlink" title="2019-04-12 笔记"></a>2019-04-12 笔记</h1><a id="more"></a><p><br><br><div class="row">    <embed src="DistSys4.pdf" width="100%" height="550" type="application/pdf"></div><br><br></p><h1 id="File-IO-operation"><a href="#File-IO-operation" class="headerlink" title="File IO operation"></a>File IO operation</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spycsh ●int countLines(): count line amount of file ●void print():</span></span><br><span class="line"><span class="comment"> *         print file on command line ●void copy(String filename): copy file</span></span><br><span class="line"><span class="comment"> *         content to the file ‘filename’ ●void delete(): delete the file ●void</span></span><br><span class="line"><span class="comment"> *         printDirectory(): prints the file directory ●List&lt;String&gt;</span></span><br><span class="line"><span class="comment"> *         getOtherFiles(): returns list of other files in same directory as</span></span><br><span class="line"><span class="comment"> *         file Addtionally, create a test class which demonstrates the</span></span><br><span class="line"><span class="comment"> *         functionality of your IOFile class!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileIo</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">FileIo(String fileName) &#123;</span><br><span class="line"><span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countLines</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line"><span class="keyword">int</span> lineNum = <span class="number">1</span>;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="keyword">this</span>.fileName);</span><br><span class="line">FileReader fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line"><span class="keyword">char</span>[] a = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">500</span>];</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">fr.read(a);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> c : a) &#123;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'\n'</span>)</span><br><span class="line">lineNum += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lineNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="keyword">this</span>.fileName);</span><br><span class="line">FileReader fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line"><span class="keyword">char</span>[] a = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">500</span>];</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">fr.read(a);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> c : a) &#123;</span><br><span class="line">System.out.print(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// create a new destination file with the filename</span></span><br><span class="line">File copyfile = <span class="keyword">new</span> File(filename);</span><br><span class="line">copyfile.createNewFile();</span><br><span class="line">FileWriter fw = <span class="keyword">new</span> FileWriter(copyfile);</span><br><span class="line"><span class="comment">// Read the source file</span></span><br><span class="line">File sourcefile = <span class="keyword">new</span> File(<span class="keyword">this</span>.fileName);</span><br><span class="line">FileReader fr = <span class="keyword">new</span> FileReader(sourcefile);</span><br><span class="line"><span class="keyword">char</span>[] a = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">500</span>];</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">fr.read(a);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> c : a) &#123;</span><br><span class="line">fw.write(c);</span><br><span class="line">&#125;</span><br><span class="line">fr.close();</span><br><span class="line">fw.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="keyword">this</span>.fileName);</span><br><span class="line">file.delete();</span><br><span class="line"><span class="keyword">if</span> (file.exists() == <span class="keyword">true</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"delete fail!"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"delete success!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDirectory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="keyword">this</span>.fileName);</span><br><span class="line">System.out.println(file.getParent());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;String&gt; <span class="title">getOtherFiles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; anotherFile = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">// first we should get the directory</span></span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="keyword">this</span>.fileName);</span><br><span class="line">String directoryStr = file.getParent();</span><br><span class="line"></span><br><span class="line">File directory = <span class="keyword">new</span> File(directoryStr);</span><br><span class="line"></span><br><span class="line">String[] allfile = directory.list();</span><br><span class="line"><span class="keyword">for</span> (String f : allfile) &#123;</span><br><span class="line"><span class="comment">// filter given file</span></span><br><span class="line"><span class="comment">// We should use equals rather than ==</span></span><br><span class="line"><span class="comment">// because we just need to filter</span></span><br><span class="line"><span class="comment">// by comparing content</span></span><br><span class="line"><span class="keyword">if</span> (!f.equals(file.getName()))</span><br><span class="line">anotherFile.add(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> anotherFile;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学校 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SWE</title>
      <link href="/blog/2019/04/11/SWE/"/>
      <url>/blog/2019/04/11/SWE/</url>
      
        <content type="html"><![CDATA[<h1 id="2019-04-09-笔记"><a href="#2019-04-09-笔记" class="headerlink" title="2019-04-09 笔记"></a>2019-04-09 笔记</h1><a id="more"></a><p><br><br><div class="row">    <embed src="SEII3UsabilityEngineeringProject.pdf" width="100%" height="550" type="application/pdf"></div><br><br></p><h1 id="14"><a href="#14" class="headerlink" title="14"></a>14</h1><ul><li>Social acceptability: base on culture and region</li></ul><h1 id="SWING"><a href="#SWING" class="headerlink" title="SWING"></a>SWING</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Button;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.CheckBox;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spycsh</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitHodgepodge</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">JFrame f = <span class="keyword">new</span> JFrame();</span><br><span class="line">f.setSize(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line">f.setTitle(<span class="string">"FruitOrder"</span>);</span><br><span class="line"></span><br><span class="line">JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; allFruitList = <span class="keyword">new</span> HashSet&lt;String&gt;(); <span class="comment">// display all fruit choosed</span></span><br><span class="line"></span><br><span class="line">f.getContentPane().setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line"><span class="comment">//f.add("Nor", new Button("Nor"));</span></span><br><span class="line"></span><br><span class="line">LinkedList&lt;String&gt; boxList = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">Collections.addAll(boxList, <span class="string">"apple banana kiwi orange melon grape"</span>.split(<span class="string">" "</span>));</span><br><span class="line"></span><br><span class="line">JCheckBox[] cbs = <span class="keyword">new</span> JCheckBox[boxList.size()];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; boxList.size(); i++) &#123;</span><br><span class="line">JCheckBox cb = cbs[i] = <span class="keyword">new</span> JCheckBox(boxList.get(i));</span><br><span class="line"></span><br><span class="line">cb.addChangeListener(<span class="keyword">new</span> ChangeListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(ChangeEvent e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get the event source( checkbox itself)</span></span><br><span class="line">JCheckBox checkBox = (JCheckBox) e.getSource();</span><br><span class="line">System.out.println(checkBox.getText() + <span class="string">" 是否选中: "</span> + checkBox.isSelected());</span><br><span class="line"><span class="keyword">if</span> (checkBox.isSelected())</span><br><span class="line">allFruitList.add(checkBox.getText());</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">allFruitList.remove(checkBox.getText());</span><br><span class="line">System.out.println(allFruitList);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">panel.add(cb);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">JButton btn = <span class="keyword">new</span> JButton();</span><br><span class="line">btn.setText(<span class="string">"Display the order!"</span>);</span><br><span class="line">btn.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">JOptionPane testOpt = <span class="keyword">new</span> JOptionPane();</span><br><span class="line">testOpt.showMessageDialog(<span class="keyword">new</span> JFrame(), <span class="string">"Your oder:"</span> + <span class="string">"\n"</span> + allFruitList);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">panel.add(btn);</span><br><span class="line"></span><br><span class="line">f.setContentPane(panel); <span class="comment">//</span></span><br><span class="line">f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JAVAFX"><a href="#JAVAFX" class="headerlink" title="JAVAFX"></a>JAVAFX</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> application;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spycsh</span></span><br><span class="line"><span class="comment"> * Main window: user can choose from 6 different fruits</span></span><br><span class="line"><span class="comment"> * After confirming the choice of fruits another window will pop up and tell the user the choice of fruits</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.BorderPane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.scene.Group;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.CheckBox;</span><br><span class="line"><span class="keyword">import</span> javafx.beans.value.ChangeListener;</span><br><span class="line"><span class="keyword">import</span> javafx.beans.value.ObservableValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.GridPane;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Button;</span><br><span class="line"><span class="keyword">import</span> javafx.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> javafx.event.EventHandler;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.text.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitHodgepodge</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Stage primaryStage)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BorderPane root = <span class="keyword">new</span> BorderPane();</span><br><span class="line"></span><br><span class="line">GridPane gp = <span class="keyword">new</span> GridPane();</span><br><span class="line">Scene scene = <span class="keyword">new</span> Scene(gp, <span class="number">500</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">LinkedList&lt;String&gt; boxList = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">Collections.addAll(boxList, <span class="string">"apple banana kiwi orange melon grape"</span>.split(<span class="string">" "</span>));</span><br><span class="line"></span><br><span class="line">CheckBox[] cbs = <span class="keyword">new</span> CheckBox[boxList.size()];</span><br><span class="line">LinkedList&lt;String&gt; allFruitList = <span class="keyword">new</span> LinkedList&lt;String&gt;(); <span class="comment">// display all fruit choosed</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// final CheckBox cb;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; boxList.size(); i++) &#123;</span><br><span class="line"><span class="comment">//            cbs[i] = boxList.poll();</span></span><br><span class="line">CheckBox cb = cbs[i] = <span class="keyword">new</span> CheckBox(boxList.get(i));</span><br><span class="line"></span><br><span class="line"><span class="comment">//            final CheckBox cb0 = new CheckBox("checkBox");</span></span><br><span class="line"><span class="comment">//            final CheckBox cb1 = new CheckBox("aa");</span></span><br><span class="line"></span><br><span class="line">cb.selectedProperty().addListener(<span class="keyword">new</span> ChangeListener&lt;Boolean&gt;() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changed</span><span class="params">(ObservableValue&lt;? extends Boolean&gt; ov, Boolean old_val, Boolean new_val)</span> </span>&#123;</span><br><span class="line"><span class="comment">//            System.out.println(cb.isSelected());&#125;</span></span><br><span class="line"><span class="keyword">if</span> (new_val) &#123;</span><br><span class="line">allFruitList.offer(cb.getText());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">allFruitList.remove(cb.getText());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(allFruitList);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">gp.add(cb, <span class="number">0</span>, i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Button btn = <span class="keyword">new</span> Button();</span><br><span class="line">btn.setText(<span class="string">"Display the order!"</span>);</span><br><span class="line">btn.setOnAction(<span class="keyword">new</span> EventHandler&lt;ActionEvent&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(ActionEvent event)</span> </span>&#123;</span><br><span class="line">Group root = <span class="keyword">new</span> Group();</span><br><span class="line">Scene scene = <span class="keyword">new</span> Scene(root, <span class="number">300</span>, <span class="number">250</span>);</span><br><span class="line"><span class="comment">//Stage stg = new Stage();</span></span><br><span class="line"><span class="comment">//System.out.println((String)allFruitList.toString());</span></span><br><span class="line"><span class="comment">//Pattern pattern = Pattern.compile("'(\\D+)'");</span></span><br><span class="line"><span class="comment">//String i = (String)allFruitList.toString();</span></span><br><span class="line"><span class="comment">//Matcher m = pattern.matcher(i);</span></span><br><span class="line"><span class="comment">//if (m.find())&#123;</span></span><br><span class="line"><span class="comment">//Text text = new Text(100, 100, m.group(1));</span></span><br><span class="line"><span class="comment">//root.getChildren().add(text);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//String[] arr = allFruitList.toString().split("'");</span></span><br><span class="line">System.out.println();</span><br><span class="line">String orderString = <span class="keyword">new</span> String();</span><br><span class="line"><span class="keyword">for</span> (String s : allFruitList) &#123;</span><br><span class="line">orderString += s + <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">Text text = <span class="keyword">new</span> Text(<span class="number">100</span>, <span class="number">100</span>, <span class="string">"final order:"</span> + <span class="string">"\n"</span> + orderString);</span><br><span class="line">root.getChildren().add(text);</span><br><span class="line">primaryStage.setScene(scene);</span><br><span class="line">primaryStage.show();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gp.add(btn, <span class="number">10</span>, <span class="number">0</span>); <span class="comment">// place the button</span></span><br><span class="line"></span><br><span class="line">scene.getStylesheets().add(getClass().getResource(<span class="string">"application.css"</span>).toExternalForm());</span><br><span class="line"></span><br><span class="line">primaryStage.setScene(scene);</span><br><span class="line">primaryStage.show();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">launch(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学校 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ds3h</title>
      <link href="/blog/2019/04/09/ds3h/"/>
      <url>/blog/2019/04/09/ds3h/</url>
      
        <content type="html"><![CDATA[<h1 id="2019-04-09-笔记"><a href="#2019-04-09-笔记" class="headerlink" title="2019-04-09 笔记"></a>2019-04-09 笔记</h1><a id="more"></a><p><br><br><div class="row">    <embed src="my_ds01_Introduction.pdf" width="100%" height="550" type="application/pdf"></div><br><br></p><h2 id="P16"><a href="#P16" class="headerlink" title="P16"></a>P16</h2><blockquote><p>What does a ds do?</p></blockquote><ul><li>share hardwares, software and data</li><li>let computers coordinate and synchronize</li><li>offer users an integrated computing facility not limited by location</li></ul><h2 id="P17"><a href="#P17" class="headerlink" title="P17"></a>P17</h2><blockquote><p>What is the essetial part?</p></blockquote><ul><li>auto scaling &amp; load balance</li><li>城市规划例子,when a computer is broken, it will be slower for the system implementation because of the boundary computation which counts on the coordinations one and another computers, so as for synchronization the system have to wait for the slowest computer, with heavier load than others, to process.</li></ul><h2 id="P18"><a href="#P18" class="headerlink" title="P18"></a>P18</h2><ul><li><p>(b) filters the redundant info and ensure the useful info procured to minimum.</p></li><li><p>(b) will have a higher speed of response.</p></li></ul><h2 id="P26"><a href="#P26" class="headerlink" title="P26"></a>P26</h2><blockquote><p>What is Mobility Transparency?</p></blockquote><ul><li>eg. Stream serialize deserialize</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学校 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>eigen-everthing</title>
      <link href="/blog/2019/04/08/eigen-everthing/"/>
      <url>/blog/2019/04/08/eigen-everthing/</url>
      
        <content type="html"><![CDATA[<h2 id="brief-introduction-of-eigenvalue-and-eigenvector-in-linear-algebra"><a href="#brief-introduction-of-eigenvalue-and-eigenvector-in-linear-algebra" class="headerlink" title="brief introduction of eigenvalue and eigenvector in linear algebra"></a>brief introduction of eigenvalue and eigenvector in linear algebra</h2><a id="more"></a><!-- ![0](eigen-everthing/0.jpg) --><p><img src="https://github.com/Spycsh/blog/blob/master/images/eigen-everthing/0.jpg?raw=true"></p><ul><li><p>determinant 行列式</p></li><li><p>eigenvalue特征值/eigenvector特征向量/eigenspace特征空间(all of the eigenvectors that correspond the eigrnvalue)</p></li><li><p>null space</p></li><li><p>nontrival</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ds2</title>
      <link href="/blog/2019/04/05/ds2/"/>
      <url>/blog/2019/04/05/ds2/</url>
      
        <content type="html"><![CDATA[<h1 id="2019-04-05-笔记"><a href="#2019-04-05-笔记" class="headerlink" title="2019-04-05 笔记"></a>2019-04-05 笔记</h1><a id="more"></a><p><br><br><div class="row">    <embed src="DistSys-2-2019.pdf" width="100%" height="550" type="application/pdf"></div><br><br></p><!-- name the pdf should not comprise space! --><ul><li>make every attribute private and Use getter and setter to access them </li></ul><h2 id="Communication-of-DS"><a href="#Communication-of-DS" class="headerlink" title="Communication of DS"></a>Communication of DS</h2><ul><li><p>synchronous: The sender may block activity until acknowledgement from receiver</p></li><li><p>big-endian大端法 small-endian小端法</p></li><li><p>ASCII, Unicode</p></li><li><p>external data representation and marshalling</p></li></ul><blockquote><p>alternative method</p></blockquote><h2 id="Streams"><a href="#Streams" class="headerlink" title="Streams"></a>Streams</h2><h3 id="note"><a href="#note" class="headerlink" title="note"></a>note</h3><ul><li>transforming in bytes and characters</li></ul><blockquote><p>encoded in unicode, must be 2 bytes not 1</p></blockquote><p>class Employee implements Serializable(In China)<br>-&gt; Seralization-&gt;deserialization-&gt;class Employee(In luebeck)</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>说明：建立一个Student类，把它用Stream的方式serialize再deserialize,<br>从而实现信息的传输。</p><p><img src="https://github.com/Spycsh/blog/blob/master/images/ds2/1.jpg?raw=true"></p><h4 id="定义Student类"><a href="#定义Student类" class="headerlink" title="定义Student类"></a>定义Student类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> studentNumber;</span><br><span class="line"><span class="keyword">private</span> String degreeCourse;</span><br><span class="line"></span><br><span class="line">Student(<span class="keyword">int</span> studentNumber, String degreeCourse) &#123;</span><br><span class="line"><span class="keyword">this</span>.studentNumber = studentNumber;</span><br><span class="line"><span class="keyword">this</span>.degreeCourse = degreeCourse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"studentNumber:"</span> + studentNumber + <span class="string">" "</span> + <span class="string">"degreeCourse:"</span> + degreeCourse;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="serialize过程"><a href="#serialize过程" class="headerlink" title="serialize过程"></a>serialize过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSerializing</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"test"</span>);</span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line"></span><br><span class="line">Student chen = <span class="keyword">new</span> Student(<span class="number">12</span>, <span class="string">"ITB"</span>);</span><br><span class="line">oos.writeObject(chen);</span><br><span class="line">oos.close();</span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="deserialize过程"><a href="#deserialize过程" class="headerlink" title="deserialize过程"></a>deserialize过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDeserialize</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">FileInputStream fos = <span class="keyword">new</span> FileInputStream(<span class="string">"test"</span>);</span><br><span class="line">ObjectInputStream oos = <span class="keyword">new</span> ObjectInputStream(fos);</span><br><span class="line">Student aStudent = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">aStudent = (Student) oos.readObject();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(aStudent.toString());</span><br><span class="line">oos.close();</span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>test文件中显示乱码，是serialize后的字符流<br>deserialize后通过自己定义的toString打印可以输出原来的信息</p><h4 id="疑难"><a href="#疑难" class="headerlink" title="疑难"></a>疑难</h4><ul><li>test文件建在项目文件夹而不是src文件夹下</li><li><blockquote><p>使用ObjectInputStream反序列化的时候，ObjeectInputStream会先读取文件中的serialVersionUID，然后与本地的class文件的serialVersionUID<br>进行对比，如果这两个id不一致，反序列则失败</p></blockquote></li></ul><p>因此在Student class中定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br></pre></td></tr></table></figure><p>即可</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.cnblogs.com/fnz0/p/5410856.html" target="_blank" rel="noopener">Source</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学校 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Eclipse 高效代码</title>
      <link href="/blog/2019/04/04/Eclipse%E7%AE%80%E6%B4%81%E4%BB%A3%E7%A0%81/"/>
      <url>/blog/2019/04/04/Eclipse%E7%AE%80%E6%B4%81%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Eclipse-use-amp-code-convention"><a href="#Eclipse-use-amp-code-convention" class="headerlink" title="Eclipse use &amp; code convention"></a>Eclipse use &amp; code convention</h1><a id="more"></a><h2 id="Eclipse-use"><a href="#Eclipse-use" class="headerlink" title="Eclipse use"></a>Eclipse use</h2><h3 id="项目导出压缩包"><a href="#项目导出压缩包" class="headerlink" title="项目导出压缩包"></a>项目导出压缩包</h3><p>File-&gt;Export-&gt;General-&gt;选择要压缩的类型</p><h3 id="修改缩进等格式-CTRL-SHIFT-F"><a href="#修改缩进等格式-CTRL-SHIFT-F" class="headerlink" title="修改缩进等格式(CTRL+SHIFT+F)"></a>修改缩进等格式(CTRL+SHIFT+F)</h3><p>选中代码-&gt;Source-&gt;Format</p><h3 id="添加javadoc注释（ALT-SHIFT-J"><a href="#添加javadoc注释（ALT-SHIFT-J" class="headerlink" title="添加javadoc注释（ALT+SHIFT+J)"></a>添加javadoc注释（ALT+SHIFT+J)</h3><p>选中元素-&gt;Source-&gt;Generate Element Comment</p><h3 id="改名-ALT-SHIFT-R"><a href="#改名-ALT-SHIFT-R" class="headerlink" title="改名(ALT+SHIFT+R)"></a>改名(ALT+SHIFT+R)</h3><p>选中需要改名的元素-&gt;右键Refactor-&gt;Rename<br>.将会修改文件中所有有这个名字的元素 </p><h3 id="生成javadoc"><a href="#生成javadoc" class="headerlink" title="生成javadoc"></a>生成javadoc</h3><h2 id="code-convention"><a href="#code-convention" class="headerlink" title="code convention"></a>code convention</h2><p><a href="https://www.oracle.com/technetwork/java/codeconventions-150003.pdf" target="_blank" rel="noopener">java code convention</a></p><blockquote><ul><li>Javadoc comment<blockquote><ul><li>Header/Classes</li><li>Functions</li></ul></blockquote></li><li>Name<blockquote><ul><li>Package: student</li><li>Class&amp;Inteface: Student</li><li>variable&amp;method: inputFileSize</li><li>constant:MAXWEIGHT</li></ul></blockquote></li><li>Layout/indentation</li><li>Space</li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Information about application for master degree</title>
      <link href="/blog/2019/03/19/Master/"/>
      <url>/blog/2019/03/19/Master/</url>
      
        <content type="html"><![CDATA[<h1 id="德电160硕士申请"><a href="#德电160硕士申请" class="headerlink" title="德电160硕士申请"></a>德电160硕士申请</h1><a id="more"></a><h2 id="德国"><a href="#德国" class="headerlink" title="德国"></a>德国</h2><h3 id="信息表"><a href="#信息表" class="headerlink" title="信息表"></a>信息表</h3><table><thead><tr><th style="text-align:center">大学名</th><th style="text-align:center">相关专业名称</th><th style="text-align:center">地点</th><th style="text-align:center">绩点要求</th><th style="text-align:center">托福/GRE要求</th><th style="text-align:center">申请截止日期</th><th style="text-align:center">评价</th></tr></thead><tbody><tr><td style="text-align:center"><a href="http://www.rwth-aachen.de/cms/root/Studium/Vor-dem-Studium/Zugangsvoraussetzungen/~ddxf/Zugangsvoraussetzungen-fuer-den-Master/lidx/1/" target="_blank" rel="noopener">亚琛工业大学</a></td><td style="text-align:center"><a href="http://www.rwth-aachen.de/go/id/bowk?lidx=1#aaaaaaaaaaabowl" target="_blank" rel="noopener">Media Infomatics（多媒体信息）</a></td><td style="text-align:center">波恩&amp;亚琛</td><td style="text-align:center"></td><td style="text-align:center">托福90</td><td style="text-align:center">3.1</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><a href="http://www.rwth-aachen.de/go/id/bngt?lidx=1#aaaaaaaaaaabngu" target="_blank" rel="noopener">EE,IT,CE</a></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">托福90 GREverbal超过%15，quantitive超过%75</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="http://www.e-technik.tu-dortmund.de/cms1/de/Lehre_Studium/Studienangebot/Master_A_R/Master_A_R_en/Application_Bewerbung/index.html" target="_blank" rel="noopener">Dortmund 大学</a></td><td style="text-align:center">机器人自动化</td><td style="text-align:center">Dortmund</td><td style="text-align:center"></td><td style="text-align:center">80</td><td style="text-align:center">3.31</td><td style="text-align:center">机器人研究方面很强</td></tr><tr><td style="text-align:center">慕尼黑工业大学</td><td style="text-align:center">ECE</td><td style="text-align:center">慕尼黑</td><td style="text-align:center">3.5+</td><td style="text-align:center">88</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">斯图加特大学</td><td style="text-align:center">infomation technology <a href="https://www.infotech.uni-stuttgart.de/application/index.html" target="_blank" rel="noopener">官网</a> <a href="https://www.daad.de/deutschland/studienangebote/international-programmes/en/detail/3677/" target="_blank" rel="noopener">DAAD网址</a></td><td style="text-align:center">Stuttgart</td><td style="text-align:center">70%ofbest-on-scale, e.g.70%/100%; 2.8/4; 2.5/1.0 (for German Marks)</td><td style="text-align:center">托福80</td><td style="text-align:center">2.15</td><td style="text-align:center">EU citizens do not pay tuition, whereas non-EU citizens pay a tuition of 1,500 EUR per semester.（有学费要求）</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">Computer Science <a href="https://www.informatik.uni-stuttgart.de/studium/interessierte/msc-studiengaenge/msc-computer-science/admission/index.html" target="_blank" rel="noopener">官网</a> <a href="https://www.daad.de/deutschland/studienangebote/international-programmes/en/detail/4439/#tab_overview" target="_blank" rel="noopener">DAAD网址</a></td><td style="text-align:center"></td><td style="text-align:center">无</td><td style="text-align:center">托福80</td><td style="text-align:center">2.15（winter semester） 6.15(summer semester)</td><td style="text-align:center">Bachelor’s degree with a programme duration of at least six semesters in computer science, software engineering, or in a closely related subject(专业匹配度可能较低)EU citizens do not pay tuition, whereas non-EU citizens pay a tuition of 1,500 EUR per semester.（有学费要求）</td></tr><tr><td style="text-align:center">Saarland University萨尔大学</td><td style="text-align:center">Saarbrücken Graduate School of Computer Science</td><td style="text-align:center">Saarbrücken</td><td style="text-align:center">75%以上</td><td style="text-align:center">推荐GRE，托福95/120</td><td style="text-align:center">11/15；根据专业</td><td style="text-align:center">不用学费，强在：马普所，视觉信息但毕业很难，挂科率极高</td></tr><tr><td style="text-align:center">Saarland University萨尔大学<a href="https://www.daad.de/deutschland/studienangebote/international-programmes/en/result/?q=Saarland&amp;degree%5B%5D=&amp;lang%5B%5D=2&amp;fos=&amp;crossFac=&amp;cert=&amp;admReq=&amp;scholarshipLC=&amp;scholarshipSC=&amp;langDeAvailable=&amp;langEnAvailable=&amp;lvlEn%5B%5D=&amp;cit%5B%5D=&amp;tyi%5B%5D=&amp;ins%5B%5D=&amp;fee=&amp;bgn%5B%5D=&amp;dur%5B%5D=&amp;sort=4&amp;subjects%5B%5D=&amp;limit=10&amp;offset=10&amp;display=list" target="_blank" rel="noopener">DAAD网址</a></td><td style="text-align:center">Visual Computing (MSc)</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Saarland University萨尔大学</td><td style="text-align:center">Embedded Systems (MSc)</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Saarland University萨尔大学</td><td style="text-align:center">Mathematics and Computer Science (MSc)</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Saarland University萨尔大学</td><td style="text-align:center">Computer Science (MSc)</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">KIT</td><td style="text-align:center">EEM,FE,MPD,MSEM,POM,ISEM</td><td style="text-align:center">Karlsruhe</td><td style="text-align:center"></td><td style="text-align:center">托福90</td><td style="text-align:center">1/15</td><td style="text-align:center">30000欧</td></tr></tbody></table><h3 id="基本简介"><a href="#基本简介" class="headerlink" title="基本简介"></a>基本简介</h3><h4 id="学校概览"><a href="#学校概览" class="headerlink" title="学校概览"></a>学校概览</h4><!-- ![0](Master/德国学校.jpg) --><p><img src="https://github.com/Spycsh/blog/blob/master/images/Master/%E5%BE%B7%E5%9B%BD%E5%AD%A6%E6%A0%A1.jpg?raw=true"></p><h4 id="11所精英大学"><a href="#11所精英大学" class="headerlink" title="11所精英大学"></a>11所精英大学</h4><blockquote><p>理工类3所（慕尼黑工业大学、德累斯顿工业大学、亚琛工业大学），文理类8所<br>（海德堡大学、 柏林自由大学、柏林洪堡大学、慕尼黑大学、图宾根大学、康斯坦茨大学、科隆大学、不莱梅大学）</p></blockquote><!-- ![1](Master/精英大学.png) --><p><img src="https://github.com/Spycsh/blog/blob/master/images/Master/%E7%B2%BE%E8%8B%B1%E5%A4%A7%E5%AD%A6.png?raw=true"></p><blockquote><p>大学名称对应</p></blockquote><!-- ![2](Master/name.png) --><p><img src="https://github.com/Spycsh/blog/blob/master/images/Master/name.png?raw=true"></p><h4 id="TU9"><a href="#TU9" class="headerlink" title="TU9"></a>TU9</h4><blockquote><p>九所德国大学，包括亚琛工业大学RWTH Aachen, 柏林工业大学TU Berlin, 不伦瑞克工业大学TU Braunschweig, 达姆施达特工业大学TU Darmstadt,<br> 德累斯顿工业大学TU Dresden, 莱布尼茨-汉诺威大学Leibniz Universität Hannover,<br>  卡尔斯鲁厄理工学院Karlsruher Institut für Technologie, 慕尼黑工业大学TU München,<br>   斯图加特大学Universität Stuttgart。九所大学都是1900年之前成立的理工高校。<br>   TU9联盟主席Ernst Schmachtenberg博士教授指出，”TU9理工高校联盟就是科研实力的代名词。“</p></blockquote><h4 id="U15"><a href="#U15" class="headerlink" title="U15"></a>U15</h4><blockquote><p>U15大学联盟是德国的大型高校、研究型高校联盟，成立于2012年10月12日。联盟成立宗旨为改善德国科研和教育的架构。占德国高校总数13%的十五所高校，承担了37%的第三方资助、60%的医科资助、43%的博士授予，并获得了43%的莱布尼茨奖。目前联盟主席为海德堡大学校长爱特尔(Bernd Eitel)。<br>联盟成员,柏林自由大学,海德堡大学,柏林洪堡大学,波恩大学,法兰克福大学,弗莱堡大学,哥廷根大学,汉堡大学,科隆大学,莱比锡大学,美因茨大学,慕尼黑大学,明斯特大学,图宾根大学,维尔茨堡大学.</p></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.daad.de/deutschland/studienangebote/international-programmes/en/result/?crossFac=&amp;cert=&amp;admReq=&amp;scholarshipLC=&amp;scholarshipSC=&amp;degree%5B%5D=&amp;fos=&amp;langDeAvailable=&amp;langEnAvailable=&amp;lang%5B%5D=&amp;cit%5B%5D=&amp;tyi%5B%5D=&amp;ins%5B%5D=&amp;dur%5B%5D=&amp;sort=4&amp;subjects%5B%5D=&amp;q=&amp;limit=10&amp;offset=&amp;display=list" target="_blank" rel="noopener">DAAD查找路径</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>少年的诗</title>
      <link href="/blog/2018/12/13/%E5%B0%91%E5%B9%B4%E7%9A%84%E8%AF%97/"/>
      <url>/blog/2018/12/13/%E5%B0%91%E5%B9%B4%E7%9A%84%E8%AF%97/</url>
      
        <content type="html"><![CDATA[<blockquote><center>三峡江声流笔底, 六朝帆影落樽前<br><center>胸中机杼，笔底波澜<br><center>写一点诗，总是好的</center></center></center></blockquote><a id="more"></a><h1 id="《侠的诗》"><a href="#《侠的诗》" class="headerlink" title=" 《侠的诗》 "></a><center> 《侠的诗》 </center></h1><center>“傲指弹云分入酒，青冠流古照秋霜”<center>太平无侠士<center>那就写一点诗<center>放浪侠气</center><h2 id="「侠」"><a href="#「侠」" class="headerlink" title=" 「侠」"></a><center> 「侠」</center></h2><center>辞京飘迹楚山茫，</center><br><center>谑眼穿尘淡冕光。</center><br><center>傲指弹云分入酒，</center><br><center>青冠流古照秋霜。</center><h1 id="《少年游》"><a href="#《少年游》" class="headerlink" title=" 《少年游》 "></a><center> 《少年游》 </center></h1><center>“花有重开日，人无再少年”<center>最好的时光<center>总是少年时<center>那走遍的江河</center><h2 id="「入山」"><a href="#「入山」" class="headerlink" title=" 「入山」"></a><center> 「入山」</center></h2><center>山深纵马伫难前，</center><br><center>步下飞光百丈渊。</center><br><center>雾卷云廊封道尽，</center><br><center>雨开峰骨作桥源。</center><br><center>悠笛风远惊人迹，</center><br><center>长海际回忆陌年。</center><br><center>绝处寻松掬水月，</center><br><center>春秋一脉本多缘。</center><h2 id="「古原雨」"><a href="#「古原雨」" class="headerlink" title=" 「古原雨」"></a><center> 「古原雨」</center></h2><center>故迹青鸦驻，三江入古原。</center><br><center>立堤涛水逝，临野聚峰眠。</center><br><center>塔外清魂雨，烟间断梦田。</center><br><center>萧霜凋旧木，归马闭门前。</center><h2 id="「题赛里木湖」"><a href="#「题赛里木湖」" class="headerlink" title=" 「题赛里木湖」"></a><center> 「题赛里木湖」</center></h2><center>深云压海境，微雨落晶珠。</center><br><center>几骑寻闲客，风波自在途。</center><h1 id="《韵之心》"><a href="#《韵之心》" class="headerlink" title=" 《韵之心》 "></a><center> 《韵之心》 </center></h1><center>古有琴谱阳关三叠<br><center>“劝君更进一杯酒，西出阳关无故人”<br><center>古有诗歌驻马衔杯<br><center>“圣代即今多雨露，暂时分手莫踌躇”</center><h2 id="「缘深缘浅，留念诸君」"><a href="#「缘深缘浅，留念诸君」" class="headerlink" title=" 「缘深缘浅，留念诸君」"></a><center> 「缘深缘浅，留念诸君」</center></h2><center>何泣春江归晚照？松风水落对槐花。</center><br><center>遗朝柳折留寻念，此坊歌倾续梦茶。</center><br><center>解带吹心风作客，流光转忆泪分霞。</center><br><center>云终不见诸君影，碧海行帆懒问涯。</center><h2 id="「岳麓•祭•忆君之风忆水长」"><a href="#「岳麓•祭•忆君之风忆水长」" class="headerlink" title=" 「岳麓•祭•忆君之风忆水长」 "></a><center> 「岳麓•祭•忆君之风忆水长」 </center></h2><center>望尽湘江暮，亭间墨客愁。</center><br><center>满林兼叶落，独木与谁谋！</center><br><center>老雁飞斜镜，青衫立冷丘。</center><br><center>出钩疑钓叟，惟是月如舟。</center><h1 id="《家国情》"><a href="#《家国情》" class="headerlink" title=" 《家国情》 "></a><center> 《家国情》 </center></h1><center>“王师北定中原日”<center>太平年间<center>曾经的荣辱仿佛被渐渐淡化了<center>而那血脉奔腾的黄河长江<center>却依然肃穆</center><h2 id="「记南京大屠杀」"><a href="#「记南京大屠杀」" class="headerlink" title=" 「记南京大屠杀」 "></a><center> 「记南京大屠杀」 </center></h2><center>寇兵侵戮昔悲史，</center><br><center>瑟瑟汗青警自鸣。</center><br><center>国父陵前国尽复，</center><br><center>雨花台上雨堪惊！</center><br><center>三江拾恨祭英骨，</center><br><center>亿气同途筑远程。</center><br><center>勿任危心流海去，</center><br><center>涯间舟载惜天明。</center></center></center></center></center></center></center></center></center></center></center></center></center></center>]]></content>
      
      
      
    </entry>
    
  
  
</search>
